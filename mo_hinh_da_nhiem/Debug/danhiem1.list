
danhiem1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000578c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  0800589c  0800589c  0000689c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a0c  08005a0c  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  08005a0c  08005a0c  00006a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a14  08005a14  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a14  08005a14  00006a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a18  08005a18  00006a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005a1c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001250  20000070  08005a8c  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012c0  08005a8c  000072c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014384  00000000  00000000  00007099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003182  00000000  00000000  0001b41d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  0001e5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fd8  00000000  00000000  0001f9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa0a  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017993  00000000  00000000  0003b3ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096fa6  00000000  00000000  00052d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9d03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e28  00000000  00000000  000e9d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000efb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08005884 	.word	0x08005884

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08005884 	.word	0x08005884

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <DHT11_SetPinOutput>:
#include "dht11.h"
#include "cmsis_os.h"

static void DHT11_SetPinOutput(void) {
 8000160:	b580      	push	{r7, lr}
 8000162:	b084      	sub	sp, #16
 8000164:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000166:	463b      	mov	r3, r7
 8000168:	2200      	movs	r2, #0
 800016a:	601a      	str	r2, [r3, #0]
 800016c:	605a      	str	r2, [r3, #4]
 800016e:	609a      	str	r2, [r3, #8]
 8000170:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = DHT11_PIN;
 8000172:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000176:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000178:	2301      	movs	r3, #1
 800017a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800017c:	2302      	movs	r3, #2
 800017e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000180:	463b      	mov	r3, r7
 8000182:	4619      	mov	r1, r3
 8000184:	4803      	ldr	r0, [pc, #12]	@ (8000194 <DHT11_SetPinOutput+0x34>)
 8000186:	f000 ff6f 	bl	8001068 <HAL_GPIO_Init>
}
 800018a:	bf00      	nop
 800018c:	3710      	adds	r7, #16
 800018e:	46bd      	mov	sp, r7
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	40010c00 	.word	0x40010c00

08000198 <DHT11_SetPinInput>:

static void DHT11_SetPinInput(void) {
 8000198:	b580      	push	{r7, lr}
 800019a:	b084      	sub	sp, #16
 800019c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800019e:	463b      	mov	r3, r7
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]
 80001a4:	605a      	str	r2, [r3, #4]
 80001a6:	609a      	str	r2, [r3, #8]
 80001a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = DHT11_PIN;
 80001aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80001ae:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001b0:	2300      	movs	r3, #0
 80001b2:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001b4:	2300      	movs	r3, #0
 80001b6:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 80001b8:	463b      	mov	r3, r7
 80001ba:	4619      	mov	r1, r3
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <DHT11_SetPinInput+0x34>)
 80001be:	f000 ff53 	bl	8001068 <HAL_GPIO_Init>
}
 80001c2:	bf00      	nop
 80001c4:	3710      	adds	r7, #16
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	40010c00 	.word	0x40010c00

080001d0 <DHT11_Read>:

uint8_t DHT11_Read(DHT11_Data *data) {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b084      	sub	sp, #16
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
    uint8_t buffer[5] = {0};
 80001d8:	2300      	movs	r3, #0
 80001da:	60bb      	str	r3, [r7, #8]
 80001dc:	2300      	movs	r3, #0
 80001de:	733b      	strb	r3, [r7, #12]
    uint8_t i, j;

    // Start signal
    DHT11_SetPinOutput();
 80001e0:	f7ff ffbe 	bl	8000160 <DHT11_SetPinOutput>
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_RESET);
 80001e4:	2200      	movs	r2, #0
 80001e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001ea:	4844      	ldr	r0, [pc, #272]	@ (80002fc <DHT11_Read+0x12c>)
 80001ec:	f001 f8d7 	bl	800139e <HAL_GPIO_WritePin>
    osDelay(18);
 80001f0:	2012      	movs	r0, #18
 80001f2:	f003 f849 	bl	8003288 <osDelay>
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 80001f6:	2201      	movs	r2, #1
 80001f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001fc:	483f      	ldr	r0, [pc, #252]	@ (80002fc <DHT11_Read+0x12c>)
 80001fe:	f001 f8ce 	bl	800139e <HAL_GPIO_WritePin>
    osDelay(1);
 8000202:	2001      	movs	r0, #1
 8000204:	f003 f840 	bl	8003288 <osDelay>
    DHT11_SetPinInput();
 8000208:	f7ff ffc6 	bl	8000198 <DHT11_SetPinInput>

    // Check response
    if (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) != GPIO_PIN_RESET) return 1;
 800020c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000210:	483a      	ldr	r0, [pc, #232]	@ (80002fc <DHT11_Read+0x12c>)
 8000212:	f001 f8ad 	bl	8001370 <HAL_GPIO_ReadPin>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d001      	beq.n	8000220 <DHT11_Read+0x50>
 800021c:	2301      	movs	r3, #1
 800021e:	e069      	b.n	80002f4 <DHT11_Read+0x124>
    while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_RESET);
 8000220:	bf00      	nop
 8000222:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000226:	4835      	ldr	r0, [pc, #212]	@ (80002fc <DHT11_Read+0x12c>)
 8000228:	f001 f8a2 	bl	8001370 <HAL_GPIO_ReadPin>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d0f7      	beq.n	8000222 <DHT11_Read+0x52>
    while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET);
 8000232:	bf00      	nop
 8000234:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000238:	4830      	ldr	r0, [pc, #192]	@ (80002fc <DHT11_Read+0x12c>)
 800023a:	f001 f899 	bl	8001370 <HAL_GPIO_ReadPin>
 800023e:	4603      	mov	r3, r0
 8000240:	2b01      	cmp	r3, #1
 8000242:	d0f7      	beq.n	8000234 <DHT11_Read+0x64>

    // Read data
    for (i = 0; i < 5; i++) {
 8000244:	2300      	movs	r3, #0
 8000246:	73fb      	strb	r3, [r7, #15]
 8000248:	e03d      	b.n	80002c6 <DHT11_Read+0xf6>
        for (j = 0; j < 8; j++) {
 800024a:	2300      	movs	r3, #0
 800024c:	73bb      	strb	r3, [r7, #14]
 800024e:	e034      	b.n	80002ba <DHT11_Read+0xea>
            while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_RESET);
 8000250:	bf00      	nop
 8000252:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000256:	4829      	ldr	r0, [pc, #164]	@ (80002fc <DHT11_Read+0x12c>)
 8000258:	f001 f88a 	bl	8001370 <HAL_GPIO_ReadPin>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d0f7      	beq.n	8000252 <DHT11_Read+0x82>
            osDelay(1);
 8000262:	2001      	movs	r0, #1
 8000264:	f003 f810 	bl	8003288 <osDelay>
            if (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET) {
 8000268:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800026c:	4823      	ldr	r0, [pc, #140]	@ (80002fc <DHT11_Read+0x12c>)
 800026e:	f001 f87f 	bl	8001370 <HAL_GPIO_ReadPin>
 8000272:	4603      	mov	r3, r0
 8000274:	2b01      	cmp	r3, #1
 8000276:	d11d      	bne.n	80002b4 <DHT11_Read+0xe4>
                buffer[i] |= (1 << (7 - j));
 8000278:	7bfb      	ldrb	r3, [r7, #15]
 800027a:	3310      	adds	r3, #16
 800027c:	443b      	add	r3, r7
 800027e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000282:	b25a      	sxtb	r2, r3
 8000284:	7bbb      	ldrb	r3, [r7, #14]
 8000286:	f1c3 0307 	rsb	r3, r3, #7
 800028a:	2101      	movs	r1, #1
 800028c:	fa01 f303 	lsl.w	r3, r1, r3
 8000290:	b25b      	sxtb	r3, r3
 8000292:	4313      	orrs	r3, r2
 8000294:	b25a      	sxtb	r2, r3
 8000296:	7bfb      	ldrb	r3, [r7, #15]
 8000298:	b2d2      	uxtb	r2, r2
 800029a:	3310      	adds	r3, #16
 800029c:	443b      	add	r3, r7
 800029e:	f803 2c08 	strb.w	r2, [r3, #-8]
                while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET);
 80002a2:	bf00      	nop
 80002a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002a8:	4814      	ldr	r0, [pc, #80]	@ (80002fc <DHT11_Read+0x12c>)
 80002aa:	f001 f861 	bl	8001370 <HAL_GPIO_ReadPin>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	d0f7      	beq.n	80002a4 <DHT11_Read+0xd4>
        for (j = 0; j < 8; j++) {
 80002b4:	7bbb      	ldrb	r3, [r7, #14]
 80002b6:	3301      	adds	r3, #1
 80002b8:	73bb      	strb	r3, [r7, #14]
 80002ba:	7bbb      	ldrb	r3, [r7, #14]
 80002bc:	2b07      	cmp	r3, #7
 80002be:	d9c7      	bls.n	8000250 <DHT11_Read+0x80>
    for (i = 0; i < 5; i++) {
 80002c0:	7bfb      	ldrb	r3, [r7, #15]
 80002c2:	3301      	adds	r3, #1
 80002c4:	73fb      	strb	r3, [r7, #15]
 80002c6:	7bfb      	ldrb	r3, [r7, #15]
 80002c8:	2b04      	cmp	r3, #4
 80002ca:	d9be      	bls.n	800024a <DHT11_Read+0x7a>
            }
        }
    }

    // Checksum
    if (buffer[0] + buffer[1] + buffer[2] + buffer[3] != buffer[4]) return 1;
 80002cc:	7a3b      	ldrb	r3, [r7, #8]
 80002ce:	461a      	mov	r2, r3
 80002d0:	7a7b      	ldrb	r3, [r7, #9]
 80002d2:	4413      	add	r3, r2
 80002d4:	7aba      	ldrb	r2, [r7, #10]
 80002d6:	4413      	add	r3, r2
 80002d8:	7afa      	ldrb	r2, [r7, #11]
 80002da:	4413      	add	r3, r2
 80002dc:	7b3a      	ldrb	r2, [r7, #12]
 80002de:	4293      	cmp	r3, r2
 80002e0:	d001      	beq.n	80002e6 <DHT11_Read+0x116>
 80002e2:	2301      	movs	r3, #1
 80002e4:	e006      	b.n	80002f4 <DHT11_Read+0x124>

    data->humidity = buffer[0];
 80002e6:	7a3a      	ldrb	r2, [r7, #8]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	705a      	strb	r2, [r3, #1]
    data->temperature = buffer[2];
 80002ec:	7aba      	ldrb	r2, [r7, #10]
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	701a      	strb	r2, [r3, #0]

    return 0;
 80002f2:	2300      	movs	r3, #0
}
 80002f4:	4618      	mov	r0, r3
 80002f6:	3710      	adds	r7, #16
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40010c00 	.word	0x40010c00

08000300 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000300:	b480      	push	{r7}
 8000302:	b085      	sub	sp, #20
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	4a06      	ldr	r2, [pc, #24]	@ (8000328 <vApplicationGetIdleTaskMemory+0x28>)
 8000310:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	4a05      	ldr	r2, [pc, #20]	@ (800032c <vApplicationGetIdleTaskMemory+0x2c>)
 8000316:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2280      	movs	r2, #128	@ 0x80
 800031c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800031e:	bf00      	nop
 8000320:	3714      	adds	r7, #20
 8000322:	46bd      	mov	sp, r7
 8000324:	bc80      	pop	{r7}
 8000326:	4770      	bx	lr
 8000328:	2000008c 	.word	0x2000008c
 800032c:	200000e0 	.word	0x200000e0

08000330 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b086      	sub	sp, #24
 8000334:	af02      	add	r7, sp, #8
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	f023 030f 	bic.w	r3, r3, #15
 8000340:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	011b      	lsls	r3, r3, #4
 8000346:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000348:	7bfb      	ldrb	r3, [r7, #15]
 800034a:	f043 030c 	orr.w	r3, r3, #12
 800034e:	b2db      	uxtb	r3, r3
 8000350:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000352:	7bfb      	ldrb	r3, [r7, #15]
 8000354:	f043 0308 	orr.w	r3, r3, #8
 8000358:	b2db      	uxtb	r3, r3
 800035a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800035c:	7bbb      	ldrb	r3, [r7, #14]
 800035e:	f043 030c 	orr.w	r3, r3, #12
 8000362:	b2db      	uxtb	r3, r3
 8000364:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000366:	7bbb      	ldrb	r3, [r7, #14]
 8000368:	f043 0308 	orr.w	r3, r3, #8
 800036c:	b2db      	uxtb	r3, r3
 800036e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000370:	f107 0208 	add.w	r2, r7, #8
 8000374:	2364      	movs	r3, #100	@ 0x64
 8000376:	9300      	str	r3, [sp, #0]
 8000378:	2304      	movs	r3, #4
 800037a:	214e      	movs	r1, #78	@ 0x4e
 800037c:	4803      	ldr	r0, [pc, #12]	@ (800038c <lcd_send_cmd+0x5c>)
 800037e:	f001 f96b 	bl	8001658 <HAL_I2C_Master_Transmit>
}
 8000382:	bf00      	nop
 8000384:	3710      	adds	r7, #16
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	200002e0 	.word	0x200002e0

08000390 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b086      	sub	sp, #24
 8000394:	af02      	add	r7, sp, #8
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	f023 030f 	bic.w	r3, r3, #15
 80003a0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	011b      	lsls	r3, r3, #4
 80003a6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80003a8:	7bfb      	ldrb	r3, [r7, #15]
 80003aa:	f043 030d 	orr.w	r3, r3, #13
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80003b2:	7bfb      	ldrb	r3, [r7, #15]
 80003b4:	f043 0309 	orr.w	r3, r3, #9
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80003bc:	7bbb      	ldrb	r3, [r7, #14]
 80003be:	f043 030d 	orr.w	r3, r3, #13
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80003c6:	7bbb      	ldrb	r3, [r7, #14]
 80003c8:	f043 0309 	orr.w	r3, r3, #9
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80003d0:	f107 0208 	add.w	r2, r7, #8
 80003d4:	2364      	movs	r3, #100	@ 0x64
 80003d6:	9300      	str	r3, [sp, #0]
 80003d8:	2304      	movs	r3, #4
 80003da:	214e      	movs	r1, #78	@ 0x4e
 80003dc:	4803      	ldr	r0, [pc, #12]	@ (80003ec <lcd_send_data+0x5c>)
 80003de:	f001 f93b 	bl	8001658 <HAL_I2C_Master_Transmit>
}
 80003e2:	bf00      	nop
 80003e4:	3710      	adds	r7, #16
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	200002e0 	.word	0x200002e0

080003f0 <lcd_init>:

void lcd_init (void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 80003f4:	2033      	movs	r0, #51	@ 0x33
 80003f6:	f7ff ff9b 	bl	8000330 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 80003fa:	2032      	movs	r0, #50	@ 0x32
 80003fc:	f7ff ff98 	bl	8000330 <lcd_send_cmd>
	HAL_Delay(50);
 8000400:	2032      	movs	r0, #50	@ 0x32
 8000402:	f000 fd2d 	bl	8000e60 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000406:	2028      	movs	r0, #40	@ 0x28
 8000408:	f7ff ff92 	bl	8000330 <lcd_send_cmd>
	HAL_Delay(50);
 800040c:	2032      	movs	r0, #50	@ 0x32
 800040e:	f000 fd27 	bl	8000e60 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000412:	2001      	movs	r0, #1
 8000414:	f7ff ff8c 	bl	8000330 <lcd_send_cmd>
	HAL_Delay(50);
 8000418:	2032      	movs	r0, #50	@ 0x32
 800041a:	f000 fd21 	bl	8000e60 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800041e:	2006      	movs	r0, #6
 8000420:	f7ff ff86 	bl	8000330 <lcd_send_cmd>
	HAL_Delay(50);
 8000424:	2032      	movs	r0, #50	@ 0x32
 8000426:	f000 fd1b 	bl	8000e60 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 800042a:	200c      	movs	r0, #12
 800042c:	f7ff ff80 	bl	8000330 <lcd_send_cmd>
	HAL_Delay(50);
 8000430:	2032      	movs	r0, #50	@ 0x32
 8000432:	f000 fd15 	bl	8000e60 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000436:	2002      	movs	r0, #2
 8000438:	f7ff ff7a 	bl	8000330 <lcd_send_cmd>
	HAL_Delay(50);
 800043c:	2032      	movs	r0, #50	@ 0x32
 800043e:	f000 fd0f 	bl	8000e60 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000442:	2080      	movs	r0, #128	@ 0x80
 8000444:	f7ff ff74 	bl	8000330 <lcd_send_cmd>
}
 8000448:	bf00      	nop
 800044a:	bd80      	pop	{r7, pc}

0800044c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000454:	e006      	b.n	8000464 <lcd_send_string+0x18>
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	1c5a      	adds	r2, r3, #1
 800045a:	607a      	str	r2, [r7, #4]
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	4618      	mov	r0, r3
 8000460:	f7ff ff96 	bl	8000390 <lcd_send_data>
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d1f4      	bne.n	8000456 <lcd_send_string+0xa>
}
 800046c:	bf00      	nop
 800046e:	bf00      	nop
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}

08000476 <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 8000476:	b580      	push	{r7, lr}
 8000478:	b084      	sub	sp, #16
 800047a:	af00      	add	r7, sp, #0
 800047c:	6078      	str	r0, [r7, #4]
 800047e:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	2b01      	cmp	r3, #1
 8000484:	d108      	bne.n	8000498 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	b2da      	uxtb	r2, r3
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	b2db      	uxtb	r3, r3
 800048e:	4413      	add	r3, r2
 8000490:	b2db      	uxtb	r3, r3
 8000492:	337f      	adds	r3, #127	@ 0x7f
 8000494:	73fb      	strb	r3, [r7, #15]
 8000496:	e008      	b.n	80004aa <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	b2db      	uxtb	r3, r3
 800049c:	3340      	adds	r3, #64	@ 0x40
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	b25b      	sxtb	r3, r3
 80004a2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80004a6:	b25b      	sxtb	r3, r3
 80004a8:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 80004aa:	7bfb      	ldrb	r3, [r7, #15]
 80004ac:	4618      	mov	r0, r3
 80004ae:	f7ff ff3f 	bl	8000330 <lcd_send_cmd>
}
 80004b2:	bf00      	nop
 80004b4:	3710      	adds	r7, #16
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
	...

080004bc <lcd_send_number>:

void lcd_send_number(int number)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	if(number <= 9)
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2b09      	cmp	r3, #9
 80004c8:	dc07      	bgt.n	80004da <lcd_send_number+0x1e>
	{
		lcd_send_data(number + 0x30);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	3330      	adds	r3, #48	@ 0x30
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	4618      	mov	r0, r3
 80004d4:	f7ff ff5c 	bl	8000390 <lcd_send_data>
	else if(number > 9 && number < 100)
	{
		lcd_send_data(number/10 + 0x30);
		lcd_send_data(number%10 + 0x30);
	}
}
 80004d8:	e024      	b.n	8000524 <lcd_send_number+0x68>
	else if(number > 9 && number < 100)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2b09      	cmp	r3, #9
 80004de:	dd21      	ble.n	8000524 <lcd_send_number+0x68>
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2b63      	cmp	r3, #99	@ 0x63
 80004e4:	dc1e      	bgt.n	8000524 <lcd_send_number+0x68>
		lcd_send_data(number/10 + 0x30);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4a10      	ldr	r2, [pc, #64]	@ (800052c <lcd_send_number+0x70>)
 80004ea:	fb82 1203 	smull	r1, r2, r2, r3
 80004ee:	1092      	asrs	r2, r2, #2
 80004f0:	17db      	asrs	r3, r3, #31
 80004f2:	1ad3      	subs	r3, r2, r3
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	3330      	adds	r3, #48	@ 0x30
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff ff48 	bl	8000390 <lcd_send_data>
		lcd_send_data(number%10 + 0x30);
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	4b0a      	ldr	r3, [pc, #40]	@ (800052c <lcd_send_number+0x70>)
 8000504:	fb83 1302 	smull	r1, r3, r3, r2
 8000508:	1099      	asrs	r1, r3, #2
 800050a:	17d3      	asrs	r3, r2, #31
 800050c:	1ac9      	subs	r1, r1, r3
 800050e:	460b      	mov	r3, r1
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	440b      	add	r3, r1
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	1ad1      	subs	r1, r2, r3
 8000518:	b2cb      	uxtb	r3, r1
 800051a:	3330      	adds	r3, #48	@ 0x30
 800051c:	b2db      	uxtb	r3, r3
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff ff36 	bl	8000390 <lcd_send_data>
}
 8000524:	bf00      	nop
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	66666667 	.word	0x66666667

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b5b0      	push	{r4, r5, r7, lr}
 8000532:	b096      	sub	sp, #88	@ 0x58
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f000 fc61 	bl	8000dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f847 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053e:	f000 f929 	bl	8000794 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000542:	f000 f87f 	bl	8000644 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000546:	f000 f8ab 	bl	80006a0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800054a:	f000 f8f9 	bl	8000740 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800054e:	f7ff ff4f 	bl	80003f0 <lcd_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000552:	4b1a      	ldr	r3, [pc, #104]	@ (80005bc <main+0x8c>)
 8000554:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000558:	461d      	mov	r5, r3
 800055a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800055e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000562:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000566:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800056a:	2100      	movs	r1, #0
 800056c:	4618      	mov	r0, r3
 800056e:	f002 fe3f 	bl	80031f0 <osThreadCreate>
 8000572:	4603      	mov	r3, r0
 8000574:	4a12      	ldr	r2, [pc, #72]	@ (80005c0 <main+0x90>)
 8000576:	6013      	str	r3, [r2, #0]

  osThreadDef(DisplayLCD, Task_DisplayLCD, osPriorityNormal, 0, 128);
 8000578:	4b12      	ldr	r3, [pc, #72]	@ (80005c4 <main+0x94>)
 800057a:	f107 0420 	add.w	r4, r7, #32
 800057e:	461d      	mov	r5, r3
 8000580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000584:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000588:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate(osThread(DisplayLCD), NULL);
 800058c:	f107 0320 	add.w	r3, r7, #32
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f002 fe2c 	bl	80031f0 <osThreadCreate>


  osThreadDef(TransmitUART, Task_TransmitUART, osPriorityNormal, 0, 128);
 8000598:	4b0b      	ldr	r3, [pc, #44]	@ (80005c8 <main+0x98>)
 800059a:	1d3c      	adds	r4, r7, #4
 800059c:	461d      	mov	r5, r3
 800059e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate(osThread(TransmitUART), NULL);
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 fe1e 	bl	80031f0 <osThreadCreate>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005b4:	f002 fe15 	bl	80031e2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <main+0x88>
 80005bc:	080058a8 	.word	0x080058a8
 80005c0:	200003c4 	.word	0x200003c4
 80005c4:	080058d0 	.word	0x080058d0
 80005c8:	080058fc 	.word	0x080058fc

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b090      	sub	sp, #64	@ 0x40
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0318 	add.w	r3, r7, #24
 80005d6:	2228      	movs	r2, #40	@ 0x28
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f004 fa0e 	bl	80049fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ee:	2302      	movs	r3, #2
 80005f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f2:	2301      	movs	r3, #1
 80005f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f6:	2310      	movs	r3, #16
 80005f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005fa:	2300      	movs	r3, #0
 80005fc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fe:	f107 0318 	add.w	r3, r7, #24
 8000602:	4618      	mov	r0, r3
 8000604:	f001 fb80 	bl	8001d08 <HAL_RCC_OscConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800060e:	f000 f9a1 	bl	8000954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	230f      	movs	r3, #15
 8000614:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f001 fdee 	bl	800220c <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000636:	f000 f98d 	bl	8000954 <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	3740      	adds	r7, #64	@ 0x40
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000648:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <MX_I2C1_Init+0x50>)
 800064a:	4a13      	ldr	r2, [pc, #76]	@ (8000698 <MX_I2C1_Init+0x54>)
 800064c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800064e:	4b11      	ldr	r3, [pc, #68]	@ (8000694 <MX_I2C1_Init+0x50>)
 8000650:	4a12      	ldr	r2, [pc, #72]	@ (800069c <MX_I2C1_Init+0x58>)
 8000652:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000654:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <MX_I2C1_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800065a:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <MX_I2C1_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <MX_I2C1_Init+0x50>)
 8000662:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000666:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000668:	4b0a      	ldr	r3, [pc, #40]	@ (8000694 <MX_I2C1_Init+0x50>)
 800066a:	2200      	movs	r2, #0
 800066c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800066e:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <MX_I2C1_Init+0x50>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000674:	4b07      	ldr	r3, [pc, #28]	@ (8000694 <MX_I2C1_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067a:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <MX_I2C1_Init+0x50>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	@ (8000694 <MX_I2C1_Init+0x50>)
 8000682:	f000 fea5 	bl	80013d0 <HAL_I2C_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800068c:	f000 f962 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	200002e0 	.word	0x200002e0
 8000698:	40005400 	.word	0x40005400
 800069c:	000186a0 	.word	0x000186a0

080006a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006a6:	f107 0308 	add.w	r3, r7, #8
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b4:	463b      	mov	r3, r7
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <MX_TIM1_Init+0x98>)
 80006be:	4a1f      	ldr	r2, [pc, #124]	@ (800073c <MX_TIM1_Init+0x9c>)
 80006c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000738 <MX_TIM1_Init+0x98>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <MX_TIM1_Init+0x98>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000738 <MX_TIM1_Init+0x98>)
 80006d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d6:	4b18      	ldr	r3, [pc, #96]	@ (8000738 <MX_TIM1_Init+0x98>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006dc:	4b16      	ldr	r3, [pc, #88]	@ (8000738 <MX_TIM1_Init+0x98>)
 80006de:	2200      	movs	r2, #0
 80006e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e2:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <MX_TIM1_Init+0x98>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006e8:	4813      	ldr	r0, [pc, #76]	@ (8000738 <MX_TIM1_Init+0x98>)
 80006ea:	f001 ff4d 	bl	8002588 <HAL_TIM_Base_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80006f4:	f000 f92e 	bl	8000954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	4619      	mov	r1, r3
 8000704:	480c      	ldr	r0, [pc, #48]	@ (8000738 <MX_TIM1_Init+0x98>)
 8000706:	f002 f8d1 	bl	80028ac <HAL_TIM_ConfigClockSource>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000710:	f000 f920 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000714:	2300      	movs	r3, #0
 8000716:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800071c:	463b      	mov	r3, r7
 800071e:	4619      	mov	r1, r3
 8000720:	4805      	ldr	r0, [pc, #20]	@ (8000738 <MX_TIM1_Init+0x98>)
 8000722:	f002 fab3 	bl	8002c8c <HAL_TIMEx_MasterConfigSynchronization>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800072c:	f000 f912 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	3718      	adds	r7, #24
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000334 	.word	0x20000334
 800073c:	40012c00 	.word	0x40012c00

08000740 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000744:	4b11      	ldr	r3, [pc, #68]	@ (800078c <MX_USART1_UART_Init+0x4c>)
 8000746:	4a12      	ldr	r2, [pc, #72]	@ (8000790 <MX_USART1_UART_Init+0x50>)
 8000748:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800074a:	4b10      	ldr	r3, [pc, #64]	@ (800078c <MX_USART1_UART_Init+0x4c>)
 800074c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000750:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <MX_USART1_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <MX_USART1_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <MX_USART1_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_USART1_UART_Init+0x4c>)
 8000766:	220c      	movs	r2, #12
 8000768:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b08      	ldr	r3, [pc, #32]	@ (800078c <MX_USART1_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <MX_USART1_UART_Init+0x4c>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_USART1_UART_Init+0x4c>)
 8000778:	f002 faf8 	bl	8002d6c <HAL_UART_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000782:	f000 f8e7 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	2000037c 	.word	0x2000037c
 8000790:	40013800 	.word	0x40013800

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a8:	4b18      	ldr	r3, [pc, #96]	@ (800080c <MX_GPIO_Init+0x78>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a17      	ldr	r2, [pc, #92]	@ (800080c <MX_GPIO_Init+0x78>)
 80007ae:	f043 0304 	orr.w	r3, r3, #4
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	4b15      	ldr	r3, [pc, #84]	@ (800080c <MX_GPIO_Init+0x78>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f003 0304 	and.w	r3, r3, #4
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c0:	4b12      	ldr	r3, [pc, #72]	@ (800080c <MX_GPIO_Init+0x78>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	4a11      	ldr	r2, [pc, #68]	@ (800080c <MX_GPIO_Init+0x78>)
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	6193      	str	r3, [r2, #24]
 80007cc:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <MX_GPIO_Init+0x78>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	f003 0308 	and.w	r3, r3, #8
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007de:	480c      	ldr	r0, [pc, #48]	@ (8000810 <MX_GPIO_Init+0x7c>)
 80007e0:	f000 fddd 	bl	800139e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2302      	movs	r3, #2
 80007f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	4619      	mov	r1, r3
 80007fc:	4804      	ldr	r0, [pc, #16]	@ (8000810 <MX_GPIO_Init+0x7c>)
 80007fe:	f000 fc33 	bl	8001068 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000802:	bf00      	nop
 8000804:	3718      	adds	r7, #24
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000
 8000810:	40010c00 	.word	0x40010c00

08000814 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (DHT11_Read(&dht11_data) == 0) {
 800081c:	480b      	ldr	r0, [pc, #44]	@ (800084c <StartDefaultTask+0x38>)
 800081e:	f7ff fcd7 	bl	80001d0 <DHT11_Read>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d109      	bne.n	800083c <StartDefaultTask+0x28>
	              printf("DHT11 Read: Temp=%d, Humidity=%d\n", dht11_data.temperature, dht11_data.humidity);
 8000828:	4b08      	ldr	r3, [pc, #32]	@ (800084c <StartDefaultTask+0x38>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	4619      	mov	r1, r3
 800082e:	4b07      	ldr	r3, [pc, #28]	@ (800084c <StartDefaultTask+0x38>)
 8000830:	785b      	ldrb	r3, [r3, #1]
 8000832:	461a      	mov	r2, r3
 8000834:	4806      	ldr	r0, [pc, #24]	@ (8000850 <StartDefaultTask+0x3c>)
 8000836:	f003 ff79 	bl	800472c <iprintf>
 800083a:	e002      	b.n	8000842 <StartDefaultTask+0x2e>
	          } else {
	              printf("DHT11 Error\n");
 800083c:	4805      	ldr	r0, [pc, #20]	@ (8000854 <StartDefaultTask+0x40>)
 800083e:	f003 ffdd 	bl	80047fc <puts>
	          }
	          osDelay(2000); // Delay 2s
 8000842:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000846:	f002 fd1f 	bl	8003288 <osDelay>
	  if (DHT11_Read(&dht11_data) == 0) {
 800084a:	e7e7      	b.n	800081c <StartDefaultTask+0x8>
 800084c:	200003c8 	.word	0x200003c8
 8000850:	08005918 	.word	0x08005918
 8000854:	0800593c 	.word	0x0800593c

08000858 <Task_DisplayLCD>:
  }
  /* USER CODE END 5 */
}

void Task_DisplayLCD(void const *argument) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	lcd_goto_XY(1,0);
 8000860:	2100      	movs	r1, #0
 8000862:	2001      	movs	r0, #1
 8000864:	f7ff fe07 	bl	8000476 <lcd_goto_XY>
		lcd_send_string("Temperature: ");
 8000868:	4815      	ldr	r0, [pc, #84]	@ (80008c0 <Task_DisplayLCD+0x68>)
 800086a:	f7ff fdef 	bl	800044c <lcd_send_string>
		lcd_send_number(TempC);
 800086e:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <Task_DisplayLCD+0x6c>)
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fe22 	bl	80004bc <lcd_send_number>
		lcd_goto_XY(2,0);
 8000878:	2100      	movs	r1, #0
 800087a:	2002      	movs	r0, #2
 800087c:	f7ff fdfb 	bl	8000476 <lcd_goto_XY>
		lcd_send_string("Humidity: ");
 8000880:	4811      	ldr	r0, [pc, #68]	@ (80008c8 <Task_DisplayLCD+0x70>)
 8000882:	f7ff fde3 	bl	800044c <lcd_send_string>
		lcd_send_number(Humidity);
 8000886:	4b11      	ldr	r3, [pc, #68]	@ (80008cc <Task_DisplayLCD+0x74>)
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fe16 	bl	80004bc <lcd_send_number>
		printf("Temperature: %d\n\r", TempC);
 8000890:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <Task_DisplayLCD+0x6c>)
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	480e      	ldr	r0, [pc, #56]	@ (80008d0 <Task_DisplayLCD+0x78>)
 8000898:	f003 ff48 	bl	800472c <iprintf>
		printf("Humidity: %d\n\r", Humidity);
 800089c:	4b0b      	ldr	r3, [pc, #44]	@ (80008cc <Task_DisplayLCD+0x74>)
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	4619      	mov	r1, r3
 80008a2:	480c      	ldr	r0, [pc, #48]	@ (80008d4 <Task_DisplayLCD+0x7c>)
 80008a4:	f003 ff42 	bl	800472c <iprintf>

		HAL_Delay(Tp);
 80008a8:	4b0b      	ldr	r3, [pc, #44]	@ (80008d8 <Task_DisplayLCD+0x80>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 fad7 	bl	8000e60 <HAL_Delay>
		h_flag = 0;
 80008b2:	4b0a      	ldr	r3, [pc, #40]	@ (80008dc <Task_DisplayLCD+0x84>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
    }
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	08005948 	.word	0x08005948
 80008c4:	200003ca 	.word	0x200003ca
 80008c8:	08005958 	.word	0x08005958
 80008cc:	200003cc 	.word	0x200003cc
 80008d0:	08005964 	.word	0x08005964
 80008d4:	08005978 	.word	0x08005978
 80008d8:	20000000 	.word	0x20000000
 80008dc:	200003ce 	.word	0x200003ce

080008e0 <Task_TransmitUART>:

void Task_TransmitUART(void const *argument) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	@ 0x28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
    char uart_buffer[32];
    for (;;) {
        sprintf(uart_buffer, "Temp=%dC, Humidity=%d%%\n", dht11_data.temperature, dht11_data.humidity);
 80008e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <Task_TransmitUART+0x44>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000924 <Task_TransmitUART+0x44>)
 80008f0:	785b      	ldrb	r3, [r3, #1]
 80008f2:	f107 0008 	add.w	r0, r7, #8
 80008f6:	490c      	ldr	r1, [pc, #48]	@ (8000928 <Task_TransmitUART+0x48>)
 80008f8:	f003 ff88 	bl	800480c <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80008fc:	f107 0308 	add.w	r3, r7, #8
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff fc25 	bl	8000150 <strlen>
 8000906:	4603      	mov	r3, r0
 8000908:	b29a      	uxth	r2, r3
 800090a:	f107 0108 	add.w	r1, r7, #8
 800090e:	f04f 33ff 	mov.w	r3, #4294967295
 8000912:	4806      	ldr	r0, [pc, #24]	@ (800092c <Task_TransmitUART+0x4c>)
 8000914:	f002 fa7a 	bl	8002e0c <HAL_UART_Transmit>
        osDelay(2000); // Delay 2s
 8000918:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800091c:	f002 fcb4 	bl	8003288 <osDelay>
        sprintf(uart_buffer, "Temp=%dC, Humidity=%d%%\n", dht11_data.temperature, dht11_data.humidity);
 8000920:	bf00      	nop
 8000922:	e7e1      	b.n	80008e8 <Task_TransmitUART+0x8>
 8000924:	200003c8 	.word	0x200003c8
 8000928:	08005988 	.word	0x08005988
 800092c:	2000037c 	.word	0x2000037c

08000930 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a04      	ldr	r2, [pc, #16]	@ (8000950 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d101      	bne.n	8000946 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000942:	f000 fa71 	bl	8000e28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40000800 	.word	0x40000800

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <Error_Handler+0x8>

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000966:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <HAL_MspInit+0x68>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	4a17      	ldr	r2, [pc, #92]	@ (80009c8 <HAL_MspInit+0x68>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6193      	str	r3, [r2, #24]
 8000972:	4b15      	ldr	r3, [pc, #84]	@ (80009c8 <HAL_MspInit+0x68>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <HAL_MspInit+0x68>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	4a11      	ldr	r2, [pc, #68]	@ (80009c8 <HAL_MspInit+0x68>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000988:	61d3      	str	r3, [r2, #28]
 800098a:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <HAL_MspInit+0x68>)
 800098c:	69db      	ldr	r3, [r3, #28]
 800098e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	210f      	movs	r1, #15
 800099a:	f06f 0001 	mvn.w	r0, #1
 800099e:	f000 fb38 	bl	8001012 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009a2:	4b0a      	ldr	r3, [pc, #40]	@ (80009cc <HAL_MspInit+0x6c>)
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	4a04      	ldr	r2, [pc, #16]	@ (80009cc <HAL_MspInit+0x6c>)
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40010000 	.word	0x40010000

080009d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a15      	ldr	r2, [pc, #84]	@ (8000a40 <HAL_I2C_MspInit+0x70>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d123      	bne.n	8000a38 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f0:	4b14      	ldr	r3, [pc, #80]	@ (8000a44 <HAL_I2C_MspInit+0x74>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	4a13      	ldr	r2, [pc, #76]	@ (8000a44 <HAL_I2C_MspInit+0x74>)
 80009f6:	f043 0308 	orr.w	r3, r3, #8
 80009fa:	6193      	str	r3, [r2, #24]
 80009fc:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <HAL_I2C_MspInit+0x74>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	f003 0308 	and.w	r3, r3, #8
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a08:	23c0      	movs	r3, #192	@ 0xc0
 8000a0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a0c:	2312      	movs	r3, #18
 8000a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a10:	2303      	movs	r3, #3
 8000a12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	4619      	mov	r1, r3
 8000a1a:	480b      	ldr	r0, [pc, #44]	@ (8000a48 <HAL_I2C_MspInit+0x78>)
 8000a1c:	f000 fb24 	bl	8001068 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a20:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <HAL_I2C_MspInit+0x74>)
 8000a22:	69db      	ldr	r3, [r3, #28]
 8000a24:	4a07      	ldr	r2, [pc, #28]	@ (8000a44 <HAL_I2C_MspInit+0x74>)
 8000a26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a2a:	61d3      	str	r3, [r2, #28]
 8000a2c:	4b05      	ldr	r3, [pc, #20]	@ (8000a44 <HAL_I2C_MspInit+0x74>)
 8000a2e:	69db      	ldr	r3, [r3, #28]
 8000a30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a38:	bf00      	nop
 8000a3a:	3720      	adds	r7, #32
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40005400 	.word	0x40005400
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40010c00 	.word	0x40010c00

08000a4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a09      	ldr	r2, [pc, #36]	@ (8000a80 <HAL_TIM_Base_MspInit+0x34>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d10b      	bne.n	8000a76 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a5e:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <HAL_TIM_Base_MspInit+0x38>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	4a08      	ldr	r2, [pc, #32]	@ (8000a84 <HAL_TIM_Base_MspInit+0x38>)
 8000a64:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a68:	6193      	str	r3, [r2, #24]
 8000a6a:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <HAL_TIM_Base_MspInit+0x38>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000a76:	bf00      	nop
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	40012c00 	.word	0x40012c00
 8000a84:	40021000 	.word	0x40021000

08000a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a1c      	ldr	r2, [pc, #112]	@ (8000b14 <HAL_UART_MspInit+0x8c>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d131      	bne.n	8000b0c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b18 <HAL_UART_MspInit+0x90>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a1a      	ldr	r2, [pc, #104]	@ (8000b18 <HAL_UART_MspInit+0x90>)
 8000aae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <HAL_UART_MspInit+0x90>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac0:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <HAL_UART_MspInit+0x90>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	4a14      	ldr	r2, [pc, #80]	@ (8000b18 <HAL_UART_MspInit+0x90>)
 8000ac6:	f043 0304 	orr.w	r3, r3, #4
 8000aca:	6193      	str	r3, [r2, #24]
 8000acc:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <HAL_UART_MspInit+0x90>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ad8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000adc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	f107 0310 	add.w	r3, r7, #16
 8000aea:	4619      	mov	r1, r3
 8000aec:	480b      	ldr	r0, [pc, #44]	@ (8000b1c <HAL_UART_MspInit+0x94>)
 8000aee:	f000 fabb 	bl	8001068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000af2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000af6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	f107 0310 	add.w	r3, r7, #16
 8000b04:	4619      	mov	r1, r3
 8000b06:	4805      	ldr	r0, [pc, #20]	@ (8000b1c <HAL_UART_MspInit+0x94>)
 8000b08:	f000 faae 	bl	8001068 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b0c:	bf00      	nop
 8000b0e:	3720      	adds	r7, #32
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40013800 	.word	0x40013800
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010800 	.word	0x40010800

08000b20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08e      	sub	sp, #56	@ 0x38
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000b30:	2300      	movs	r3, #0
 8000b32:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000b36:	4b34      	ldr	r3, [pc, #208]	@ (8000c08 <HAL_InitTick+0xe8>)
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	4a33      	ldr	r2, [pc, #204]	@ (8000c08 <HAL_InitTick+0xe8>)
 8000b3c:	f043 0304 	orr.w	r3, r3, #4
 8000b40:	61d3      	str	r3, [r2, #28]
 8000b42:	4b31      	ldr	r3, [pc, #196]	@ (8000c08 <HAL_InitTick+0xe8>)
 8000b44:	69db      	ldr	r3, [r3, #28]
 8000b46:	f003 0304 	and.w	r3, r3, #4
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b4e:	f107 0210 	add.w	r2, r7, #16
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4611      	mov	r1, r2
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f001 fcc7 	bl	80024ec <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b5e:	6a3b      	ldr	r3, [r7, #32]
 8000b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d103      	bne.n	8000b70 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b68:	f001 fc98 	bl	800249c <HAL_RCC_GetPCLK1Freq>
 8000b6c:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b6e:	e004      	b.n	8000b7a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b70:	f001 fc94 	bl	800249c <HAL_RCC_GetPCLK1Freq>
 8000b74:	4603      	mov	r3, r0
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b7c:	4a23      	ldr	r2, [pc, #140]	@ (8000c0c <HAL_InitTick+0xec>)
 8000b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b82:	0c9b      	lsrs	r3, r3, #18
 8000b84:	3b01      	subs	r3, #1
 8000b86:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000b88:	4b21      	ldr	r3, [pc, #132]	@ (8000c10 <HAL_InitTick+0xf0>)
 8000b8a:	4a22      	ldr	r2, [pc, #136]	@ (8000c14 <HAL_InitTick+0xf4>)
 8000b8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000b8e:	4b20      	ldr	r3, [pc, #128]	@ (8000c10 <HAL_InitTick+0xf0>)
 8000b90:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b94:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000b96:	4a1e      	ldr	r2, [pc, #120]	@ (8000c10 <HAL_InitTick+0xf0>)
 8000b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b9a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c10 <HAL_InitTick+0xf0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c10 <HAL_InitTick+0xf0>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba8:	4b19      	ldr	r3, [pc, #100]	@ (8000c10 <HAL_InitTick+0xf0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000bae:	4818      	ldr	r0, [pc, #96]	@ (8000c10 <HAL_InitTick+0xf0>)
 8000bb0:	f001 fcea 	bl	8002588 <HAL_TIM_Base_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000bba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d11b      	bne.n	8000bfa <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000bc2:	4813      	ldr	r0, [pc, #76]	@ (8000c10 <HAL_InitTick+0xf0>)
 8000bc4:	f001 fd30 	bl	8002628 <HAL_TIM_Base_Start_IT>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d111      	bne.n	8000bfa <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000bd6:	201e      	movs	r0, #30
 8000bd8:	f000 fa37 	bl	800104a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b0f      	cmp	r3, #15
 8000be0:	d808      	bhi.n	8000bf4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000be2:	2200      	movs	r2, #0
 8000be4:	6879      	ldr	r1, [r7, #4]
 8000be6:	201e      	movs	r0, #30
 8000be8:	f000 fa13 	bl	8001012 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bec:	4a0a      	ldr	r2, [pc, #40]	@ (8000c18 <HAL_InitTick+0xf8>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6013      	str	r3, [r2, #0]
 8000bf2:	e002      	b.n	8000bfa <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bfa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3738      	adds	r7, #56	@ 0x38
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	431bde83 	.word	0x431bde83
 8000c10:	200003d0 	.word	0x200003d0
 8000c14:	40000800 	.word	0x40000800
 8000c18:	20000008 	.word	0x20000008

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <NMI_Handler+0x4>

08000c24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <MemManage_Handler+0x4>

08000c34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c54:	4802      	ldr	r0, [pc, #8]	@ (8000c60 <TIM4_IRQHandler+0x10>)
 8000c56:	f001 fd39 	bl	80026cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200003d0 	.word	0x200003d0

08000c64 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	e00a      	b.n	8000c8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c76:	f3af 8000 	nop.w
 8000c7a:	4601      	mov	r1, r0
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	1c5a      	adds	r2, r3, #1
 8000c80:	60ba      	str	r2, [r7, #8]
 8000c82:	b2ca      	uxtb	r2, r1
 8000c84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	697a      	ldr	r2, [r7, #20]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	dbf0      	blt.n	8000c76 <_read+0x12>
  }

  return len;
 8000c94:	687b      	ldr	r3, [r7, #4]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b086      	sub	sp, #24
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	60f8      	str	r0, [r7, #12]
 8000ca6:	60b9      	str	r1, [r7, #8]
 8000ca8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	e009      	b.n	8000cc4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	1c5a      	adds	r2, r3, #1
 8000cb4:	60ba      	str	r2, [r7, #8]
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	697a      	ldr	r2, [r7, #20]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	dbf1      	blt.n	8000cb0 <_write+0x12>
  }
  return len;
 8000ccc:	687b      	ldr	r3, [r7, #4]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <_close>:

int _close(int file)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr

08000cec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cfc:	605a      	str	r2, [r3, #4]
  return 0;
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr

08000d0a <_isatty>:

int _isatty(int file)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d12:	2301      	movs	r3, #1
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr

08000d1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b085      	sub	sp, #20
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	60f8      	str	r0, [r7, #12]
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d2a:	2300      	movs	r3, #0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
	...

08000d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d40:	4a14      	ldr	r2, [pc, #80]	@ (8000d94 <_sbrk+0x5c>)
 8000d42:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <_sbrk+0x60>)
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d4c:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d102      	bne.n	8000d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d54:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <_sbrk+0x64>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	@ (8000da0 <_sbrk+0x68>)
 8000d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d207      	bcs.n	8000d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d68:	f003 fe96 	bl	8004a98 <__errno>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	220c      	movs	r2, #12
 8000d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
 8000d76:	e009      	b.n	8000d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d78:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7e:	4b07      	ldr	r3, [pc, #28]	@ (8000d9c <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	4a05      	ldr	r2, [pc, #20]	@ (8000d9c <_sbrk+0x64>)
 8000d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20005000 	.word	0x20005000
 8000d98:	00000400 	.word	0x00000400
 8000d9c:	20000418 	.word	0x20000418
 8000da0:	200012c0 	.word	0x200012c0

08000da4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000db0:	f7ff fff8 	bl	8000da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db4:	480b      	ldr	r0, [pc, #44]	@ (8000de4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000db6:	490c      	ldr	r1, [pc, #48]	@ (8000de8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000db8:	4a0c      	ldr	r2, [pc, #48]	@ (8000dec <LoopFillZerobss+0x16>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dca:	4a09      	ldr	r2, [pc, #36]	@ (8000df0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000dcc:	4c09      	ldr	r4, [pc, #36]	@ (8000df4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dda:	f003 fe63 	bl	8004aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dde:	f7ff fba7 	bl	8000530 <main>
  bx lr
 8000de2:	4770      	bx	lr
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000dec:	08005a1c 	.word	0x08005a1c
  ldr r2, =_sbss
 8000df0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000df4:	200012c0 	.word	0x200012c0

08000df8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC1_2_IRQHandler>
	...

08000dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e00:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <HAL_Init+0x28>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a07      	ldr	r2, [pc, #28]	@ (8000e24 <HAL_Init+0x28>)
 8000e06:	f043 0310 	orr.w	r3, r3, #16
 8000e0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f000 f8f5 	bl	8000ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e12:	200f      	movs	r0, #15
 8000e14:	f7ff fe84 	bl	8000b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e18:	f7ff fda2 	bl	8000960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40022000 	.word	0x40022000

08000e28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e2c:	4b05      	ldr	r3, [pc, #20]	@ (8000e44 <HAL_IncTick+0x1c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b05      	ldr	r3, [pc, #20]	@ (8000e48 <HAL_IncTick+0x20>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a03      	ldr	r2, [pc, #12]	@ (8000e48 <HAL_IncTick+0x20>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	2000000c 	.word	0x2000000c
 8000e48:	2000041c 	.word	0x2000041c

08000e4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e50:	4b02      	ldr	r3, [pc, #8]	@ (8000e5c <HAL_GetTick+0x10>)
 8000e52:	681b      	ldr	r3, [r3, #0]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	2000041c 	.word	0x2000041c

08000e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff fff0 	bl	8000e4c <HAL_GetTick>
 8000e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e78:	d005      	beq.n	8000e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <HAL_Delay+0x44>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4413      	add	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e86:	bf00      	nop
 8000e88:	f7ff ffe0 	bl	8000e4c <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d8f7      	bhi.n	8000e88 <HAL_Delay+0x28>
  {
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	2000000c 	.word	0x2000000c

08000ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eda:	4a04      	ldr	r2, [pc, #16]	@ (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	60d3      	str	r3, [r2, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	@ (8000f08 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0307 	and.w	r3, r3, #7
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	db0b      	blt.n	8000f36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	f003 021f 	and.w	r2, r3, #31
 8000f24:	4906      	ldr	r1, [pc, #24]	@ (8000f40 <__NVIC_EnableIRQ+0x34>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	095b      	lsrs	r3, r3, #5
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	e000e100 	.word	0xe000e100

08000f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	db0a      	blt.n	8000f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	490c      	ldr	r1, [pc, #48]	@ (8000f90 <__NVIC_SetPriority+0x4c>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	0112      	lsls	r2, r2, #4
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	440b      	add	r3, r1
 8000f68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f6c:	e00a      	b.n	8000f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4908      	ldr	r1, [pc, #32]	@ (8000f94 <__NVIC_SetPriority+0x50>)
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	f003 030f 	and.w	r3, r3, #15
 8000f7a:	3b04      	subs	r3, #4
 8000f7c:	0112      	lsls	r2, r2, #4
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	440b      	add	r3, r1
 8000f82:	761a      	strb	r2, [r3, #24]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000e100 	.word	0xe000e100
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	@ 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f1c3 0307 	rsb	r3, r3, #7
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	bf28      	it	cs
 8000fb6:	2304      	movcs	r3, #4
 8000fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	2b06      	cmp	r3, #6
 8000fc0:	d902      	bls.n	8000fc8 <NVIC_EncodePriority+0x30>
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3b03      	subs	r3, #3
 8000fc6:	e000      	b.n	8000fca <NVIC_EncodePriority+0x32>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	401a      	ands	r2, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	43d9      	mvns	r1, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	4313      	orrs	r3, r2
         );
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3724      	adds	r7, #36	@ 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ff4f 	bl	8000ea8 <__NVIC_SetPriorityGrouping>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
 800101e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001024:	f7ff ff64 	bl	8000ef0 <__NVIC_GetPriorityGrouping>
 8001028:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	68b9      	ldr	r1, [r7, #8]
 800102e:	6978      	ldr	r0, [r7, #20]
 8001030:	f7ff ffb2 	bl	8000f98 <NVIC_EncodePriority>
 8001034:	4602      	mov	r2, r0
 8001036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff81 	bl	8000f44 <__NVIC_SetPriority>
}
 8001042:	bf00      	nop
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff57 	bl	8000f0c <__NVIC_EnableIRQ>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001068:	b480      	push	{r7}
 800106a:	b08b      	sub	sp, #44	@ 0x2c
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001076:	2300      	movs	r3, #0
 8001078:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800107a:	e169      	b.n	8001350 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800107c:	2201      	movs	r2, #1
 800107e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	69fa      	ldr	r2, [r7, #28]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	429a      	cmp	r2, r3
 8001096:	f040 8158 	bne.w	800134a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	4a9a      	ldr	r2, [pc, #616]	@ (8001308 <HAL_GPIO_Init+0x2a0>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d05e      	beq.n	8001162 <HAL_GPIO_Init+0xfa>
 80010a4:	4a98      	ldr	r2, [pc, #608]	@ (8001308 <HAL_GPIO_Init+0x2a0>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d875      	bhi.n	8001196 <HAL_GPIO_Init+0x12e>
 80010aa:	4a98      	ldr	r2, [pc, #608]	@ (800130c <HAL_GPIO_Init+0x2a4>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d058      	beq.n	8001162 <HAL_GPIO_Init+0xfa>
 80010b0:	4a96      	ldr	r2, [pc, #600]	@ (800130c <HAL_GPIO_Init+0x2a4>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d86f      	bhi.n	8001196 <HAL_GPIO_Init+0x12e>
 80010b6:	4a96      	ldr	r2, [pc, #600]	@ (8001310 <HAL_GPIO_Init+0x2a8>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d052      	beq.n	8001162 <HAL_GPIO_Init+0xfa>
 80010bc:	4a94      	ldr	r2, [pc, #592]	@ (8001310 <HAL_GPIO_Init+0x2a8>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d869      	bhi.n	8001196 <HAL_GPIO_Init+0x12e>
 80010c2:	4a94      	ldr	r2, [pc, #592]	@ (8001314 <HAL_GPIO_Init+0x2ac>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d04c      	beq.n	8001162 <HAL_GPIO_Init+0xfa>
 80010c8:	4a92      	ldr	r2, [pc, #584]	@ (8001314 <HAL_GPIO_Init+0x2ac>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d863      	bhi.n	8001196 <HAL_GPIO_Init+0x12e>
 80010ce:	4a92      	ldr	r2, [pc, #584]	@ (8001318 <HAL_GPIO_Init+0x2b0>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d046      	beq.n	8001162 <HAL_GPIO_Init+0xfa>
 80010d4:	4a90      	ldr	r2, [pc, #576]	@ (8001318 <HAL_GPIO_Init+0x2b0>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d85d      	bhi.n	8001196 <HAL_GPIO_Init+0x12e>
 80010da:	2b12      	cmp	r3, #18
 80010dc:	d82a      	bhi.n	8001134 <HAL_GPIO_Init+0xcc>
 80010de:	2b12      	cmp	r3, #18
 80010e0:	d859      	bhi.n	8001196 <HAL_GPIO_Init+0x12e>
 80010e2:	a201      	add	r2, pc, #4	@ (adr r2, 80010e8 <HAL_GPIO_Init+0x80>)
 80010e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e8:	08001163 	.word	0x08001163
 80010ec:	0800113d 	.word	0x0800113d
 80010f0:	0800114f 	.word	0x0800114f
 80010f4:	08001191 	.word	0x08001191
 80010f8:	08001197 	.word	0x08001197
 80010fc:	08001197 	.word	0x08001197
 8001100:	08001197 	.word	0x08001197
 8001104:	08001197 	.word	0x08001197
 8001108:	08001197 	.word	0x08001197
 800110c:	08001197 	.word	0x08001197
 8001110:	08001197 	.word	0x08001197
 8001114:	08001197 	.word	0x08001197
 8001118:	08001197 	.word	0x08001197
 800111c:	08001197 	.word	0x08001197
 8001120:	08001197 	.word	0x08001197
 8001124:	08001197 	.word	0x08001197
 8001128:	08001197 	.word	0x08001197
 800112c:	08001145 	.word	0x08001145
 8001130:	08001159 	.word	0x08001159
 8001134:	4a79      	ldr	r2, [pc, #484]	@ (800131c <HAL_GPIO_Init+0x2b4>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d013      	beq.n	8001162 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800113a:	e02c      	b.n	8001196 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	623b      	str	r3, [r7, #32]
          break;
 8001142:	e029      	b.n	8001198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	3304      	adds	r3, #4
 800114a:	623b      	str	r3, [r7, #32]
          break;
 800114c:	e024      	b.n	8001198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	3308      	adds	r3, #8
 8001154:	623b      	str	r3, [r7, #32]
          break;
 8001156:	e01f      	b.n	8001198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	330c      	adds	r3, #12
 800115e:	623b      	str	r3, [r7, #32]
          break;
 8001160:	e01a      	b.n	8001198 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d102      	bne.n	8001170 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800116a:	2304      	movs	r3, #4
 800116c:	623b      	str	r3, [r7, #32]
          break;
 800116e:	e013      	b.n	8001198 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d105      	bne.n	8001184 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001178:	2308      	movs	r3, #8
 800117a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69fa      	ldr	r2, [r7, #28]
 8001180:	611a      	str	r2, [r3, #16]
          break;
 8001182:	e009      	b.n	8001198 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001184:	2308      	movs	r3, #8
 8001186:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69fa      	ldr	r2, [r7, #28]
 800118c:	615a      	str	r2, [r3, #20]
          break;
 800118e:	e003      	b.n	8001198 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
          break;
 8001194:	e000      	b.n	8001198 <HAL_GPIO_Init+0x130>
          break;
 8001196:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	2bff      	cmp	r3, #255	@ 0xff
 800119c:	d801      	bhi.n	80011a2 <HAL_GPIO_Init+0x13a>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	e001      	b.n	80011a6 <HAL_GPIO_Init+0x13e>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3304      	adds	r3, #4
 80011a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	2bff      	cmp	r3, #255	@ 0xff
 80011ac:	d802      	bhi.n	80011b4 <HAL_GPIO_Init+0x14c>
 80011ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	e002      	b.n	80011ba <HAL_GPIO_Init+0x152>
 80011b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b6:	3b08      	subs	r3, #8
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	210f      	movs	r1, #15
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	fa01 f303 	lsl.w	r3, r1, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	401a      	ands	r2, r3
 80011cc:	6a39      	ldr	r1, [r7, #32]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	fa01 f303 	lsl.w	r3, r1, r3
 80011d4:	431a      	orrs	r2, r3
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 80b1 	beq.w	800134a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011e8:	4b4d      	ldr	r3, [pc, #308]	@ (8001320 <HAL_GPIO_Init+0x2b8>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a4c      	ldr	r2, [pc, #304]	@ (8001320 <HAL_GPIO_Init+0x2b8>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	6193      	str	r3, [r2, #24]
 80011f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001320 <HAL_GPIO_Init+0x2b8>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001200:	4a48      	ldr	r2, [pc, #288]	@ (8001324 <HAL_GPIO_Init+0x2bc>)
 8001202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	3302      	adds	r3, #2
 8001208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800120e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	220f      	movs	r2, #15
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	4013      	ands	r3, r2
 8001222:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a40      	ldr	r2, [pc, #256]	@ (8001328 <HAL_GPIO_Init+0x2c0>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d013      	beq.n	8001254 <HAL_GPIO_Init+0x1ec>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a3f      	ldr	r2, [pc, #252]	@ (800132c <HAL_GPIO_Init+0x2c4>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d00d      	beq.n	8001250 <HAL_GPIO_Init+0x1e8>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a3e      	ldr	r2, [pc, #248]	@ (8001330 <HAL_GPIO_Init+0x2c8>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d007      	beq.n	800124c <HAL_GPIO_Init+0x1e4>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a3d      	ldr	r2, [pc, #244]	@ (8001334 <HAL_GPIO_Init+0x2cc>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d101      	bne.n	8001248 <HAL_GPIO_Init+0x1e0>
 8001244:	2303      	movs	r3, #3
 8001246:	e006      	b.n	8001256 <HAL_GPIO_Init+0x1ee>
 8001248:	2304      	movs	r3, #4
 800124a:	e004      	b.n	8001256 <HAL_GPIO_Init+0x1ee>
 800124c:	2302      	movs	r3, #2
 800124e:	e002      	b.n	8001256 <HAL_GPIO_Init+0x1ee>
 8001250:	2301      	movs	r3, #1
 8001252:	e000      	b.n	8001256 <HAL_GPIO_Init+0x1ee>
 8001254:	2300      	movs	r3, #0
 8001256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001258:	f002 0203 	and.w	r2, r2, #3
 800125c:	0092      	lsls	r2, r2, #2
 800125e:	4093      	lsls	r3, r2
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	4313      	orrs	r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001266:	492f      	ldr	r1, [pc, #188]	@ (8001324 <HAL_GPIO_Init+0x2bc>)
 8001268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126a:	089b      	lsrs	r3, r3, #2
 800126c:	3302      	adds	r3, #2
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d006      	beq.n	800128e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001280:	4b2d      	ldr	r3, [pc, #180]	@ (8001338 <HAL_GPIO_Init+0x2d0>)
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	492c      	ldr	r1, [pc, #176]	@ (8001338 <HAL_GPIO_Init+0x2d0>)
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	4313      	orrs	r3, r2
 800128a:	608b      	str	r3, [r1, #8]
 800128c:	e006      	b.n	800129c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800128e:	4b2a      	ldr	r3, [pc, #168]	@ (8001338 <HAL_GPIO_Init+0x2d0>)
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	43db      	mvns	r3, r3
 8001296:	4928      	ldr	r1, [pc, #160]	@ (8001338 <HAL_GPIO_Init+0x2d0>)
 8001298:	4013      	ands	r3, r2
 800129a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d006      	beq.n	80012b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012a8:	4b23      	ldr	r3, [pc, #140]	@ (8001338 <HAL_GPIO_Init+0x2d0>)
 80012aa:	68da      	ldr	r2, [r3, #12]
 80012ac:	4922      	ldr	r1, [pc, #136]	@ (8001338 <HAL_GPIO_Init+0x2d0>)
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	60cb      	str	r3, [r1, #12]
 80012b4:	e006      	b.n	80012c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012b6:	4b20      	ldr	r3, [pc, #128]	@ (8001338 <HAL_GPIO_Init+0x2d0>)
 80012b8:	68da      	ldr	r2, [r3, #12]
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	43db      	mvns	r3, r3
 80012be:	491e      	ldr	r1, [pc, #120]	@ (8001338 <HAL_GPIO_Init+0x2d0>)
 80012c0:	4013      	ands	r3, r2
 80012c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d006      	beq.n	80012de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012d0:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <HAL_GPIO_Init+0x2d0>)
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	4918      	ldr	r1, [pc, #96]	@ (8001338 <HAL_GPIO_Init+0x2d0>)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	4313      	orrs	r3, r2
 80012da:	604b      	str	r3, [r1, #4]
 80012dc:	e006      	b.n	80012ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012de:	4b16      	ldr	r3, [pc, #88]	@ (8001338 <HAL_GPIO_Init+0x2d0>)
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	4914      	ldr	r1, [pc, #80]	@ (8001338 <HAL_GPIO_Init+0x2d0>)
 80012e8:	4013      	ands	r3, r2
 80012ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d021      	beq.n	800133c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <HAL_GPIO_Init+0x2d0>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	490e      	ldr	r1, [pc, #56]	@ (8001338 <HAL_GPIO_Init+0x2d0>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	4313      	orrs	r3, r2
 8001302:	600b      	str	r3, [r1, #0]
 8001304:	e021      	b.n	800134a <HAL_GPIO_Init+0x2e2>
 8001306:	bf00      	nop
 8001308:	10320000 	.word	0x10320000
 800130c:	10310000 	.word	0x10310000
 8001310:	10220000 	.word	0x10220000
 8001314:	10210000 	.word	0x10210000
 8001318:	10120000 	.word	0x10120000
 800131c:	10110000 	.word	0x10110000
 8001320:	40021000 	.word	0x40021000
 8001324:	40010000 	.word	0x40010000
 8001328:	40010800 	.word	0x40010800
 800132c:	40010c00 	.word	0x40010c00
 8001330:	40011000 	.word	0x40011000
 8001334:	40011400 	.word	0x40011400
 8001338:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800133c:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <HAL_GPIO_Init+0x304>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	43db      	mvns	r3, r3
 8001344:	4909      	ldr	r1, [pc, #36]	@ (800136c <HAL_GPIO_Init+0x304>)
 8001346:	4013      	ands	r3, r2
 8001348:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800134a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134c:	3301      	adds	r3, #1
 800134e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001356:	fa22 f303 	lsr.w	r3, r2, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	f47f ae8e 	bne.w	800107c <HAL_GPIO_Init+0x14>
  }
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	372c      	adds	r7, #44	@ 0x2c
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	40010400 	.word	0x40010400

08001370 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	887b      	ldrh	r3, [r7, #2]
 8001382:	4013      	ands	r3, r2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001388:	2301      	movs	r3, #1
 800138a:	73fb      	strb	r3, [r7, #15]
 800138c:	e001      	b.n	8001392 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800138e:	2300      	movs	r3, #0
 8001390:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001392:	7bfb      	ldrb	r3, [r7, #15]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr

0800139e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	460b      	mov	r3, r1
 80013a8:	807b      	strh	r3, [r7, #2]
 80013aa:	4613      	mov	r3, r2
 80013ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013ae:	787b      	ldrb	r3, [r7, #1]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013b4:	887a      	ldrh	r2, [r7, #2]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013ba:	e003      	b.n	80013c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013bc:	887b      	ldrh	r3, [r7, #2]
 80013be:	041a      	lsls	r2, r3, #16
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	611a      	str	r2, [r3, #16]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
	...

080013d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e12b      	b.n	800163a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d106      	bne.n	80013fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff faea 	bl	80009d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2224      	movs	r2, #36	@ 0x24
 8001400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0201 	bic.w	r2, r2, #1
 8001412:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001422:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001432:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001434:	f001 f832 	bl	800249c <HAL_RCC_GetPCLK1Freq>
 8001438:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	4a81      	ldr	r2, [pc, #516]	@ (8001644 <HAL_I2C_Init+0x274>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d807      	bhi.n	8001454 <HAL_I2C_Init+0x84>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4a80      	ldr	r2, [pc, #512]	@ (8001648 <HAL_I2C_Init+0x278>)
 8001448:	4293      	cmp	r3, r2
 800144a:	bf94      	ite	ls
 800144c:	2301      	movls	r3, #1
 800144e:	2300      	movhi	r3, #0
 8001450:	b2db      	uxtb	r3, r3
 8001452:	e006      	b.n	8001462 <HAL_I2C_Init+0x92>
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4a7d      	ldr	r2, [pc, #500]	@ (800164c <HAL_I2C_Init+0x27c>)
 8001458:	4293      	cmp	r3, r2
 800145a:	bf94      	ite	ls
 800145c:	2301      	movls	r3, #1
 800145e:	2300      	movhi	r3, #0
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e0e7      	b.n	800163a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4a78      	ldr	r2, [pc, #480]	@ (8001650 <HAL_I2C_Init+0x280>)
 800146e:	fba2 2303 	umull	r2, r3, r2, r3
 8001472:	0c9b      	lsrs	r3, r3, #18
 8001474:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	68ba      	ldr	r2, [r7, #8]
 8001486:	430a      	orrs	r2, r1
 8001488:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	4a6a      	ldr	r2, [pc, #424]	@ (8001644 <HAL_I2C_Init+0x274>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d802      	bhi.n	80014a4 <HAL_I2C_Init+0xd4>
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	3301      	adds	r3, #1
 80014a2:	e009      	b.n	80014b8 <HAL_I2C_Init+0xe8>
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80014aa:	fb02 f303 	mul.w	r3, r2, r3
 80014ae:	4a69      	ldr	r2, [pc, #420]	@ (8001654 <HAL_I2C_Init+0x284>)
 80014b0:	fba2 2303 	umull	r2, r3, r2, r3
 80014b4:	099b      	lsrs	r3, r3, #6
 80014b6:	3301      	adds	r3, #1
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	430b      	orrs	r3, r1
 80014be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80014ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	495c      	ldr	r1, [pc, #368]	@ (8001644 <HAL_I2C_Init+0x274>)
 80014d4:	428b      	cmp	r3, r1
 80014d6:	d819      	bhi.n	800150c <HAL_I2C_Init+0x13c>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80014e6:	1c59      	adds	r1, r3, #1
 80014e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80014ec:	400b      	ands	r3, r1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00a      	beq.n	8001508 <HAL_I2C_Init+0x138>
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	1e59      	subs	r1, r3, #1
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001500:	3301      	adds	r3, #1
 8001502:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001506:	e051      	b.n	80015ac <HAL_I2C_Init+0x1dc>
 8001508:	2304      	movs	r3, #4
 800150a:	e04f      	b.n	80015ac <HAL_I2C_Init+0x1dc>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d111      	bne.n	8001538 <HAL_I2C_Init+0x168>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	1e58      	subs	r0, r3, #1
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6859      	ldr	r1, [r3, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	440b      	add	r3, r1
 8001522:	fbb0 f3f3 	udiv	r3, r0, r3
 8001526:	3301      	adds	r3, #1
 8001528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800152c:	2b00      	cmp	r3, #0
 800152e:	bf0c      	ite	eq
 8001530:	2301      	moveq	r3, #1
 8001532:	2300      	movne	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	e012      	b.n	800155e <HAL_I2C_Init+0x18e>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	1e58      	subs	r0, r3, #1
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6859      	ldr	r1, [r3, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	440b      	add	r3, r1
 8001546:	0099      	lsls	r1, r3, #2
 8001548:	440b      	add	r3, r1
 800154a:	fbb0 f3f3 	udiv	r3, r0, r3
 800154e:	3301      	adds	r3, #1
 8001550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001554:	2b00      	cmp	r3, #0
 8001556:	bf0c      	ite	eq
 8001558:	2301      	moveq	r3, #1
 800155a:	2300      	movne	r3, #0
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_I2C_Init+0x196>
 8001562:	2301      	movs	r3, #1
 8001564:	e022      	b.n	80015ac <HAL_I2C_Init+0x1dc>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10e      	bne.n	800158c <HAL_I2C_Init+0x1bc>
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	1e58      	subs	r0, r3, #1
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6859      	ldr	r1, [r3, #4]
 8001576:	460b      	mov	r3, r1
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	440b      	add	r3, r1
 800157c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001580:	3301      	adds	r3, #1
 8001582:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001586:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800158a:	e00f      	b.n	80015ac <HAL_I2C_Init+0x1dc>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	1e58      	subs	r0, r3, #1
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6859      	ldr	r1, [r3, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	0099      	lsls	r1, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	fbb0 f3f3 	udiv	r3, r0, r3
 80015a2:	3301      	adds	r3, #1
 80015a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	6809      	ldr	r1, [r1, #0]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69da      	ldr	r2, [r3, #28]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80015da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6911      	ldr	r1, [r2, #16]
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68d2      	ldr	r2, [r2, #12]
 80015e6:	4311      	orrs	r1, r2
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	430b      	orrs	r3, r1
 80015ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	695a      	ldr	r2, [r3, #20]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0201 	orr.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2220      	movs	r2, #32
 8001626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	000186a0 	.word	0x000186a0
 8001648:	001e847f 	.word	0x001e847f
 800164c:	003d08ff 	.word	0x003d08ff
 8001650:	431bde83 	.word	0x431bde83
 8001654:	10624dd3 	.word	0x10624dd3

08001658 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af02      	add	r7, sp, #8
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	607a      	str	r2, [r7, #4]
 8001662:	461a      	mov	r2, r3
 8001664:	460b      	mov	r3, r1
 8001666:	817b      	strh	r3, [r7, #10]
 8001668:	4613      	mov	r3, r2
 800166a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800166c:	f7ff fbee 	bl	8000e4c <HAL_GetTick>
 8001670:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b20      	cmp	r3, #32
 800167c:	f040 80e0 	bne.w	8001840 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	2319      	movs	r3, #25
 8001686:	2201      	movs	r2, #1
 8001688:	4970      	ldr	r1, [pc, #448]	@ (800184c <HAL_I2C_Master_Transmit+0x1f4>)
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f000 f964 	bl	8001958 <I2C_WaitOnFlagUntilTimeout>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001696:	2302      	movs	r3, #2
 8001698:	e0d3      	b.n	8001842 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <HAL_I2C_Master_Transmit+0x50>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e0cc      	b.n	8001842 <HAL_I2C_Master_Transmit+0x1ea>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d007      	beq.n	80016ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f042 0201 	orr.w	r2, r2, #1
 80016cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2221      	movs	r2, #33	@ 0x21
 80016e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2210      	movs	r2, #16
 80016ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2200      	movs	r2, #0
 80016f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	893a      	ldrh	r2, [r7, #8]
 80016fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001704:	b29a      	uxth	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4a50      	ldr	r2, [pc, #320]	@ (8001850 <HAL_I2C_Master_Transmit+0x1f8>)
 800170e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001710:	8979      	ldrh	r1, [r7, #10]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	6a3a      	ldr	r2, [r7, #32]
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f000 f89c 	bl	8001854 <I2C_MasterRequestWrite>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e08d      	b.n	8001842 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800173c:	e066      	b.n	800180c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	6a39      	ldr	r1, [r7, #32]
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f000 fa22 	bl	8001b8c <I2C_WaitOnTXEFlagUntilTimeout>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00d      	beq.n	800176a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	2b04      	cmp	r3, #4
 8001754:	d107      	bne.n	8001766 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001764:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e06b      	b.n	8001842 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800176e:	781a      	ldrb	r2, [r3, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001784:	b29b      	uxth	r3, r3
 8001786:	3b01      	subs	r3, #1
 8001788:	b29a      	uxth	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001792:	3b01      	subs	r3, #1
 8001794:	b29a      	uxth	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	d11b      	bne.n	80017e0 <HAL_I2C_Master_Transmit+0x188>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d017      	beq.n	80017e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b4:	781a      	ldrb	r2, [r3, #0]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	3b01      	subs	r3, #1
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017d8:	3b01      	subs	r3, #1
 80017da:	b29a      	uxth	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	6a39      	ldr	r1, [r7, #32]
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f000 fa19 	bl	8001c1c <I2C_WaitOnBTFFlagUntilTimeout>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00d      	beq.n	800180c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f4:	2b04      	cmp	r3, #4
 80017f6:	d107      	bne.n	8001808 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001806:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e01a      	b.n	8001842 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001810:	2b00      	cmp	r3, #0
 8001812:	d194      	bne.n	800173e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2220      	movs	r2, #32
 8001828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	e000      	b.n	8001842 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001840:	2302      	movs	r3, #2
  }
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	00100002 	.word	0x00100002
 8001850:	ffff0000 	.word	0xffff0000

08001854 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af02      	add	r7, sp, #8
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	460b      	mov	r3, r1
 8001862:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001868:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	2b08      	cmp	r3, #8
 800186e:	d006      	beq.n	800187e <I2C_MasterRequestWrite+0x2a>
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d003      	beq.n	800187e <I2C_MasterRequestWrite+0x2a>
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800187c:	d108      	bne.n	8001890 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	e00b      	b.n	80018a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001894:	2b12      	cmp	r3, #18
 8001896:	d107      	bne.n	80018a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f000 f84f 	bl	8001958 <I2C_WaitOnFlagUntilTimeout>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00d      	beq.n	80018dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018ce:	d103      	bne.n	80018d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e035      	b.n	8001948 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80018e4:	d108      	bne.n	80018f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018e6:	897b      	ldrh	r3, [r7, #10]
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	461a      	mov	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80018f4:	611a      	str	r2, [r3, #16]
 80018f6:	e01b      	b.n	8001930 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80018f8:	897b      	ldrh	r3, [r7, #10]
 80018fa:	11db      	asrs	r3, r3, #7
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	f003 0306 	and.w	r3, r3, #6
 8001902:	b2db      	uxtb	r3, r3
 8001904:	f063 030f 	orn	r3, r3, #15
 8001908:	b2da      	uxtb	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	490e      	ldr	r1, [pc, #56]	@ (8001950 <I2C_MasterRequestWrite+0xfc>)
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f000 f898 	bl	8001a4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e010      	b.n	8001948 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001926:	897b      	ldrh	r3, [r7, #10]
 8001928:	b2da      	uxtb	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	4907      	ldr	r1, [pc, #28]	@ (8001954 <I2C_MasterRequestWrite+0x100>)
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 f888 	bl	8001a4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	00010008 	.word	0x00010008
 8001954:	00010002 	.word	0x00010002

08001958 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	4613      	mov	r3, r2
 8001966:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001968:	e048      	b.n	80019fc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001970:	d044      	beq.n	80019fc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001972:	f7ff fa6b 	bl	8000e4c <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d302      	bcc.n	8001988 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d139      	bne.n	80019fc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	0c1b      	lsrs	r3, r3, #16
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b01      	cmp	r3, #1
 8001990:	d10d      	bne.n	80019ae <I2C_WaitOnFlagUntilTimeout+0x56>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	43da      	mvns	r2, r3
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	4013      	ands	r3, r2
 800199e:	b29b      	uxth	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	bf0c      	ite	eq
 80019a4:	2301      	moveq	r3, #1
 80019a6:	2300      	movne	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	461a      	mov	r2, r3
 80019ac:	e00c      	b.n	80019c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	43da      	mvns	r2, r3
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	4013      	ands	r3, r2
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	bf0c      	ite	eq
 80019c0:	2301      	moveq	r3, #1
 80019c2:	2300      	movne	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	461a      	mov	r2, r3
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d116      	bne.n	80019fc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2200      	movs	r2, #0
 80019d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2220      	movs	r2, #32
 80019d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e8:	f043 0220 	orr.w	r2, r3, #32
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e023      	b.n	8001a44 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	0c1b      	lsrs	r3, r3, #16
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d10d      	bne.n	8001a22 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	43da      	mvns	r2, r3
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	4013      	ands	r3, r2
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	bf0c      	ite	eq
 8001a18:	2301      	moveq	r3, #1
 8001a1a:	2300      	movne	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	461a      	mov	r2, r3
 8001a20:	e00c      	b.n	8001a3c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	43da      	mvns	r2, r3
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	bf0c      	ite	eq
 8001a34:	2301      	moveq	r3, #1
 8001a36:	2300      	movne	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d093      	beq.n	800196a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
 8001a58:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a5a:	e071      	b.n	8001b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a6a:	d123      	bne.n	8001ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a7a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001a84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2220      	movs	r2, #32
 8001a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa0:	f043 0204 	orr.w	r2, r3, #4
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e067      	b.n	8001b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aba:	d041      	beq.n	8001b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001abc:	f7ff f9c6 	bl	8000e4c <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d302      	bcc.n	8001ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d136      	bne.n	8001b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	0c1b      	lsrs	r3, r3, #16
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d10c      	bne.n	8001af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	bf14      	ite	ne
 8001aee:	2301      	movne	r3, #1
 8001af0:	2300      	moveq	r3, #0
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	e00b      	b.n	8001b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	43da      	mvns	r2, r3
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	4013      	ands	r3, r2
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	bf14      	ite	ne
 8001b08:	2301      	movne	r3, #1
 8001b0a:	2300      	moveq	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d016      	beq.n	8001b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2c:	f043 0220 	orr.w	r2, r3, #32
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e021      	b.n	8001b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	0c1b      	lsrs	r3, r3, #16
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d10c      	bne.n	8001b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	43da      	mvns	r2, r3
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	4013      	ands	r3, r2
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	bf14      	ite	ne
 8001b5c:	2301      	movne	r3, #1
 8001b5e:	2300      	moveq	r3, #0
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	e00b      	b.n	8001b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	bf14      	ite	ne
 8001b76:	2301      	movne	r3, #1
 8001b78:	2300      	moveq	r3, #0
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f47f af6d 	bne.w	8001a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b98:	e034      	b.n	8001c04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f000 f886 	bl	8001cac <I2C_IsAcknowledgeFailed>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e034      	b.n	8001c14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb0:	d028      	beq.n	8001c04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bb2:	f7ff f94b 	bl	8000e4c <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	68ba      	ldr	r2, [r7, #8]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d302      	bcc.n	8001bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d11d      	bne.n	8001c04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bd2:	2b80      	cmp	r3, #128	@ 0x80
 8001bd4:	d016      	beq.n	8001c04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2220      	movs	r2, #32
 8001be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf0:	f043 0220 	orr.w	r2, r3, #32
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e007      	b.n	8001c14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c0e:	2b80      	cmp	r3, #128	@ 0x80
 8001c10:	d1c3      	bne.n	8001b9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c28:	e034      	b.n	8001c94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f000 f83e 	bl	8001cac <I2C_IsAcknowledgeFailed>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e034      	b.n	8001ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c40:	d028      	beq.n	8001c94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c42:	f7ff f903 	bl	8000e4c <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d302      	bcc.n	8001c58 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d11d      	bne.n	8001c94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	d016      	beq.n	8001c94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c80:	f043 0220 	orr.w	r2, r3, #32
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e007      	b.n	8001ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d1c3      	bne.n	8001c2a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cc2:	d11b      	bne.n	8001cfc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001ccc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce8:	f043 0204 	orr.w	r2, r3, #4
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e000      	b.n	8001cfe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e272      	b.n	8002200 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 8087 	beq.w	8001e36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d28:	4b92      	ldr	r3, [pc, #584]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 030c 	and.w	r3, r3, #12
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d00c      	beq.n	8001d4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d34:	4b8f      	ldr	r3, [pc, #572]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 030c 	and.w	r3, r3, #12
 8001d3c:	2b08      	cmp	r3, #8
 8001d3e:	d112      	bne.n	8001d66 <HAL_RCC_OscConfig+0x5e>
 8001d40:	4b8c      	ldr	r3, [pc, #560]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d4c:	d10b      	bne.n	8001d66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4e:	4b89      	ldr	r3, [pc, #548]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d06c      	beq.n	8001e34 <HAL_RCC_OscConfig+0x12c>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d168      	bne.n	8001e34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e24c      	b.n	8002200 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d6e:	d106      	bne.n	8001d7e <HAL_RCC_OscConfig+0x76>
 8001d70:	4b80      	ldr	r3, [pc, #512]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a7f      	ldr	r2, [pc, #508]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001d76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	e02e      	b.n	8001ddc <HAL_RCC_OscConfig+0xd4>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10c      	bne.n	8001da0 <HAL_RCC_OscConfig+0x98>
 8001d86:	4b7b      	ldr	r3, [pc, #492]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a7a      	ldr	r2, [pc, #488]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	4b78      	ldr	r3, [pc, #480]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a77      	ldr	r2, [pc, #476]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	e01d      	b.n	8001ddc <HAL_RCC_OscConfig+0xd4>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001da8:	d10c      	bne.n	8001dc4 <HAL_RCC_OscConfig+0xbc>
 8001daa:	4b72      	ldr	r3, [pc, #456]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a71      	ldr	r2, [pc, #452]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	4b6f      	ldr	r3, [pc, #444]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a6e      	ldr	r2, [pc, #440]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	e00b      	b.n	8001ddc <HAL_RCC_OscConfig+0xd4>
 8001dc4:	4b6b      	ldr	r3, [pc, #428]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a6a      	ldr	r2, [pc, #424]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001dca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	4b68      	ldr	r3, [pc, #416]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a67      	ldr	r2, [pc, #412]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d013      	beq.n	8001e0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7ff f832 	bl	8000e4c <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dec:	f7ff f82e 	bl	8000e4c <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	@ 0x64
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e200      	b.n	8002200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfe:	4b5d      	ldr	r3, [pc, #372]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0xe4>
 8001e0a:	e014      	b.n	8001e36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0c:	f7ff f81e 	bl	8000e4c <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e14:	f7ff f81a 	bl	8000e4c <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b64      	cmp	r3, #100	@ 0x64
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e1ec      	b.n	8002200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e26:	4b53      	ldr	r3, [pc, #332]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x10c>
 8001e32:	e000      	b.n	8001e36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d063      	beq.n	8001f0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e42:	4b4c      	ldr	r3, [pc, #304]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 030c 	and.w	r3, r3, #12
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00b      	beq.n	8001e66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e4e:	4b49      	ldr	r3, [pc, #292]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 030c 	and.w	r3, r3, #12
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d11c      	bne.n	8001e94 <HAL_RCC_OscConfig+0x18c>
 8001e5a:	4b46      	ldr	r3, [pc, #280]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d116      	bne.n	8001e94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e66:	4b43      	ldr	r3, [pc, #268]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d005      	beq.n	8001e7e <HAL_RCC_OscConfig+0x176>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d001      	beq.n	8001e7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e1c0      	b.n	8002200 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4939      	ldr	r1, [pc, #228]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e92:	e03a      	b.n	8001f0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d020      	beq.n	8001ede <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e9c:	4b36      	ldr	r3, [pc, #216]	@ (8001f78 <HAL_RCC_OscConfig+0x270>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea2:	f7fe ffd3 	bl	8000e4c <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eaa:	f7fe ffcf 	bl	8000e4c <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e1a1      	b.n	8002200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ebc:	4b2d      	ldr	r3, [pc, #180]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec8:	4b2a      	ldr	r3, [pc, #168]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4927      	ldr	r1, [pc, #156]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	600b      	str	r3, [r1, #0]
 8001edc:	e015      	b.n	8001f0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ede:	4b26      	ldr	r3, [pc, #152]	@ (8001f78 <HAL_RCC_OscConfig+0x270>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7fe ffb2 	bl	8000e4c <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eec:	f7fe ffae 	bl	8000e4c <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e180      	b.n	8002200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efe:	4b1d      	ldr	r3, [pc, #116]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d03a      	beq.n	8001f8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d019      	beq.n	8001f52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f1e:	4b17      	ldr	r3, [pc, #92]	@ (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f24:	f7fe ff92 	bl	8000e4c <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f2c:	f7fe ff8e 	bl	8000e4c <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e160      	b.n	8002200 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f74 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0f0      	beq.n	8001f2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	f000 fafe 	bl	800254c <RCC_Delay>
 8001f50:	e01c      	b.n	8001f8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f52:	4b0a      	ldr	r3, [pc, #40]	@ (8001f7c <HAL_RCC_OscConfig+0x274>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f58:	f7fe ff78 	bl	8000e4c <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f5e:	e00f      	b.n	8001f80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f60:	f7fe ff74 	bl	8000e4c <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d908      	bls.n	8001f80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e146      	b.n	8002200 <HAL_RCC_OscConfig+0x4f8>
 8001f72:	bf00      	nop
 8001f74:	40021000 	.word	0x40021000
 8001f78:	42420000 	.word	0x42420000
 8001f7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f80:	4b92      	ldr	r3, [pc, #584]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 8001f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1e9      	bne.n	8001f60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 80a6 	beq.w	80020e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f9e:	4b8b      	ldr	r3, [pc, #556]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10d      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001faa:	4b88      	ldr	r3, [pc, #544]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	4a87      	ldr	r2, [pc, #540]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 8001fb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fb4:	61d3      	str	r3, [r2, #28]
 8001fb6:	4b85      	ldr	r3, [pc, #532]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc6:	4b82      	ldr	r3, [pc, #520]	@ (80021d0 <HAL_RCC_OscConfig+0x4c8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d118      	bne.n	8002004 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fd2:	4b7f      	ldr	r3, [pc, #508]	@ (80021d0 <HAL_RCC_OscConfig+0x4c8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a7e      	ldr	r2, [pc, #504]	@ (80021d0 <HAL_RCC_OscConfig+0x4c8>)
 8001fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fde:	f7fe ff35 	bl	8000e4c <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe6:	f7fe ff31 	bl	8000e4c <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b64      	cmp	r3, #100	@ 0x64
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e103      	b.n	8002200 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff8:	4b75      	ldr	r3, [pc, #468]	@ (80021d0 <HAL_RCC_OscConfig+0x4c8>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d106      	bne.n	800201a <HAL_RCC_OscConfig+0x312>
 800200c:	4b6f      	ldr	r3, [pc, #444]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	4a6e      	ldr	r2, [pc, #440]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	6213      	str	r3, [r2, #32]
 8002018:	e02d      	b.n	8002076 <HAL_RCC_OscConfig+0x36e>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10c      	bne.n	800203c <HAL_RCC_OscConfig+0x334>
 8002022:	4b6a      	ldr	r3, [pc, #424]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	4a69      	ldr	r2, [pc, #420]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 8002028:	f023 0301 	bic.w	r3, r3, #1
 800202c:	6213      	str	r3, [r2, #32]
 800202e:	4b67      	ldr	r3, [pc, #412]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	4a66      	ldr	r2, [pc, #408]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 8002034:	f023 0304 	bic.w	r3, r3, #4
 8002038:	6213      	str	r3, [r2, #32]
 800203a:	e01c      	b.n	8002076 <HAL_RCC_OscConfig+0x36e>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	2b05      	cmp	r3, #5
 8002042:	d10c      	bne.n	800205e <HAL_RCC_OscConfig+0x356>
 8002044:	4b61      	ldr	r3, [pc, #388]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	4a60      	ldr	r2, [pc, #384]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 800204a:	f043 0304 	orr.w	r3, r3, #4
 800204e:	6213      	str	r3, [r2, #32]
 8002050:	4b5e      	ldr	r3, [pc, #376]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	4a5d      	ldr	r2, [pc, #372]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	6213      	str	r3, [r2, #32]
 800205c:	e00b      	b.n	8002076 <HAL_RCC_OscConfig+0x36e>
 800205e:	4b5b      	ldr	r3, [pc, #364]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	4a5a      	ldr	r2, [pc, #360]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 8002064:	f023 0301 	bic.w	r3, r3, #1
 8002068:	6213      	str	r3, [r2, #32]
 800206a:	4b58      	ldr	r3, [pc, #352]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	4a57      	ldr	r2, [pc, #348]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 8002070:	f023 0304 	bic.w	r3, r3, #4
 8002074:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d015      	beq.n	80020aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207e:	f7fe fee5 	bl	8000e4c <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002084:	e00a      	b.n	800209c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002086:	f7fe fee1 	bl	8000e4c <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002094:	4293      	cmp	r3, r2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e0b1      	b.n	8002200 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800209c:	4b4b      	ldr	r3, [pc, #300]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0ee      	beq.n	8002086 <HAL_RCC_OscConfig+0x37e>
 80020a8:	e014      	b.n	80020d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020aa:	f7fe fecf 	bl	8000e4c <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b0:	e00a      	b.n	80020c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b2:	f7fe fecb 	bl	8000e4c <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e09b      	b.n	8002200 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c8:	4b40      	ldr	r3, [pc, #256]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1ee      	bne.n	80020b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020d4:	7dfb      	ldrb	r3, [r7, #23]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d105      	bne.n	80020e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020da:	4b3c      	ldr	r3, [pc, #240]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	4a3b      	ldr	r2, [pc, #236]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 8087 	beq.w	80021fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020f0:	4b36      	ldr	r3, [pc, #216]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 030c 	and.w	r3, r3, #12
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d061      	beq.n	80021c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d146      	bne.n	8002192 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002104:	4b33      	ldr	r3, [pc, #204]	@ (80021d4 <HAL_RCC_OscConfig+0x4cc>)
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210a:	f7fe fe9f 	bl	8000e4c <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002112:	f7fe fe9b 	bl	8000e4c <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e06d      	b.n	8002200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002124:	4b29      	ldr	r3, [pc, #164]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1f0      	bne.n	8002112 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002138:	d108      	bne.n	800214c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800213a:	4b24      	ldr	r3, [pc, #144]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	4921      	ldr	r1, [pc, #132]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 8002148:	4313      	orrs	r3, r2
 800214a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800214c:	4b1f      	ldr	r3, [pc, #124]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a19      	ldr	r1, [r3, #32]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215c:	430b      	orrs	r3, r1
 800215e:	491b      	ldr	r1, [pc, #108]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 8002160:	4313      	orrs	r3, r2
 8002162:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002164:	4b1b      	ldr	r3, [pc, #108]	@ (80021d4 <HAL_RCC_OscConfig+0x4cc>)
 8002166:	2201      	movs	r2, #1
 8002168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216a:	f7fe fe6f 	bl	8000e4c <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002172:	f7fe fe6b 	bl	8000e4c <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e03d      	b.n	8002200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002184:	4b11      	ldr	r3, [pc, #68]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0f0      	beq.n	8002172 <HAL_RCC_OscConfig+0x46a>
 8002190:	e035      	b.n	80021fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002192:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <HAL_RCC_OscConfig+0x4cc>)
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002198:	f7fe fe58 	bl	8000e4c <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a0:	f7fe fe54 	bl	8000e4c <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e026      	b.n	8002200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b2:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <HAL_RCC_OscConfig+0x4c4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0x498>
 80021be:	e01e      	b.n	80021fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d107      	bne.n	80021d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e019      	b.n	8002200 <HAL_RCC_OscConfig+0x4f8>
 80021cc:	40021000 	.word	0x40021000
 80021d0:	40007000 	.word	0x40007000
 80021d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002208 <HAL_RCC_OscConfig+0x500>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d106      	bne.n	80021fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d001      	beq.n	80021fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40021000 	.word	0x40021000

0800220c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0d0      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002220:	4b6a      	ldr	r3, [pc, #424]	@ (80023cc <HAL_RCC_ClockConfig+0x1c0>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d910      	bls.n	8002250 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222e:	4b67      	ldr	r3, [pc, #412]	@ (80023cc <HAL_RCC_ClockConfig+0x1c0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 0207 	bic.w	r2, r3, #7
 8002236:	4965      	ldr	r1, [pc, #404]	@ (80023cc <HAL_RCC_ClockConfig+0x1c0>)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	4313      	orrs	r3, r2
 800223c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800223e:	4b63      	ldr	r3, [pc, #396]	@ (80023cc <HAL_RCC_ClockConfig+0x1c0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d001      	beq.n	8002250 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0b8      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d020      	beq.n	800229e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002268:	4b59      	ldr	r3, [pc, #356]	@ (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	4a58      	ldr	r2, [pc, #352]	@ (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002272:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	2b00      	cmp	r3, #0
 800227e:	d005      	beq.n	800228c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002280:	4b53      	ldr	r3, [pc, #332]	@ (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	4a52      	ldr	r2, [pc, #328]	@ (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002286:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800228a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800228c:	4b50      	ldr	r3, [pc, #320]	@ (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	494d      	ldr	r1, [pc, #308]	@ (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 800229a:	4313      	orrs	r3, r2
 800229c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d040      	beq.n	800232c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d107      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b2:	4b47      	ldr	r3, [pc, #284]	@ (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d115      	bne.n	80022ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e07f      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d107      	bne.n	80022da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ca:	4b41      	ldr	r3, [pc, #260]	@ (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d109      	bne.n	80022ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e073      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022da:	4b3d      	ldr	r3, [pc, #244]	@ (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e06b      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ea:	4b39      	ldr	r3, [pc, #228]	@ (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f023 0203 	bic.w	r2, r3, #3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	4936      	ldr	r1, [pc, #216]	@ (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022fc:	f7fe fda6 	bl	8000e4c <HAL_GetTick>
 8002300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002302:	e00a      	b.n	800231a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002304:	f7fe fda2 	bl	8000e4c <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002312:	4293      	cmp	r3, r2
 8002314:	d901      	bls.n	800231a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e053      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231a:	4b2d      	ldr	r3, [pc, #180]	@ (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 020c 	and.w	r2, r3, #12
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	429a      	cmp	r2, r3
 800232a:	d1eb      	bne.n	8002304 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800232c:	4b27      	ldr	r3, [pc, #156]	@ (80023cc <HAL_RCC_ClockConfig+0x1c0>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d210      	bcs.n	800235c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233a:	4b24      	ldr	r3, [pc, #144]	@ (80023cc <HAL_RCC_ClockConfig+0x1c0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 0207 	bic.w	r2, r3, #7
 8002342:	4922      	ldr	r1, [pc, #136]	@ (80023cc <HAL_RCC_ClockConfig+0x1c0>)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	4313      	orrs	r3, r2
 8002348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800234a:	4b20      	ldr	r3, [pc, #128]	@ (80023cc <HAL_RCC_ClockConfig+0x1c0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d001      	beq.n	800235c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e032      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	d008      	beq.n	800237a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002368:	4b19      	ldr	r3, [pc, #100]	@ (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	4916      	ldr	r1, [pc, #88]	@ (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	4313      	orrs	r3, r2
 8002378:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d009      	beq.n	800239a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002386:	4b12      	ldr	r3, [pc, #72]	@ (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	490e      	ldr	r1, [pc, #56]	@ (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002396:	4313      	orrs	r3, r2
 8002398:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800239a:	f000 f821 	bl	80023e0 <HAL_RCC_GetSysClockFreq>
 800239e:	4602      	mov	r2, r0
 80023a0:	4b0b      	ldr	r3, [pc, #44]	@ (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	091b      	lsrs	r3, r3, #4
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	490a      	ldr	r1, [pc, #40]	@ (80023d4 <HAL_RCC_ClockConfig+0x1c8>)
 80023ac:	5ccb      	ldrb	r3, [r1, r3]
 80023ae:	fa22 f303 	lsr.w	r3, r2, r3
 80023b2:	4a09      	ldr	r2, [pc, #36]	@ (80023d8 <HAL_RCC_ClockConfig+0x1cc>)
 80023b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023b6:	4b09      	ldr	r3, [pc, #36]	@ (80023dc <HAL_RCC_ClockConfig+0x1d0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe fbb0 	bl	8000b20 <HAL_InitTick>

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40022000 	.word	0x40022000
 80023d0:	40021000 	.word	0x40021000
 80023d4:	080059ac 	.word	0x080059ac
 80023d8:	20000004 	.word	0x20000004
 80023dc:	20000008 	.word	0x20000008

080023e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b087      	sub	sp, #28
 80023e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	2300      	movs	r3, #0
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	2300      	movs	r3, #0
 80023f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002474 <HAL_RCC_GetSysClockFreq+0x94>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	2b04      	cmp	r3, #4
 8002408:	d002      	beq.n	8002410 <HAL_RCC_GetSysClockFreq+0x30>
 800240a:	2b08      	cmp	r3, #8
 800240c:	d003      	beq.n	8002416 <HAL_RCC_GetSysClockFreq+0x36>
 800240e:	e027      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002410:	4b19      	ldr	r3, [pc, #100]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x98>)
 8002412:	613b      	str	r3, [r7, #16]
      break;
 8002414:	e027      	b.n	8002466 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	0c9b      	lsrs	r3, r3, #18
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	4a17      	ldr	r2, [pc, #92]	@ (800247c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002420:	5cd3      	ldrb	r3, [r2, r3]
 8002422:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d010      	beq.n	8002450 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800242e:	4b11      	ldr	r3, [pc, #68]	@ (8002474 <HAL_RCC_GetSysClockFreq+0x94>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	0c5b      	lsrs	r3, r3, #17
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	4a11      	ldr	r2, [pc, #68]	@ (8002480 <HAL_RCC_GetSysClockFreq+0xa0>)
 800243a:	5cd3      	ldrb	r3, [r2, r3]
 800243c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a0d      	ldr	r2, [pc, #52]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x98>)
 8002442:	fb03 f202 	mul.w	r2, r3, r2
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	fbb2 f3f3 	udiv	r3, r2, r3
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	e004      	b.n	800245a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a0c      	ldr	r2, [pc, #48]	@ (8002484 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002454:	fb02 f303 	mul.w	r3, r2, r3
 8002458:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	613b      	str	r3, [r7, #16]
      break;
 800245e:	e002      	b.n	8002466 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002460:	4b05      	ldr	r3, [pc, #20]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x98>)
 8002462:	613b      	str	r3, [r7, #16]
      break;
 8002464:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002466:	693b      	ldr	r3, [r7, #16]
}
 8002468:	4618      	mov	r0, r3
 800246a:	371c      	adds	r7, #28
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40021000 	.word	0x40021000
 8002478:	007a1200 	.word	0x007a1200
 800247c:	080059c4 	.word	0x080059c4
 8002480:	080059d4 	.word	0x080059d4
 8002484:	003d0900 	.word	0x003d0900

08002488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800248c:	4b02      	ldr	r3, [pc, #8]	@ (8002498 <HAL_RCC_GetHCLKFreq+0x10>)
 800248e:	681b      	ldr	r3, [r3, #0]
}
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr
 8002498:	20000004 	.word	0x20000004

0800249c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024a0:	f7ff fff2 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 80024a4:	4602      	mov	r2, r0
 80024a6:	4b05      	ldr	r3, [pc, #20]	@ (80024bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	0a1b      	lsrs	r3, r3, #8
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	4903      	ldr	r1, [pc, #12]	@ (80024c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024b2:	5ccb      	ldrb	r3, [r1, r3]
 80024b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40021000 	.word	0x40021000
 80024c0:	080059bc 	.word	0x080059bc

080024c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024c8:	f7ff ffde 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 80024cc:	4602      	mov	r2, r0
 80024ce:	4b05      	ldr	r3, [pc, #20]	@ (80024e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	0adb      	lsrs	r3, r3, #11
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	4903      	ldr	r1, [pc, #12]	@ (80024e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024da:	5ccb      	ldrb	r3, [r1, r3]
 80024dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40021000 	.word	0x40021000
 80024e8:	080059bc 	.word	0x080059bc

080024ec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	220f      	movs	r2, #15
 80024fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024fc:	4b11      	ldr	r3, [pc, #68]	@ (8002544 <HAL_RCC_GetClockConfig+0x58>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0203 	and.w	r2, r3, #3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002508:	4b0e      	ldr	r3, [pc, #56]	@ (8002544 <HAL_RCC_GetClockConfig+0x58>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002514:	4b0b      	ldr	r3, [pc, #44]	@ (8002544 <HAL_RCC_GetClockConfig+0x58>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002520:	4b08      	ldr	r3, [pc, #32]	@ (8002544 <HAL_RCC_GetClockConfig+0x58>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	08db      	lsrs	r3, r3, #3
 8002526:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800252e:	4b06      	ldr	r3, [pc, #24]	@ (8002548 <HAL_RCC_GetClockConfig+0x5c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0207 	and.w	r2, r3, #7
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr
 8002544:	40021000 	.word	0x40021000
 8002548:	40022000 	.word	0x40022000

0800254c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002554:	4b0a      	ldr	r3, [pc, #40]	@ (8002580 <RCC_Delay+0x34>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a0a      	ldr	r2, [pc, #40]	@ (8002584 <RCC_Delay+0x38>)
 800255a:	fba2 2303 	umull	r2, r3, r2, r3
 800255e:	0a5b      	lsrs	r3, r3, #9
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	fb02 f303 	mul.w	r3, r2, r3
 8002566:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002568:	bf00      	nop
  }
  while (Delay --);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1e5a      	subs	r2, r3, #1
 800256e:	60fa      	str	r2, [r7, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f9      	bne.n	8002568 <RCC_Delay+0x1c>
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr
 8002580:	20000004 	.word	0x20000004
 8002584:	10624dd3 	.word	0x10624dd3

08002588 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e041      	b.n	800261e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d106      	bne.n	80025b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7fe fa4c 	bl	8000a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3304      	adds	r3, #4
 80025c4:	4619      	mov	r1, r3
 80025c6:	4610      	mov	r0, r2
 80025c8:	f000 fa5c 	bl	8002a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b01      	cmp	r3, #1
 800263a:	d001      	beq.n	8002640 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e03a      	b.n	80026b6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2202      	movs	r2, #2
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0201 	orr.w	r2, r2, #1
 8002656:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a18      	ldr	r2, [pc, #96]	@ (80026c0 <HAL_TIM_Base_Start_IT+0x98>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d00e      	beq.n	8002680 <HAL_TIM_Base_Start_IT+0x58>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800266a:	d009      	beq.n	8002680 <HAL_TIM_Base_Start_IT+0x58>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a14      	ldr	r2, [pc, #80]	@ (80026c4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d004      	beq.n	8002680 <HAL_TIM_Base_Start_IT+0x58>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a13      	ldr	r2, [pc, #76]	@ (80026c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d111      	bne.n	80026a4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2b06      	cmp	r3, #6
 8002690:	d010      	beq.n	80026b4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f042 0201 	orr.w	r2, r2, #1
 80026a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026a2:	e007      	b.n	80026b4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0201 	orr.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr
 80026c0:	40012c00 	.word	0x40012c00
 80026c4:	40000400 	.word	0x40000400
 80026c8:	40000800 	.word	0x40000800

080026cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d020      	beq.n	8002730 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d01b      	beq.n	8002730 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f06f 0202 	mvn.w	r2, #2
 8002700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f998 	bl	8002a4c <HAL_TIM_IC_CaptureCallback>
 800271c:	e005      	b.n	800272a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f98b 	bl	8002a3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f99a 	bl	8002a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	2b00      	cmp	r3, #0
 8002738:	d020      	beq.n	800277c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d01b      	beq.n	800277c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f06f 0204 	mvn.w	r2, #4
 800274c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2202      	movs	r2, #2
 8002752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f972 	bl	8002a4c <HAL_TIM_IC_CaptureCallback>
 8002768:	e005      	b.n	8002776 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f965 	bl	8002a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f974 	bl	8002a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d020      	beq.n	80027c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f003 0308 	and.w	r3, r3, #8
 800278c:	2b00      	cmp	r3, #0
 800278e:	d01b      	beq.n	80027c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f06f 0208 	mvn.w	r2, #8
 8002798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2204      	movs	r2, #4
 800279e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f94c 	bl	8002a4c <HAL_TIM_IC_CaptureCallback>
 80027b4:	e005      	b.n	80027c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f93f 	bl	8002a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f94e 	bl	8002a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	f003 0310 	and.w	r3, r3, #16
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d020      	beq.n	8002814 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f003 0310 	and.w	r3, r3, #16
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d01b      	beq.n	8002814 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f06f 0210 	mvn.w	r2, #16
 80027e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2208      	movs	r2, #8
 80027ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f926 	bl	8002a4c <HAL_TIM_IC_CaptureCallback>
 8002800:	e005      	b.n	800280e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f919 	bl	8002a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f928 	bl	8002a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00c      	beq.n	8002838 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d007      	beq.n	8002838 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f06f 0201 	mvn.w	r2, #1
 8002830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7fe f87c 	bl	8000930 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00c      	beq.n	800285c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002848:	2b00      	cmp	r3, #0
 800284a:	d007      	beq.n	800285c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 fa7f 	bl	8002d5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00c      	beq.n	8002880 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800286c:	2b00      	cmp	r3, #0
 800286e:	d007      	beq.n	8002880 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f8f8 	bl	8002a70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	f003 0320 	and.w	r3, r3, #32
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00c      	beq.n	80028a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f003 0320 	and.w	r3, r3, #32
 8002890:	2b00      	cmp	r3, #0
 8002892:	d007      	beq.n	80028a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f06f 0220 	mvn.w	r2, #32
 800289c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 fa52 	bl	8002d48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028a4:	bf00      	nop
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_TIM_ConfigClockSource+0x1c>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e0b4      	b.n	8002a32 <HAL_TIM_ConfigClockSource+0x186>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80028e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80028ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002900:	d03e      	beq.n	8002980 <HAL_TIM_ConfigClockSource+0xd4>
 8002902:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002906:	f200 8087 	bhi.w	8002a18 <HAL_TIM_ConfigClockSource+0x16c>
 800290a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800290e:	f000 8086 	beq.w	8002a1e <HAL_TIM_ConfigClockSource+0x172>
 8002912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002916:	d87f      	bhi.n	8002a18 <HAL_TIM_ConfigClockSource+0x16c>
 8002918:	2b70      	cmp	r3, #112	@ 0x70
 800291a:	d01a      	beq.n	8002952 <HAL_TIM_ConfigClockSource+0xa6>
 800291c:	2b70      	cmp	r3, #112	@ 0x70
 800291e:	d87b      	bhi.n	8002a18 <HAL_TIM_ConfigClockSource+0x16c>
 8002920:	2b60      	cmp	r3, #96	@ 0x60
 8002922:	d050      	beq.n	80029c6 <HAL_TIM_ConfigClockSource+0x11a>
 8002924:	2b60      	cmp	r3, #96	@ 0x60
 8002926:	d877      	bhi.n	8002a18 <HAL_TIM_ConfigClockSource+0x16c>
 8002928:	2b50      	cmp	r3, #80	@ 0x50
 800292a:	d03c      	beq.n	80029a6 <HAL_TIM_ConfigClockSource+0xfa>
 800292c:	2b50      	cmp	r3, #80	@ 0x50
 800292e:	d873      	bhi.n	8002a18 <HAL_TIM_ConfigClockSource+0x16c>
 8002930:	2b40      	cmp	r3, #64	@ 0x40
 8002932:	d058      	beq.n	80029e6 <HAL_TIM_ConfigClockSource+0x13a>
 8002934:	2b40      	cmp	r3, #64	@ 0x40
 8002936:	d86f      	bhi.n	8002a18 <HAL_TIM_ConfigClockSource+0x16c>
 8002938:	2b30      	cmp	r3, #48	@ 0x30
 800293a:	d064      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0x15a>
 800293c:	2b30      	cmp	r3, #48	@ 0x30
 800293e:	d86b      	bhi.n	8002a18 <HAL_TIM_ConfigClockSource+0x16c>
 8002940:	2b20      	cmp	r3, #32
 8002942:	d060      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0x15a>
 8002944:	2b20      	cmp	r3, #32
 8002946:	d867      	bhi.n	8002a18 <HAL_TIM_ConfigClockSource+0x16c>
 8002948:	2b00      	cmp	r3, #0
 800294a:	d05c      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0x15a>
 800294c:	2b10      	cmp	r3, #16
 800294e:	d05a      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0x15a>
 8002950:	e062      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002962:	f000 f974 	bl	8002c4e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002974:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	609a      	str	r2, [r3, #8]
      break;
 800297e:	e04f      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002990:	f000 f95d 	bl	8002c4e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029a2:	609a      	str	r2, [r3, #8]
      break;
 80029a4:	e03c      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029b2:	461a      	mov	r2, r3
 80029b4:	f000 f8d4 	bl	8002b60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2150      	movs	r1, #80	@ 0x50
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 f92b 	bl	8002c1a <TIM_ITRx_SetConfig>
      break;
 80029c4:	e02c      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029d2:	461a      	mov	r2, r3
 80029d4:	f000 f8f2 	bl	8002bbc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2160      	movs	r1, #96	@ 0x60
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 f91b 	bl	8002c1a <TIM_ITRx_SetConfig>
      break;
 80029e4:	e01c      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029f2:	461a      	mov	r2, r3
 80029f4:	f000 f8b4 	bl	8002b60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2140      	movs	r1, #64	@ 0x40
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 f90b 	bl	8002c1a <TIM_ITRx_SetConfig>
      break;
 8002a04:	e00c      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4610      	mov	r0, r2
 8002a12:	f000 f902 	bl	8002c1a <TIM_ITRx_SetConfig>
      break;
 8002a16:	e003      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a1c:	e000      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr

08002a5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr
	...

08002a84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a2f      	ldr	r2, [pc, #188]	@ (8002b54 <TIM_Base_SetConfig+0xd0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d00b      	beq.n	8002ab4 <TIM_Base_SetConfig+0x30>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aa2:	d007      	beq.n	8002ab4 <TIM_Base_SetConfig+0x30>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a2c      	ldr	r2, [pc, #176]	@ (8002b58 <TIM_Base_SetConfig+0xd4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d003      	beq.n	8002ab4 <TIM_Base_SetConfig+0x30>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a2b      	ldr	r2, [pc, #172]	@ (8002b5c <TIM_Base_SetConfig+0xd8>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d108      	bne.n	8002ac6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002aba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a22      	ldr	r2, [pc, #136]	@ (8002b54 <TIM_Base_SetConfig+0xd0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d00b      	beq.n	8002ae6 <TIM_Base_SetConfig+0x62>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ad4:	d007      	beq.n	8002ae6 <TIM_Base_SetConfig+0x62>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a1f      	ldr	r2, [pc, #124]	@ (8002b58 <TIM_Base_SetConfig+0xd4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d003      	beq.n	8002ae6 <TIM_Base_SetConfig+0x62>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a1e      	ldr	r2, [pc, #120]	@ (8002b5c <TIM_Base_SetConfig+0xd8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d108      	bne.n	8002af8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a0d      	ldr	r2, [pc, #52]	@ (8002b54 <TIM_Base_SetConfig+0xd0>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d103      	bne.n	8002b2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d005      	beq.n	8002b4a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f023 0201 	bic.w	r2, r3, #1
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	611a      	str	r2, [r3, #16]
  }
}
 8002b4a:	bf00      	nop
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	40012c00 	.word	0x40012c00
 8002b58:	40000400 	.word	0x40000400
 8002b5c:	40000800 	.word	0x40000800

08002b60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	f023 0201 	bic.w	r2, r3, #1
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f023 030a 	bic.w	r3, r3, #10
 8002b9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	621a      	str	r2, [r3, #32]
}
 8002bb2:	bf00      	nop
 8002bb4:	371c      	adds	r7, #28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr

08002bbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	f023 0210 	bic.w	r2, r3, #16
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	031b      	lsls	r3, r3, #12
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002bf8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	621a      	str	r2, [r3, #32]
}
 8002c10:	bf00      	nop
 8002c12:	371c      	adds	r7, #28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b085      	sub	sp, #20
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f043 0307 	orr.w	r3, r3, #7
 8002c3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	609a      	str	r2, [r3, #8]
}
 8002c44:	bf00      	nop
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr

08002c4e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b087      	sub	sp, #28
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	607a      	str	r2, [r7, #4]
 8002c5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c68:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	021a      	lsls	r2, r3, #8
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	431a      	orrs	r2, r3
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	609a      	str	r2, [r3, #8]
}
 8002c82:	bf00      	nop
 8002c84:	371c      	adds	r7, #28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr

08002c8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e046      	b.n	8002d32 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a16      	ldr	r2, [pc, #88]	@ (8002d3c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d00e      	beq.n	8002d06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cf0:	d009      	beq.n	8002d06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a12      	ldr	r2, [pc, #72]	@ (8002d40 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d004      	beq.n	8002d06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a10      	ldr	r2, [pc, #64]	@ (8002d44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d10c      	bne.n	8002d20 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr
 8002d3c:	40012c00 	.word	0x40012c00
 8002d40:	40000400 	.word	0x40000400
 8002d44:	40000800 	.word	0x40000800

08002d48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr

08002d5a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr

08002d6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e042      	b.n	8002e04 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d106      	bne.n	8002d98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7fd fe78 	bl	8000a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2224      	movs	r2, #36	@ 0x24
 8002d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002dae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f971 	bl	8003098 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002dc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695a      	ldr	r2, [r3, #20]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002dd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002de4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2220      	movs	r2, #32
 8002df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08a      	sub	sp, #40	@ 0x28
 8002e10:	af02      	add	r7, sp, #8
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b20      	cmp	r3, #32
 8002e2a:	d175      	bne.n	8002f18 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <HAL_UART_Transmit+0x2c>
 8002e32:	88fb      	ldrh	r3, [r7, #6]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e06e      	b.n	8002f1a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2221      	movs	r2, #33	@ 0x21
 8002e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e4a:	f7fd ffff 	bl	8000e4c <HAL_GetTick>
 8002e4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	88fa      	ldrh	r2, [r7, #6]
 8002e54:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	88fa      	ldrh	r2, [r7, #6]
 8002e5a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e64:	d108      	bne.n	8002e78 <HAL_UART_Transmit+0x6c>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d104      	bne.n	8002e78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	61bb      	str	r3, [r7, #24]
 8002e76:	e003      	b.n	8002e80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e80:	e02e      	b.n	8002ee0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2180      	movs	r1, #128	@ 0x80
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 f848 	bl	8002f22 <UART_WaitOnFlagUntilTimeout>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e03a      	b.n	8002f1a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10b      	bne.n	8002ec2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eb8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	3302      	adds	r3, #2
 8002ebe:	61bb      	str	r3, [r7, #24]
 8002ec0:	e007      	b.n	8002ed2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	781a      	ldrb	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1cb      	bne.n	8002e82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2140      	movs	r1, #64	@ 0x40
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 f814 	bl	8002f22 <UART_WaitOnFlagUntilTimeout>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e006      	b.n	8002f1a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002f14:	2300      	movs	r3, #0
 8002f16:	e000      	b.n	8002f1a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f18:	2302      	movs	r3, #2
  }
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3720      	adds	r7, #32
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b086      	sub	sp, #24
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	603b      	str	r3, [r7, #0]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f32:	e03b      	b.n	8002fac <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3a:	d037      	beq.n	8002fac <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f3c:	f7fd ff86 	bl	8000e4c <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	6a3a      	ldr	r2, [r7, #32]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d302      	bcc.n	8002f52 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e03a      	b.n	8002fcc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d023      	beq.n	8002fac <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2b80      	cmp	r3, #128	@ 0x80
 8002f68:	d020      	beq.n	8002fac <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2b40      	cmp	r3, #64	@ 0x40
 8002f6e:	d01d      	beq.n	8002fac <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d116      	bne.n	8002fac <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	617b      	str	r3, [r7, #20]
 8002f92:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 f81d 	bl	8002fd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2208      	movs	r2, #8
 8002f9e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e00f      	b.n	8002fcc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	bf0c      	ite	eq
 8002fbc:	2301      	moveq	r3, #1
 8002fbe:	2300      	movne	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d0b4      	beq.n	8002f34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b095      	sub	sp, #84	@ 0x54
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	330c      	adds	r3, #12
 8002fe2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe6:	e853 3f00 	ldrex	r3, [r3]
 8002fea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	330c      	adds	r3, #12
 8002ffa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ffc:	643a      	str	r2, [r7, #64]	@ 0x40
 8002ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003000:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003002:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003004:	e841 2300 	strex	r3, r2, [r1]
 8003008:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800300a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1e5      	bne.n	8002fdc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	3314      	adds	r3, #20
 8003016:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	e853 3f00 	ldrex	r3, [r3]
 800301e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f023 0301 	bic.w	r3, r3, #1
 8003026:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	3314      	adds	r3, #20
 800302e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003030:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003032:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003034:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003036:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003038:	e841 2300 	strex	r3, r2, [r1]
 800303c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800303e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1e5      	bne.n	8003010 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003048:	2b01      	cmp	r3, #1
 800304a:	d119      	bne.n	8003080 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	330c      	adds	r3, #12
 8003052:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	e853 3f00 	ldrex	r3, [r3]
 800305a:	60bb      	str	r3, [r7, #8]
   return(result);
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	f023 0310 	bic.w	r3, r3, #16
 8003062:	647b      	str	r3, [r7, #68]	@ 0x44
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	330c      	adds	r3, #12
 800306a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800306c:	61ba      	str	r2, [r7, #24]
 800306e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003070:	6979      	ldr	r1, [r7, #20]
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	e841 2300 	strex	r3, r2, [r1]
 8003078:	613b      	str	r3, [r7, #16]
   return(result);
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1e5      	bne.n	800304c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800308e:	bf00      	nop
 8003090:	3754      	adds	r7, #84	@ 0x54
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr

08003098 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80030d2:	f023 030c 	bic.w	r3, r3, #12
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6812      	ldr	r2, [r2, #0]
 80030da:	68b9      	ldr	r1, [r7, #8]
 80030dc:	430b      	orrs	r3, r1
 80030de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699a      	ldr	r2, [r3, #24]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a2c      	ldr	r2, [pc, #176]	@ (80031ac <UART_SetConfig+0x114>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d103      	bne.n	8003108 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003100:	f7ff f9e0 	bl	80024c4 <HAL_RCC_GetPCLK2Freq>
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	e002      	b.n	800310e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003108:	f7ff f9c8 	bl	800249c <HAL_RCC_GetPCLK1Freq>
 800310c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	009a      	lsls	r2, r3, #2
 8003118:	441a      	add	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	fbb2 f3f3 	udiv	r3, r2, r3
 8003124:	4a22      	ldr	r2, [pc, #136]	@ (80031b0 <UART_SetConfig+0x118>)
 8003126:	fba2 2303 	umull	r2, r3, r2, r3
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	0119      	lsls	r1, r3, #4
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	009a      	lsls	r2, r3, #2
 8003138:	441a      	add	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	fbb2 f2f3 	udiv	r2, r2, r3
 8003144:	4b1a      	ldr	r3, [pc, #104]	@ (80031b0 <UART_SetConfig+0x118>)
 8003146:	fba3 0302 	umull	r0, r3, r3, r2
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	2064      	movs	r0, #100	@ 0x64
 800314e:	fb00 f303 	mul.w	r3, r0, r3
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	3332      	adds	r3, #50	@ 0x32
 8003158:	4a15      	ldr	r2, [pc, #84]	@ (80031b0 <UART_SetConfig+0x118>)
 800315a:	fba2 2303 	umull	r2, r3, r2, r3
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003164:	4419      	add	r1, r3
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	009a      	lsls	r2, r3, #2
 8003170:	441a      	add	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	fbb2 f2f3 	udiv	r2, r2, r3
 800317c:	4b0c      	ldr	r3, [pc, #48]	@ (80031b0 <UART_SetConfig+0x118>)
 800317e:	fba3 0302 	umull	r0, r3, r3, r2
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	2064      	movs	r0, #100	@ 0x64
 8003186:	fb00 f303 	mul.w	r3, r0, r3
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	3332      	adds	r3, #50	@ 0x32
 8003190:	4a07      	ldr	r2, [pc, #28]	@ (80031b0 <UART_SetConfig+0x118>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	f003 020f 	and.w	r2, r3, #15
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	440a      	add	r2, r1
 80031a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031a4:	bf00      	nop
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40013800 	.word	0x40013800
 80031b0:	51eb851f 	.word	0x51eb851f

080031b4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80031c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031c6:	2b84      	cmp	r3, #132	@ 0x84
 80031c8:	d005      	beq.n	80031d6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80031ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4413      	add	r3, r2
 80031d2:	3303      	adds	r3, #3
 80031d4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80031d6:	68fb      	ldr	r3, [r7, #12]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr

080031e2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80031e6:	f000 fadf 	bl	80037a8 <vTaskStartScheduler>
  
  return osOK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80031f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031f2:	b089      	sub	sp, #36	@ 0x24
 80031f4:	af04      	add	r7, sp, #16
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d020      	beq.n	8003244 <osThreadCreate+0x54>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d01c      	beq.n	8003244 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685c      	ldr	r4, [r3, #4]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691e      	ldr	r6, [r3, #16]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff ffc9 	bl	80031b4 <makeFreeRtosPriority>
 8003222:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800322c:	9202      	str	r2, [sp, #8]
 800322e:	9301      	str	r3, [sp, #4]
 8003230:	9100      	str	r1, [sp, #0]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	4632      	mov	r2, r6
 8003236:	4629      	mov	r1, r5
 8003238:	4620      	mov	r0, r4
 800323a:	f000 f8e8 	bl	800340e <xTaskCreateStatic>
 800323e:	4603      	mov	r3, r0
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	e01c      	b.n	800327e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685c      	ldr	r4, [r3, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003250:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff ffab 	bl	80031b4 <makeFreeRtosPriority>
 800325e:	4602      	mov	r2, r0
 8003260:	f107 030c 	add.w	r3, r7, #12
 8003264:	9301      	str	r3, [sp, #4]
 8003266:	9200      	str	r2, [sp, #0]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	4632      	mov	r2, r6
 800326c:	4629      	mov	r1, r5
 800326e:	4620      	mov	r0, r4
 8003270:	f000 f92d 	bl	80034ce <xTaskCreate>
 8003274:	4603      	mov	r3, r0
 8003276:	2b01      	cmp	r3, #1
 8003278:	d001      	beq.n	800327e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800327a:	2300      	movs	r3, #0
 800327c:	e000      	b.n	8003280 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800327e:	68fb      	ldr	r3, [r7, #12]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003288 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <osDelay+0x16>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	e000      	b.n	80032a0 <osDelay+0x18>
 800329e:	2301      	movs	r3, #1
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 fa4b 	bl	800373c <vTaskDelay>
  
  return osOK;
 80032a6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f103 0208 	add.w	r2, r3, #8
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f04f 32ff 	mov.w	r2, #4294967295
 80032c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f103 0208 	add.w	r2, r3, #8
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f103 0208 	add.w	r2, r3, #8
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr

080032ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr

08003306 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003306:	b480      	push	{r7}
 8003308:	b085      	sub	sp, #20
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	1c5a      	adds	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	601a      	str	r2, [r3, #0]
}
 8003342:	bf00      	nop
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003362:	d103      	bne.n	800336c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	e00c      	b.n	8003386 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3308      	adds	r3, #8
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	e002      	b.n	800337a <vListInsert+0x2e>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	429a      	cmp	r2, r3
 8003384:	d2f6      	bcs.n	8003374 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	601a      	str	r2, [r3, #0]
}
 80033b2:	bf00      	nop
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr

080033bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6892      	ldr	r2, [r2, #8]
 80033d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6852      	ldr	r2, [r2, #4]
 80033dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d103      	bne.n	80033f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	1e5a      	subs	r2, r3, #1
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr

0800340e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800340e:	b580      	push	{r7, lr}
 8003410:	b08e      	sub	sp, #56	@ 0x38
 8003412:	af04      	add	r7, sp, #16
 8003414:	60f8      	str	r0, [r7, #12]
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800341c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10b      	bne.n	800343a <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003426:	f383 8811 	msr	BASEPRI, r3
 800342a:	f3bf 8f6f 	isb	sy
 800342e:	f3bf 8f4f 	dsb	sy
 8003432:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003434:	bf00      	nop
 8003436:	bf00      	nop
 8003438:	e7fd      	b.n	8003436 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800343a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10b      	bne.n	8003458 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003444:	f383 8811 	msr	BASEPRI, r3
 8003448:	f3bf 8f6f 	isb	sy
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	61fb      	str	r3, [r7, #28]
}
 8003452:	bf00      	nop
 8003454:	bf00      	nop
 8003456:	e7fd      	b.n	8003454 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003458:	2354      	movs	r3, #84	@ 0x54
 800345a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	2b54      	cmp	r3, #84	@ 0x54
 8003460:	d00b      	beq.n	800347a <xTaskCreateStatic+0x6c>
	__asm volatile
 8003462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003466:	f383 8811 	msr	BASEPRI, r3
 800346a:	f3bf 8f6f 	isb	sy
 800346e:	f3bf 8f4f 	dsb	sy
 8003472:	61bb      	str	r3, [r7, #24]
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop
 8003478:	e7fd      	b.n	8003476 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800347a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800347c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800347e:	2b00      	cmp	r3, #0
 8003480:	d01e      	beq.n	80034c0 <xTaskCreateStatic+0xb2>
 8003482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003484:	2b00      	cmp	r3, #0
 8003486:	d01b      	beq.n	80034c0 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800348a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800348c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003490:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003494:	2202      	movs	r2, #2
 8003496:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800349a:	2300      	movs	r3, #0
 800349c:	9303      	str	r3, [sp, #12]
 800349e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a0:	9302      	str	r3, [sp, #8]
 80034a2:	f107 0314 	add.w	r3, r7, #20
 80034a6:	9301      	str	r3, [sp, #4]
 80034a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	68b9      	ldr	r1, [r7, #8]
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 f850 	bl	8003558 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80034ba:	f000 f8d5 	bl	8003668 <prvAddNewTaskToReadyList>
 80034be:	e001      	b.n	80034c4 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80034c4:	697b      	ldr	r3, [r7, #20]
	}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3728      	adds	r7, #40	@ 0x28
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b08c      	sub	sp, #48	@ 0x30
 80034d2:	af04      	add	r7, sp, #16
 80034d4:	60f8      	str	r0, [r7, #12]
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	603b      	str	r3, [r7, #0]
 80034da:	4613      	mov	r3, r2
 80034dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fe74 	bl	80041d0 <pvPortMalloc>
 80034e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00e      	beq.n	800350e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80034f0:	2054      	movs	r0, #84	@ 0x54
 80034f2:	f000 fe6d 	bl	80041d0 <pvPortMalloc>
 80034f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	631a      	str	r2, [r3, #48]	@ 0x30
 8003504:	e005      	b.n	8003512 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003506:	6978      	ldr	r0, [r7, #20]
 8003508:	f000 ff30 	bl	800436c <vPortFree>
 800350c:	e001      	b.n	8003512 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d017      	beq.n	8003548 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003520:	88fa      	ldrh	r2, [r7, #6]
 8003522:	2300      	movs	r3, #0
 8003524:	9303      	str	r3, [sp, #12]
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	9302      	str	r3, [sp, #8]
 800352a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800352c:	9301      	str	r3, [sp, #4]
 800352e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68b9      	ldr	r1, [r7, #8]
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 f80e 	bl	8003558 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800353c:	69f8      	ldr	r0, [r7, #28]
 800353e:	f000 f893 	bl	8003668 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003542:	2301      	movs	r3, #1
 8003544:	61bb      	str	r3, [r7, #24]
 8003546:	e002      	b.n	800354e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003548:	f04f 33ff 	mov.w	r3, #4294967295
 800354c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800354e:	69bb      	ldr	r3, [r7, #24]
	}
 8003550:	4618      	mov	r0, r3
 8003552:	3720      	adds	r7, #32
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
 8003564:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003568:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003570:	3b01      	subs	r3, #1
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	f023 0307 	bic.w	r3, r3, #7
 800357e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00b      	beq.n	80035a2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800358a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800358e:	f383 8811 	msr	BASEPRI, r3
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	617b      	str	r3, [r7, #20]
}
 800359c:	bf00      	nop
 800359e:	bf00      	nop
 80035a0:	e7fd      	b.n	800359e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d01f      	beq.n	80035e8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035a8:	2300      	movs	r3, #0
 80035aa:	61fb      	str	r3, [r7, #28]
 80035ac:	e012      	b.n	80035d4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	4413      	add	r3, r2
 80035b4:	7819      	ldrb	r1, [r3, #0]
 80035b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	4413      	add	r3, r2
 80035bc:	3334      	adds	r3, #52	@ 0x34
 80035be:	460a      	mov	r2, r1
 80035c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	4413      	add	r3, r2
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d006      	beq.n	80035dc <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3301      	adds	r3, #1
 80035d2:	61fb      	str	r3, [r7, #28]
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	2b0f      	cmp	r3, #15
 80035d8:	d9e9      	bls.n	80035ae <prvInitialiseNewTask+0x56>
 80035da:	e000      	b.n	80035de <prvInitialiseNewTask+0x86>
			{
				break;
 80035dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80035de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035e6:	e003      	b.n	80035f0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80035e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80035f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f2:	2b06      	cmp	r3, #6
 80035f4:	d901      	bls.n	80035fa <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80035f6:	2306      	movs	r3, #6
 80035f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80035fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003602:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003604:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003608:	2200      	movs	r2, #0
 800360a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800360c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800360e:	3304      	adds	r3, #4
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff fe6c 	bl	80032ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003618:	3318      	adds	r3, #24
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff fe67 	bl	80032ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003622:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003624:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003628:	f1c3 0207 	rsb	r2, r3, #7
 800362c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003632:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003634:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003638:	2200      	movs	r2, #0
 800363a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800363c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	68f9      	ldr	r1, [r7, #12]
 8003648:	69b8      	ldr	r0, [r7, #24]
 800364a:	f000 fc0d 	bl	8003e68 <pxPortInitialiseStack>
 800364e:	4602      	mov	r2, r0
 8003650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003652:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800365a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800365c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800365e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003660:	bf00      	nop
 8003662:	3720      	adds	r7, #32
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003670:	f000 fcec 	bl	800404c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003674:	4b2a      	ldr	r3, [pc, #168]	@ (8003720 <prvAddNewTaskToReadyList+0xb8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3301      	adds	r3, #1
 800367a:	4a29      	ldr	r2, [pc, #164]	@ (8003720 <prvAddNewTaskToReadyList+0xb8>)
 800367c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800367e:	4b29      	ldr	r3, [pc, #164]	@ (8003724 <prvAddNewTaskToReadyList+0xbc>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d109      	bne.n	800369a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003686:	4a27      	ldr	r2, [pc, #156]	@ (8003724 <prvAddNewTaskToReadyList+0xbc>)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800368c:	4b24      	ldr	r3, [pc, #144]	@ (8003720 <prvAddNewTaskToReadyList+0xb8>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d110      	bne.n	80036b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003694:	f000 fac4 	bl	8003c20 <prvInitialiseTaskLists>
 8003698:	e00d      	b.n	80036b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800369a:	4b23      	ldr	r3, [pc, #140]	@ (8003728 <prvAddNewTaskToReadyList+0xc0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d109      	bne.n	80036b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036a2:	4b20      	ldr	r3, [pc, #128]	@ (8003724 <prvAddNewTaskToReadyList+0xbc>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d802      	bhi.n	80036b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80036b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003724 <prvAddNewTaskToReadyList+0xbc>)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80036b6:	4b1d      	ldr	r3, [pc, #116]	@ (800372c <prvAddNewTaskToReadyList+0xc4>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	3301      	adds	r3, #1
 80036bc:	4a1b      	ldr	r2, [pc, #108]	@ (800372c <prvAddNewTaskToReadyList+0xc4>)
 80036be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c4:	2201      	movs	r2, #1
 80036c6:	409a      	lsls	r2, r3
 80036c8:	4b19      	ldr	r3, [pc, #100]	@ (8003730 <prvAddNewTaskToReadyList+0xc8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	4a18      	ldr	r2, [pc, #96]	@ (8003730 <prvAddNewTaskToReadyList+0xc8>)
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4a15      	ldr	r2, [pc, #84]	@ (8003734 <prvAddNewTaskToReadyList+0xcc>)
 80036e0:	441a      	add	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3304      	adds	r3, #4
 80036e6:	4619      	mov	r1, r3
 80036e8:	4610      	mov	r0, r2
 80036ea:	f7ff fe0c 	bl	8003306 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80036ee:	f000 fcdd 	bl	80040ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80036f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003728 <prvAddNewTaskToReadyList+0xc0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00e      	beq.n	8003718 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80036fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003724 <prvAddNewTaskToReadyList+0xbc>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003704:	429a      	cmp	r2, r3
 8003706:	d207      	bcs.n	8003718 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003708:	4b0b      	ldr	r3, [pc, #44]	@ (8003738 <prvAddNewTaskToReadyList+0xd0>)
 800370a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	f3bf 8f4f 	dsb	sy
 8003714:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	20000520 	.word	0x20000520
 8003724:	20000420 	.word	0x20000420
 8003728:	2000052c 	.word	0x2000052c
 800372c:	2000053c 	.word	0x2000053c
 8003730:	20000528 	.word	0x20000528
 8003734:	20000424 	.word	0x20000424
 8003738:	e000ed04 	.word	0xe000ed04

0800373c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003744:	2300      	movs	r3, #0
 8003746:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d018      	beq.n	8003780 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800374e:	4b14      	ldr	r3, [pc, #80]	@ (80037a0 <vTaskDelay+0x64>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00b      	beq.n	800376e <vTaskDelay+0x32>
	__asm volatile
 8003756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800375a:	f383 8811 	msr	BASEPRI, r3
 800375e:	f3bf 8f6f 	isb	sy
 8003762:	f3bf 8f4f 	dsb	sy
 8003766:	60bb      	str	r3, [r7, #8]
}
 8003768:	bf00      	nop
 800376a:	bf00      	nop
 800376c:	e7fd      	b.n	800376a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800376e:	f000 f87d 	bl	800386c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003772:	2100      	movs	r1, #0
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 fb11 	bl	8003d9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800377a:	f000 f885 	bl	8003888 <xTaskResumeAll>
 800377e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d107      	bne.n	8003796 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003786:	4b07      	ldr	r3, [pc, #28]	@ (80037a4 <vTaskDelay+0x68>)
 8003788:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	f3bf 8f4f 	dsb	sy
 8003792:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003796:	bf00      	nop
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000548 	.word	0x20000548
 80037a4:	e000ed04 	.word	0xe000ed04

080037a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08a      	sub	sp, #40	@ 0x28
 80037ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80037b2:	2300      	movs	r3, #0
 80037b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80037b6:	463a      	mov	r2, r7
 80037b8:	1d39      	adds	r1, r7, #4
 80037ba:	f107 0308 	add.w	r3, r7, #8
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fc fd9e 	bl	8000300 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80037c4:	6839      	ldr	r1, [r7, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	9202      	str	r2, [sp, #8]
 80037cc:	9301      	str	r3, [sp, #4]
 80037ce:	2300      	movs	r3, #0
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	2300      	movs	r3, #0
 80037d4:	460a      	mov	r2, r1
 80037d6:	491f      	ldr	r1, [pc, #124]	@ (8003854 <vTaskStartScheduler+0xac>)
 80037d8:	481f      	ldr	r0, [pc, #124]	@ (8003858 <vTaskStartScheduler+0xb0>)
 80037da:	f7ff fe18 	bl	800340e <xTaskCreateStatic>
 80037de:	4603      	mov	r3, r0
 80037e0:	4a1e      	ldr	r2, [pc, #120]	@ (800385c <vTaskStartScheduler+0xb4>)
 80037e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80037e4:	4b1d      	ldr	r3, [pc, #116]	@ (800385c <vTaskStartScheduler+0xb4>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d002      	beq.n	80037f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80037ec:	2301      	movs	r3, #1
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	e001      	b.n	80037f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d116      	bne.n	800382a <vTaskStartScheduler+0x82>
	__asm volatile
 80037fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	613b      	str	r3, [r7, #16]
}
 800380e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003810:	4b13      	ldr	r3, [pc, #76]	@ (8003860 <vTaskStartScheduler+0xb8>)
 8003812:	f04f 32ff 	mov.w	r2, #4294967295
 8003816:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003818:	4b12      	ldr	r3, [pc, #72]	@ (8003864 <vTaskStartScheduler+0xbc>)
 800381a:	2201      	movs	r2, #1
 800381c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800381e:	4b12      	ldr	r3, [pc, #72]	@ (8003868 <vTaskStartScheduler+0xc0>)
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003824:	f000 fba0 	bl	8003f68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003828:	e00f      	b.n	800384a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d10b      	bne.n	800384a <vTaskStartScheduler+0xa2>
	__asm volatile
 8003832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003836:	f383 8811 	msr	BASEPRI, r3
 800383a:	f3bf 8f6f 	isb	sy
 800383e:	f3bf 8f4f 	dsb	sy
 8003842:	60fb      	str	r3, [r7, #12]
}
 8003844:	bf00      	nop
 8003846:	bf00      	nop
 8003848:	e7fd      	b.n	8003846 <vTaskStartScheduler+0x9e>
}
 800384a:	bf00      	nop
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	080059a4 	.word	0x080059a4
 8003858:	08003bf1 	.word	0x08003bf1
 800385c:	20000544 	.word	0x20000544
 8003860:	20000540 	.word	0x20000540
 8003864:	2000052c 	.word	0x2000052c
 8003868:	20000524 	.word	0x20000524

0800386c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003870:	4b04      	ldr	r3, [pc, #16]	@ (8003884 <vTaskSuspendAll+0x18>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3301      	adds	r3, #1
 8003876:	4a03      	ldr	r2, [pc, #12]	@ (8003884 <vTaskSuspendAll+0x18>)
 8003878:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800387a:	bf00      	nop
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20000548 	.word	0x20000548

08003888 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003892:	2300      	movs	r3, #0
 8003894:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003896:	4b42      	ldr	r3, [pc, #264]	@ (80039a0 <xTaskResumeAll+0x118>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10b      	bne.n	80038b6 <xTaskResumeAll+0x2e>
	__asm volatile
 800389e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a2:	f383 8811 	msr	BASEPRI, r3
 80038a6:	f3bf 8f6f 	isb	sy
 80038aa:	f3bf 8f4f 	dsb	sy
 80038ae:	603b      	str	r3, [r7, #0]
}
 80038b0:	bf00      	nop
 80038b2:	bf00      	nop
 80038b4:	e7fd      	b.n	80038b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80038b6:	f000 fbc9 	bl	800404c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80038ba:	4b39      	ldr	r3, [pc, #228]	@ (80039a0 <xTaskResumeAll+0x118>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	3b01      	subs	r3, #1
 80038c0:	4a37      	ldr	r2, [pc, #220]	@ (80039a0 <xTaskResumeAll+0x118>)
 80038c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038c4:	4b36      	ldr	r3, [pc, #216]	@ (80039a0 <xTaskResumeAll+0x118>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d161      	bne.n	8003990 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80038cc:	4b35      	ldr	r3, [pc, #212]	@ (80039a4 <xTaskResumeAll+0x11c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d05d      	beq.n	8003990 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038d4:	e02e      	b.n	8003934 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038d6:	4b34      	ldr	r3, [pc, #208]	@ (80039a8 <xTaskResumeAll+0x120>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	3318      	adds	r3, #24
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff fd6a 	bl	80033bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	3304      	adds	r3, #4
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fd65 	bl	80033bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f6:	2201      	movs	r2, #1
 80038f8:	409a      	lsls	r2, r3
 80038fa:	4b2c      	ldr	r3, [pc, #176]	@ (80039ac <xTaskResumeAll+0x124>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4313      	orrs	r3, r2
 8003900:	4a2a      	ldr	r2, [pc, #168]	@ (80039ac <xTaskResumeAll+0x124>)
 8003902:	6013      	str	r3, [r2, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003908:	4613      	mov	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4a27      	ldr	r2, [pc, #156]	@ (80039b0 <xTaskResumeAll+0x128>)
 8003912:	441a      	add	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	3304      	adds	r3, #4
 8003918:	4619      	mov	r1, r3
 800391a:	4610      	mov	r0, r2
 800391c:	f7ff fcf3 	bl	8003306 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003924:	4b23      	ldr	r3, [pc, #140]	@ (80039b4 <xTaskResumeAll+0x12c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392a:	429a      	cmp	r2, r3
 800392c:	d302      	bcc.n	8003934 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800392e:	4b22      	ldr	r3, [pc, #136]	@ (80039b8 <xTaskResumeAll+0x130>)
 8003930:	2201      	movs	r2, #1
 8003932:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003934:	4b1c      	ldr	r3, [pc, #112]	@ (80039a8 <xTaskResumeAll+0x120>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1cc      	bne.n	80038d6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003942:	f000 fa0b 	bl	8003d5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003946:	4b1d      	ldr	r3, [pc, #116]	@ (80039bc <xTaskResumeAll+0x134>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d010      	beq.n	8003974 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003952:	f000 f837 	bl	80039c4 <xTaskIncrementTick>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800395c:	4b16      	ldr	r3, [pc, #88]	@ (80039b8 <xTaskResumeAll+0x130>)
 800395e:	2201      	movs	r2, #1
 8003960:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3b01      	subs	r3, #1
 8003966:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f1      	bne.n	8003952 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800396e:	4b13      	ldr	r3, [pc, #76]	@ (80039bc <xTaskResumeAll+0x134>)
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003974:	4b10      	ldr	r3, [pc, #64]	@ (80039b8 <xTaskResumeAll+0x130>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d009      	beq.n	8003990 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800397c:	2301      	movs	r3, #1
 800397e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003980:	4b0f      	ldr	r3, [pc, #60]	@ (80039c0 <xTaskResumeAll+0x138>)
 8003982:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003990:	f000 fb8c 	bl	80040ac <vPortExitCritical>

	return xAlreadyYielded;
 8003994:	68bb      	ldr	r3, [r7, #8]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20000548 	.word	0x20000548
 80039a4:	20000520 	.word	0x20000520
 80039a8:	200004e0 	.word	0x200004e0
 80039ac:	20000528 	.word	0x20000528
 80039b0:	20000424 	.word	0x20000424
 80039b4:	20000420 	.word	0x20000420
 80039b8:	20000534 	.word	0x20000534
 80039bc:	20000530 	.word	0x20000530
 80039c0:	e000ed04 	.word	0xe000ed04

080039c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039ce:	4b4f      	ldr	r3, [pc, #316]	@ (8003b0c <xTaskIncrementTick+0x148>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f040 808f 	bne.w	8003af6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80039d8:	4b4d      	ldr	r3, [pc, #308]	@ (8003b10 <xTaskIncrementTick+0x14c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3301      	adds	r3, #1
 80039de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80039e0:	4a4b      	ldr	r2, [pc, #300]	@ (8003b10 <xTaskIncrementTick+0x14c>)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d121      	bne.n	8003a30 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80039ec:	4b49      	ldr	r3, [pc, #292]	@ (8003b14 <xTaskIncrementTick+0x150>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00b      	beq.n	8003a0e <xTaskIncrementTick+0x4a>
	__asm volatile
 80039f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039fa:	f383 8811 	msr	BASEPRI, r3
 80039fe:	f3bf 8f6f 	isb	sy
 8003a02:	f3bf 8f4f 	dsb	sy
 8003a06:	603b      	str	r3, [r7, #0]
}
 8003a08:	bf00      	nop
 8003a0a:	bf00      	nop
 8003a0c:	e7fd      	b.n	8003a0a <xTaskIncrementTick+0x46>
 8003a0e:	4b41      	ldr	r3, [pc, #260]	@ (8003b14 <xTaskIncrementTick+0x150>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	4b40      	ldr	r3, [pc, #256]	@ (8003b18 <xTaskIncrementTick+0x154>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a3e      	ldr	r2, [pc, #248]	@ (8003b14 <xTaskIncrementTick+0x150>)
 8003a1a:	6013      	str	r3, [r2, #0]
 8003a1c:	4a3e      	ldr	r2, [pc, #248]	@ (8003b18 <xTaskIncrementTick+0x154>)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	4b3e      	ldr	r3, [pc, #248]	@ (8003b1c <xTaskIncrementTick+0x158>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	3301      	adds	r3, #1
 8003a28:	4a3c      	ldr	r2, [pc, #240]	@ (8003b1c <xTaskIncrementTick+0x158>)
 8003a2a:	6013      	str	r3, [r2, #0]
 8003a2c:	f000 f996 	bl	8003d5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a30:	4b3b      	ldr	r3, [pc, #236]	@ (8003b20 <xTaskIncrementTick+0x15c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d348      	bcc.n	8003acc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a3a:	4b36      	ldr	r3, [pc, #216]	@ (8003b14 <xTaskIncrementTick+0x150>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d104      	bne.n	8003a4e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a44:	4b36      	ldr	r3, [pc, #216]	@ (8003b20 <xTaskIncrementTick+0x15c>)
 8003a46:	f04f 32ff 	mov.w	r2, #4294967295
 8003a4a:	601a      	str	r2, [r3, #0]
					break;
 8003a4c:	e03e      	b.n	8003acc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a4e:	4b31      	ldr	r3, [pc, #196]	@ (8003b14 <xTaskIncrementTick+0x150>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d203      	bcs.n	8003a6e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a66:	4a2e      	ldr	r2, [pc, #184]	@ (8003b20 <xTaskIncrementTick+0x15c>)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003a6c:	e02e      	b.n	8003acc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	3304      	adds	r3, #4
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff fca2 	bl	80033bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d004      	beq.n	8003a8a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	3318      	adds	r3, #24
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff fc99 	bl	80033bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a8e:	2201      	movs	r2, #1
 8003a90:	409a      	lsls	r2, r3
 8003a92:	4b24      	ldr	r3, [pc, #144]	@ (8003b24 <xTaskIncrementTick+0x160>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	4a22      	ldr	r2, [pc, #136]	@ (8003b24 <xTaskIncrementTick+0x160>)
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4a1f      	ldr	r2, [pc, #124]	@ (8003b28 <xTaskIncrementTick+0x164>)
 8003aaa:	441a      	add	r2, r3
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	3304      	adds	r3, #4
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	f7ff fc27 	bl	8003306 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003abc:	4b1b      	ldr	r3, [pc, #108]	@ (8003b2c <xTaskIncrementTick+0x168>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d3b9      	bcc.n	8003a3a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003aca:	e7b6      	b.n	8003a3a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003acc:	4b17      	ldr	r3, [pc, #92]	@ (8003b2c <xTaskIncrementTick+0x168>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ad2:	4915      	ldr	r1, [pc, #84]	@ (8003b28 <xTaskIncrementTick+0x164>)
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d901      	bls.n	8003ae8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003ae8:	4b11      	ldr	r3, [pc, #68]	@ (8003b30 <xTaskIncrementTick+0x16c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d007      	beq.n	8003b00 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003af0:	2301      	movs	r3, #1
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	e004      	b.n	8003b00 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003af6:	4b0f      	ldr	r3, [pc, #60]	@ (8003b34 <xTaskIncrementTick+0x170>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	3301      	adds	r3, #1
 8003afc:	4a0d      	ldr	r2, [pc, #52]	@ (8003b34 <xTaskIncrementTick+0x170>)
 8003afe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003b00:	697b      	ldr	r3, [r7, #20]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3718      	adds	r7, #24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20000548 	.word	0x20000548
 8003b10:	20000524 	.word	0x20000524
 8003b14:	200004d8 	.word	0x200004d8
 8003b18:	200004dc 	.word	0x200004dc
 8003b1c:	20000538 	.word	0x20000538
 8003b20:	20000540 	.word	0x20000540
 8003b24:	20000528 	.word	0x20000528
 8003b28:	20000424 	.word	0x20000424
 8003b2c:	20000420 	.word	0x20000420
 8003b30:	20000534 	.word	0x20000534
 8003b34:	20000530 	.word	0x20000530

08003b38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b087      	sub	sp, #28
 8003b3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b3e:	4b27      	ldr	r3, [pc, #156]	@ (8003bdc <vTaskSwitchContext+0xa4>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b46:	4b26      	ldr	r3, [pc, #152]	@ (8003be0 <vTaskSwitchContext+0xa8>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b4c:	e040      	b.n	8003bd0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003b4e:	4b24      	ldr	r3, [pc, #144]	@ (8003be0 <vTaskSwitchContext+0xa8>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b54:	4b23      	ldr	r3, [pc, #140]	@ (8003be4 <vTaskSwitchContext+0xac>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	fab3 f383 	clz	r3, r3
 8003b60:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003b62:	7afb      	ldrb	r3, [r7, #11]
 8003b64:	f1c3 031f 	rsb	r3, r3, #31
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	491f      	ldr	r1, [pc, #124]	@ (8003be8 <vTaskSwitchContext+0xb0>)
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	440b      	add	r3, r1
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10b      	bne.n	8003b96 <vTaskSwitchContext+0x5e>
	__asm volatile
 8003b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b82:	f383 8811 	msr	BASEPRI, r3
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	607b      	str	r3, [r7, #4]
}
 8003b90:	bf00      	nop
 8003b92:	bf00      	nop
 8003b94:	e7fd      	b.n	8003b92 <vTaskSwitchContext+0x5a>
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4a11      	ldr	r2, [pc, #68]	@ (8003be8 <vTaskSwitchContext+0xb0>)
 8003ba2:	4413      	add	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	605a      	str	r2, [r3, #4]
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	3308      	adds	r3, #8
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d104      	bne.n	8003bc6 <vTaskSwitchContext+0x8e>
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	605a      	str	r2, [r3, #4]
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4a07      	ldr	r2, [pc, #28]	@ (8003bec <vTaskSwitchContext+0xb4>)
 8003bce:	6013      	str	r3, [r2, #0]
}
 8003bd0:	bf00      	nop
 8003bd2:	371c      	adds	r7, #28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bc80      	pop	{r7}
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	20000548 	.word	0x20000548
 8003be0:	20000534 	.word	0x20000534
 8003be4:	20000528 	.word	0x20000528
 8003be8:	20000424 	.word	0x20000424
 8003bec:	20000420 	.word	0x20000420

08003bf0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003bf8:	f000 f852 	bl	8003ca0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003bfc:	4b06      	ldr	r3, [pc, #24]	@ (8003c18 <prvIdleTask+0x28>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d9f9      	bls.n	8003bf8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003c04:	4b05      	ldr	r3, [pc, #20]	@ (8003c1c <prvIdleTask+0x2c>)
 8003c06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003c14:	e7f0      	b.n	8003bf8 <prvIdleTask+0x8>
 8003c16:	bf00      	nop
 8003c18:	20000424 	.word	0x20000424
 8003c1c:	e000ed04 	.word	0xe000ed04

08003c20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c26:	2300      	movs	r3, #0
 8003c28:	607b      	str	r3, [r7, #4]
 8003c2a:	e00c      	b.n	8003c46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4a12      	ldr	r2, [pc, #72]	@ (8003c80 <prvInitialiseTaskLists+0x60>)
 8003c38:	4413      	add	r3, r2
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7ff fb38 	bl	80032b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3301      	adds	r3, #1
 8003c44:	607b      	str	r3, [r7, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b06      	cmp	r3, #6
 8003c4a:	d9ef      	bls.n	8003c2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c4c:	480d      	ldr	r0, [pc, #52]	@ (8003c84 <prvInitialiseTaskLists+0x64>)
 8003c4e:	f7ff fb2f 	bl	80032b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c52:	480d      	ldr	r0, [pc, #52]	@ (8003c88 <prvInitialiseTaskLists+0x68>)
 8003c54:	f7ff fb2c 	bl	80032b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c58:	480c      	ldr	r0, [pc, #48]	@ (8003c8c <prvInitialiseTaskLists+0x6c>)
 8003c5a:	f7ff fb29 	bl	80032b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c5e:	480c      	ldr	r0, [pc, #48]	@ (8003c90 <prvInitialiseTaskLists+0x70>)
 8003c60:	f7ff fb26 	bl	80032b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c64:	480b      	ldr	r0, [pc, #44]	@ (8003c94 <prvInitialiseTaskLists+0x74>)
 8003c66:	f7ff fb23 	bl	80032b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c98 <prvInitialiseTaskLists+0x78>)
 8003c6c:	4a05      	ldr	r2, [pc, #20]	@ (8003c84 <prvInitialiseTaskLists+0x64>)
 8003c6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c70:	4b0a      	ldr	r3, [pc, #40]	@ (8003c9c <prvInitialiseTaskLists+0x7c>)
 8003c72:	4a05      	ldr	r2, [pc, #20]	@ (8003c88 <prvInitialiseTaskLists+0x68>)
 8003c74:	601a      	str	r2, [r3, #0]
}
 8003c76:	bf00      	nop
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	20000424 	.word	0x20000424
 8003c84:	200004b0 	.word	0x200004b0
 8003c88:	200004c4 	.word	0x200004c4
 8003c8c:	200004e0 	.word	0x200004e0
 8003c90:	200004f4 	.word	0x200004f4
 8003c94:	2000050c 	.word	0x2000050c
 8003c98:	200004d8 	.word	0x200004d8
 8003c9c:	200004dc 	.word	0x200004dc

08003ca0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ca6:	e019      	b.n	8003cdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ca8:	f000 f9d0 	bl	800404c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cac:	4b10      	ldr	r3, [pc, #64]	@ (8003cf0 <prvCheckTasksWaitingTermination+0x50>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff fb7f 	bl	80033bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf4 <prvCheckTasksWaitingTermination+0x54>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	4a0b      	ldr	r2, [pc, #44]	@ (8003cf4 <prvCheckTasksWaitingTermination+0x54>)
 8003cc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf8 <prvCheckTasksWaitingTermination+0x58>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	4a0a      	ldr	r2, [pc, #40]	@ (8003cf8 <prvCheckTasksWaitingTermination+0x58>)
 8003cd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003cd2:	f000 f9eb 	bl	80040ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f810 	bl	8003cfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cdc:	4b06      	ldr	r3, [pc, #24]	@ (8003cf8 <prvCheckTasksWaitingTermination+0x58>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1e1      	bne.n	8003ca8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ce4:	bf00      	nop
 8003ce6:	bf00      	nop
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	200004f4 	.word	0x200004f4
 8003cf4:	20000520 	.word	0x20000520
 8003cf8:	20000508 	.word	0x20000508

08003cfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d108      	bne.n	8003d20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fb2a 	bl	800436c <vPortFree>
				vPortFree( pxTCB );
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 fb27 	bl	800436c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d1e:	e019      	b.n	8003d54 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d103      	bne.n	8003d32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 fb1e 	bl	800436c <vPortFree>
	}
 8003d30:	e010      	b.n	8003d54 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d00b      	beq.n	8003d54 <prvDeleteTCB+0x58>
	__asm volatile
 8003d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d40:	f383 8811 	msr	BASEPRI, r3
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	60fb      	str	r3, [r7, #12]
}
 8003d4e:	bf00      	nop
 8003d50:	bf00      	nop
 8003d52:	e7fd      	b.n	8003d50 <prvDeleteTCB+0x54>
	}
 8003d54:	bf00      	nop
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d62:	4b0c      	ldr	r3, [pc, #48]	@ (8003d94 <prvResetNextTaskUnblockTime+0x38>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d104      	bne.n	8003d76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d98 <prvResetNextTaskUnblockTime+0x3c>)
 8003d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d74:	e008      	b.n	8003d88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d76:	4b07      	ldr	r3, [pc, #28]	@ (8003d94 <prvResetNextTaskUnblockTime+0x38>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	4a04      	ldr	r2, [pc, #16]	@ (8003d98 <prvResetNextTaskUnblockTime+0x3c>)
 8003d86:	6013      	str	r3, [r2, #0]
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	200004d8 	.word	0x200004d8
 8003d98:	20000540 	.word	0x20000540

08003d9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003da6:	4b29      	ldr	r3, [pc, #164]	@ (8003e4c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dac:	4b28      	ldr	r3, [pc, #160]	@ (8003e50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3304      	adds	r3, #4
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff fb02 	bl	80033bc <uxListRemove>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10b      	bne.n	8003dd6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003dbe:	4b24      	ldr	r3, [pc, #144]	@ (8003e50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	43da      	mvns	r2, r3
 8003dcc:	4b21      	ldr	r3, [pc, #132]	@ (8003e54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	4a20      	ldr	r2, [pc, #128]	@ (8003e54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003dd4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ddc:	d10a      	bne.n	8003df4 <prvAddCurrentTaskToDelayedList+0x58>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d007      	beq.n	8003df4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003de4:	4b1a      	ldr	r3, [pc, #104]	@ (8003e50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3304      	adds	r3, #4
 8003dea:	4619      	mov	r1, r3
 8003dec:	481a      	ldr	r0, [pc, #104]	@ (8003e58 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003dee:	f7ff fa8a 	bl	8003306 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003df2:	e026      	b.n	8003e42 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4413      	add	r3, r2
 8003dfa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003dfc:	4b14      	ldr	r3, [pc, #80]	@ (8003e50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d209      	bcs.n	8003e20 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e0c:	4b13      	ldr	r3, [pc, #76]	@ (8003e5c <prvAddCurrentTaskToDelayedList+0xc0>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4b0f      	ldr	r3, [pc, #60]	@ (8003e50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3304      	adds	r3, #4
 8003e16:	4619      	mov	r1, r3
 8003e18:	4610      	mov	r0, r2
 8003e1a:	f7ff fa97 	bl	800334c <vListInsert>
}
 8003e1e:	e010      	b.n	8003e42 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e20:	4b0f      	ldr	r3, [pc, #60]	@ (8003e60 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4b0a      	ldr	r3, [pc, #40]	@ (8003e50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	f7ff fa8d 	bl	800334c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e32:	4b0c      	ldr	r3, [pc, #48]	@ (8003e64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d202      	bcs.n	8003e42 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003e3c:	4a09      	ldr	r2, [pc, #36]	@ (8003e64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	6013      	str	r3, [r2, #0]
}
 8003e42:	bf00      	nop
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	20000524 	.word	0x20000524
 8003e50:	20000420 	.word	0x20000420
 8003e54:	20000528 	.word	0x20000528
 8003e58:	2000050c 	.word	0x2000050c
 8003e5c:	200004dc 	.word	0x200004dc
 8003e60:	200004d8 	.word	0x200004d8
 8003e64:	20000540 	.word	0x20000540

08003e68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	3b04      	subs	r3, #4
 8003e78:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	3b04      	subs	r3, #4
 8003e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f023 0201 	bic.w	r2, r3, #1
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	3b04      	subs	r3, #4
 8003e96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003e98:	4a08      	ldr	r2, [pc, #32]	@ (8003ebc <pxPortInitialiseStack+0x54>)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	3b14      	subs	r3, #20
 8003ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	3b20      	subs	r3, #32
 8003eae:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr
 8003ebc:	08003ec1 	.word	0x08003ec1

08003ec0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003eca:	4b12      	ldr	r3, [pc, #72]	@ (8003f14 <prvTaskExitError+0x54>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed2:	d00b      	beq.n	8003eec <prvTaskExitError+0x2c>
	__asm volatile
 8003ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	60fb      	str	r3, [r7, #12]
}
 8003ee6:	bf00      	nop
 8003ee8:	bf00      	nop
 8003eea:	e7fd      	b.n	8003ee8 <prvTaskExitError+0x28>
	__asm volatile
 8003eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef0:	f383 8811 	msr	BASEPRI, r3
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	60bb      	str	r3, [r7, #8]
}
 8003efe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003f00:	bf00      	nop
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0fc      	beq.n	8003f02 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003f08:	bf00      	nop
 8003f0a:	bf00      	nop
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr
 8003f14:	20000010 	.word	0x20000010
	...

08003f20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003f20:	4b07      	ldr	r3, [pc, #28]	@ (8003f40 <pxCurrentTCBConst2>)
 8003f22:	6819      	ldr	r1, [r3, #0]
 8003f24:	6808      	ldr	r0, [r1, #0]
 8003f26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003f2a:	f380 8809 	msr	PSP, r0
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f04f 0000 	mov.w	r0, #0
 8003f36:	f380 8811 	msr	BASEPRI, r0
 8003f3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003f3e:	4770      	bx	lr

08003f40 <pxCurrentTCBConst2>:
 8003f40:	20000420 	.word	0x20000420
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003f44:	bf00      	nop
 8003f46:	bf00      	nop

08003f48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003f48:	4806      	ldr	r0, [pc, #24]	@ (8003f64 <prvPortStartFirstTask+0x1c>)
 8003f4a:	6800      	ldr	r0, [r0, #0]
 8003f4c:	6800      	ldr	r0, [r0, #0]
 8003f4e:	f380 8808 	msr	MSP, r0
 8003f52:	b662      	cpsie	i
 8003f54:	b661      	cpsie	f
 8003f56:	f3bf 8f4f 	dsb	sy
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	df00      	svc	0
 8003f60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003f62:	bf00      	nop
 8003f64:	e000ed08 	.word	0xe000ed08

08003f68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f6e:	4b32      	ldr	r3, [pc, #200]	@ (8004038 <xPortStartScheduler+0xd0>)
 8003f70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	22ff      	movs	r2, #255	@ 0xff
 8003f7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f88:	78fb      	ldrb	r3, [r7, #3]
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	4b2a      	ldr	r3, [pc, #168]	@ (800403c <xPortStartScheduler+0xd4>)
 8003f94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f96:	4b2a      	ldr	r3, [pc, #168]	@ (8004040 <xPortStartScheduler+0xd8>)
 8003f98:	2207      	movs	r2, #7
 8003f9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f9c:	e009      	b.n	8003fb2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003f9e:	4b28      	ldr	r3, [pc, #160]	@ (8004040 <xPortStartScheduler+0xd8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	4a26      	ldr	r2, [pc, #152]	@ (8004040 <xPortStartScheduler+0xd8>)
 8003fa6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003fa8:	78fb      	ldrb	r3, [r7, #3]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fb2:	78fb      	ldrb	r3, [r7, #3]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fba:	2b80      	cmp	r3, #128	@ 0x80
 8003fbc:	d0ef      	beq.n	8003f9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003fbe:	4b20      	ldr	r3, [pc, #128]	@ (8004040 <xPortStartScheduler+0xd8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f1c3 0307 	rsb	r3, r3, #7
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d00b      	beq.n	8003fe2 <xPortStartScheduler+0x7a>
	__asm volatile
 8003fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	60bb      	str	r3, [r7, #8]
}
 8003fdc:	bf00      	nop
 8003fde:	bf00      	nop
 8003fe0:	e7fd      	b.n	8003fde <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003fe2:	4b17      	ldr	r3, [pc, #92]	@ (8004040 <xPortStartScheduler+0xd8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	021b      	lsls	r3, r3, #8
 8003fe8:	4a15      	ldr	r2, [pc, #84]	@ (8004040 <xPortStartScheduler+0xd8>)
 8003fea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003fec:	4b14      	ldr	r3, [pc, #80]	@ (8004040 <xPortStartScheduler+0xd8>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ff4:	4a12      	ldr	r2, [pc, #72]	@ (8004040 <xPortStartScheduler+0xd8>)
 8003ff6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004000:	4b10      	ldr	r3, [pc, #64]	@ (8004044 <xPortStartScheduler+0xdc>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a0f      	ldr	r2, [pc, #60]	@ (8004044 <xPortStartScheduler+0xdc>)
 8004006:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800400a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800400c:	4b0d      	ldr	r3, [pc, #52]	@ (8004044 <xPortStartScheduler+0xdc>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a0c      	ldr	r2, [pc, #48]	@ (8004044 <xPortStartScheduler+0xdc>)
 8004012:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004016:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004018:	f000 f8b8 	bl	800418c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800401c:	4b0a      	ldr	r3, [pc, #40]	@ (8004048 <xPortStartScheduler+0xe0>)
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004022:	f7ff ff91 	bl	8003f48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004026:	f7ff fd87 	bl	8003b38 <vTaskSwitchContext>
	prvTaskExitError();
 800402a:	f7ff ff49 	bl	8003ec0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	e000e400 	.word	0xe000e400
 800403c:	2000054c 	.word	0x2000054c
 8004040:	20000550 	.word	0x20000550
 8004044:	e000ed20 	.word	0xe000ed20
 8004048:	20000010 	.word	0x20000010

0800404c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
	__asm volatile
 8004052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	607b      	str	r3, [r7, #4]
}
 8004064:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004066:	4b0f      	ldr	r3, [pc, #60]	@ (80040a4 <vPortEnterCritical+0x58>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3301      	adds	r3, #1
 800406c:	4a0d      	ldr	r2, [pc, #52]	@ (80040a4 <vPortEnterCritical+0x58>)
 800406e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004070:	4b0c      	ldr	r3, [pc, #48]	@ (80040a4 <vPortEnterCritical+0x58>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d110      	bne.n	800409a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004078:	4b0b      	ldr	r3, [pc, #44]	@ (80040a8 <vPortEnterCritical+0x5c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00b      	beq.n	800409a <vPortEnterCritical+0x4e>
	__asm volatile
 8004082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004086:	f383 8811 	msr	BASEPRI, r3
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	603b      	str	r3, [r7, #0]
}
 8004094:	bf00      	nop
 8004096:	bf00      	nop
 8004098:	e7fd      	b.n	8004096 <vPortEnterCritical+0x4a>
	}
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr
 80040a4:	20000010 	.word	0x20000010
 80040a8:	e000ed04 	.word	0xe000ed04

080040ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80040b2:	4b12      	ldr	r3, [pc, #72]	@ (80040fc <vPortExitCritical+0x50>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10b      	bne.n	80040d2 <vPortExitCritical+0x26>
	__asm volatile
 80040ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040be:	f383 8811 	msr	BASEPRI, r3
 80040c2:	f3bf 8f6f 	isb	sy
 80040c6:	f3bf 8f4f 	dsb	sy
 80040ca:	607b      	str	r3, [r7, #4]
}
 80040cc:	bf00      	nop
 80040ce:	bf00      	nop
 80040d0:	e7fd      	b.n	80040ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80040d2:	4b0a      	ldr	r3, [pc, #40]	@ (80040fc <vPortExitCritical+0x50>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	4a08      	ldr	r2, [pc, #32]	@ (80040fc <vPortExitCritical+0x50>)
 80040da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80040dc:	4b07      	ldr	r3, [pc, #28]	@ (80040fc <vPortExitCritical+0x50>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d105      	bne.n	80040f0 <vPortExitCritical+0x44>
 80040e4:	2300      	movs	r3, #0
 80040e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80040ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bc80      	pop	{r7}
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	20000010 	.word	0x20000010

08004100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004100:	f3ef 8009 	mrs	r0, PSP
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	4b0d      	ldr	r3, [pc, #52]	@ (8004140 <pxCurrentTCBConst>)
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004110:	6010      	str	r0, [r2, #0]
 8004112:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004116:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800411a:	f380 8811 	msr	BASEPRI, r0
 800411e:	f7ff fd0b 	bl	8003b38 <vTaskSwitchContext>
 8004122:	f04f 0000 	mov.w	r0, #0
 8004126:	f380 8811 	msr	BASEPRI, r0
 800412a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800412e:	6819      	ldr	r1, [r3, #0]
 8004130:	6808      	ldr	r0, [r1, #0]
 8004132:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004136:	f380 8809 	msr	PSP, r0
 800413a:	f3bf 8f6f 	isb	sy
 800413e:	4770      	bx	lr

08004140 <pxCurrentTCBConst>:
 8004140:	20000420 	.word	0x20000420
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004144:	bf00      	nop
 8004146:	bf00      	nop

08004148 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
	__asm volatile
 800414e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004152:	f383 8811 	msr	BASEPRI, r3
 8004156:	f3bf 8f6f 	isb	sy
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	607b      	str	r3, [r7, #4]
}
 8004160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004162:	f7ff fc2f 	bl	80039c4 <xTaskIncrementTick>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800416c:	4b06      	ldr	r3, [pc, #24]	@ (8004188 <SysTick_Handler+0x40>)
 800416e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	2300      	movs	r3, #0
 8004176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	f383 8811 	msr	BASEPRI, r3
}
 800417e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004180:	bf00      	nop
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	e000ed04 	.word	0xe000ed04

0800418c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004190:	4b0a      	ldr	r3, [pc, #40]	@ (80041bc <vPortSetupTimerInterrupt+0x30>)
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004196:	4b0a      	ldr	r3, [pc, #40]	@ (80041c0 <vPortSetupTimerInterrupt+0x34>)
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800419c:	4b09      	ldr	r3, [pc, #36]	@ (80041c4 <vPortSetupTimerInterrupt+0x38>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a09      	ldr	r2, [pc, #36]	@ (80041c8 <vPortSetupTimerInterrupt+0x3c>)
 80041a2:	fba2 2303 	umull	r2, r3, r2, r3
 80041a6:	099b      	lsrs	r3, r3, #6
 80041a8:	4a08      	ldr	r2, [pc, #32]	@ (80041cc <vPortSetupTimerInterrupt+0x40>)
 80041aa:	3b01      	subs	r3, #1
 80041ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80041ae:	4b03      	ldr	r3, [pc, #12]	@ (80041bc <vPortSetupTimerInterrupt+0x30>)
 80041b0:	2207      	movs	r2, #7
 80041b2:	601a      	str	r2, [r3, #0]
}
 80041b4:	bf00      	nop
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr
 80041bc:	e000e010 	.word	0xe000e010
 80041c0:	e000e018 	.word	0xe000e018
 80041c4:	20000004 	.word	0x20000004
 80041c8:	10624dd3 	.word	0x10624dd3
 80041cc:	e000e014 	.word	0xe000e014

080041d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b08a      	sub	sp, #40	@ 0x28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80041d8:	2300      	movs	r3, #0
 80041da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80041dc:	f7ff fb46 	bl	800386c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80041e0:	4b5c      	ldr	r3, [pc, #368]	@ (8004354 <pvPortMalloc+0x184>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80041e8:	f000 f924 	bl	8004434 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80041ec:	4b5a      	ldr	r3, [pc, #360]	@ (8004358 <pvPortMalloc+0x188>)
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4013      	ands	r3, r2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f040 8095 	bne.w	8004324 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d01e      	beq.n	800423e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004200:	2208      	movs	r2, #8
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4413      	add	r3, r2
 8004206:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f003 0307 	and.w	r3, r3, #7
 800420e:	2b00      	cmp	r3, #0
 8004210:	d015      	beq.n	800423e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f023 0307 	bic.w	r3, r3, #7
 8004218:	3308      	adds	r3, #8
 800421a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00b      	beq.n	800423e <pvPortMalloc+0x6e>
	__asm volatile
 8004226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	617b      	str	r3, [r7, #20]
}
 8004238:	bf00      	nop
 800423a:	bf00      	nop
 800423c:	e7fd      	b.n	800423a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d06f      	beq.n	8004324 <pvPortMalloc+0x154>
 8004244:	4b45      	ldr	r3, [pc, #276]	@ (800435c <pvPortMalloc+0x18c>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	429a      	cmp	r2, r3
 800424c:	d86a      	bhi.n	8004324 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800424e:	4b44      	ldr	r3, [pc, #272]	@ (8004360 <pvPortMalloc+0x190>)
 8004250:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004252:	4b43      	ldr	r3, [pc, #268]	@ (8004360 <pvPortMalloc+0x190>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004258:	e004      	b.n	8004264 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800425a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800425e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	429a      	cmp	r2, r3
 800426c:	d903      	bls.n	8004276 <pvPortMalloc+0xa6>
 800426e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1f1      	bne.n	800425a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004276:	4b37      	ldr	r3, [pc, #220]	@ (8004354 <pvPortMalloc+0x184>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800427c:	429a      	cmp	r2, r3
 800427e:	d051      	beq.n	8004324 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2208      	movs	r2, #8
 8004286:	4413      	add	r3, r2
 8004288:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800428a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	1ad2      	subs	r2, r2, r3
 800429a:	2308      	movs	r3, #8
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	429a      	cmp	r2, r3
 80042a0:	d920      	bls.n	80042e4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80042a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4413      	add	r3, r2
 80042a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	f003 0307 	and.w	r3, r3, #7
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00b      	beq.n	80042cc <pvPortMalloc+0xfc>
	__asm volatile
 80042b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b8:	f383 8811 	msr	BASEPRI, r3
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	613b      	str	r3, [r7, #16]
}
 80042c6:	bf00      	nop
 80042c8:	bf00      	nop
 80042ca:	e7fd      	b.n	80042c8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80042cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	1ad2      	subs	r2, r2, r3
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80042d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80042de:	69b8      	ldr	r0, [r7, #24]
 80042e0:	f000 f90a 	bl	80044f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80042e4:	4b1d      	ldr	r3, [pc, #116]	@ (800435c <pvPortMalloc+0x18c>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	4a1b      	ldr	r2, [pc, #108]	@ (800435c <pvPortMalloc+0x18c>)
 80042f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80042f2:	4b1a      	ldr	r3, [pc, #104]	@ (800435c <pvPortMalloc+0x18c>)
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004364 <pvPortMalloc+0x194>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d203      	bcs.n	8004306 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80042fe:	4b17      	ldr	r3, [pc, #92]	@ (800435c <pvPortMalloc+0x18c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a18      	ldr	r2, [pc, #96]	@ (8004364 <pvPortMalloc+0x194>)
 8004304:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	4b13      	ldr	r3, [pc, #76]	@ (8004358 <pvPortMalloc+0x188>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	431a      	orrs	r2, r3
 8004310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004312:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800431a:	4b13      	ldr	r3, [pc, #76]	@ (8004368 <pvPortMalloc+0x198>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3301      	adds	r3, #1
 8004320:	4a11      	ldr	r2, [pc, #68]	@ (8004368 <pvPortMalloc+0x198>)
 8004322:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004324:	f7ff fab0 	bl	8003888 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00b      	beq.n	800434a <pvPortMalloc+0x17a>
	__asm volatile
 8004332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	60fb      	str	r3, [r7, #12]
}
 8004344:	bf00      	nop
 8004346:	bf00      	nop
 8004348:	e7fd      	b.n	8004346 <pvPortMalloc+0x176>
	return pvReturn;
 800434a:	69fb      	ldr	r3, [r7, #28]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3728      	adds	r7, #40	@ 0x28
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	2000115c 	.word	0x2000115c
 8004358:	20001170 	.word	0x20001170
 800435c:	20001160 	.word	0x20001160
 8004360:	20001154 	.word	0x20001154
 8004364:	20001164 	.word	0x20001164
 8004368:	20001168 	.word	0x20001168

0800436c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d04f      	beq.n	800441e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800437e:	2308      	movs	r3, #8
 8004380:	425b      	negs	r3, r3
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4413      	add	r3, r2
 8004386:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	4b25      	ldr	r3, [pc, #148]	@ (8004428 <vPortFree+0xbc>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4013      	ands	r3, r2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10b      	bne.n	80043b2 <vPortFree+0x46>
	__asm volatile
 800439a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	60fb      	str	r3, [r7, #12]
}
 80043ac:	bf00      	nop
 80043ae:	bf00      	nop
 80043b0:	e7fd      	b.n	80043ae <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00b      	beq.n	80043d2 <vPortFree+0x66>
	__asm volatile
 80043ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	60bb      	str	r3, [r7, #8]
}
 80043cc:	bf00      	nop
 80043ce:	bf00      	nop
 80043d0:	e7fd      	b.n	80043ce <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	4b14      	ldr	r3, [pc, #80]	@ (8004428 <vPortFree+0xbc>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4013      	ands	r3, r2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d01e      	beq.n	800441e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d11a      	bne.n	800441e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004428 <vPortFree+0xbc>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	43db      	mvns	r3, r3
 80043f2:	401a      	ands	r2, r3
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80043f8:	f7ff fa38 	bl	800386c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	4b0a      	ldr	r3, [pc, #40]	@ (800442c <vPortFree+0xc0>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4413      	add	r3, r2
 8004406:	4a09      	ldr	r2, [pc, #36]	@ (800442c <vPortFree+0xc0>)
 8004408:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800440a:	6938      	ldr	r0, [r7, #16]
 800440c:	f000 f874 	bl	80044f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004410:	4b07      	ldr	r3, [pc, #28]	@ (8004430 <vPortFree+0xc4>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3301      	adds	r3, #1
 8004416:	4a06      	ldr	r2, [pc, #24]	@ (8004430 <vPortFree+0xc4>)
 8004418:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800441a:	f7ff fa35 	bl	8003888 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800441e:	bf00      	nop
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	20001170 	.word	0x20001170
 800442c:	20001160 	.word	0x20001160
 8004430:	2000116c 	.word	0x2000116c

08004434 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800443a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800443e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004440:	4b27      	ldr	r3, [pc, #156]	@ (80044e0 <prvHeapInit+0xac>)
 8004442:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00c      	beq.n	8004468 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	3307      	adds	r3, #7
 8004452:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0307 	bic.w	r3, r3, #7
 800445a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	4a1f      	ldr	r2, [pc, #124]	@ (80044e0 <prvHeapInit+0xac>)
 8004464:	4413      	add	r3, r2
 8004466:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800446c:	4a1d      	ldr	r2, [pc, #116]	@ (80044e4 <prvHeapInit+0xb0>)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004472:	4b1c      	ldr	r3, [pc, #112]	@ (80044e4 <prvHeapInit+0xb0>)
 8004474:	2200      	movs	r2, #0
 8004476:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	4413      	add	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004480:	2208      	movs	r2, #8
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	1a9b      	subs	r3, r3, r2
 8004486:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f023 0307 	bic.w	r3, r3, #7
 800448e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4a15      	ldr	r2, [pc, #84]	@ (80044e8 <prvHeapInit+0xb4>)
 8004494:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004496:	4b14      	ldr	r3, [pc, #80]	@ (80044e8 <prvHeapInit+0xb4>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2200      	movs	r2, #0
 800449c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800449e:	4b12      	ldr	r3, [pc, #72]	@ (80044e8 <prvHeapInit+0xb4>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	1ad2      	subs	r2, r2, r3
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80044b4:	4b0c      	ldr	r3, [pc, #48]	@ (80044e8 <prvHeapInit+0xb4>)
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	4a0a      	ldr	r2, [pc, #40]	@ (80044ec <prvHeapInit+0xb8>)
 80044c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	4a09      	ldr	r2, [pc, #36]	@ (80044f0 <prvHeapInit+0xbc>)
 80044ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80044cc:	4b09      	ldr	r3, [pc, #36]	@ (80044f4 <prvHeapInit+0xc0>)
 80044ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80044d2:	601a      	str	r2, [r3, #0]
}
 80044d4:	bf00      	nop
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	bc80      	pop	{r7}
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	20000554 	.word	0x20000554
 80044e4:	20001154 	.word	0x20001154
 80044e8:	2000115c 	.word	0x2000115c
 80044ec:	20001164 	.word	0x20001164
 80044f0:	20001160 	.word	0x20001160
 80044f4:	20001170 	.word	0x20001170

080044f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004500:	4b27      	ldr	r3, [pc, #156]	@ (80045a0 <prvInsertBlockIntoFreeList+0xa8>)
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	e002      	b.n	800450c <prvInsertBlockIntoFreeList+0x14>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	429a      	cmp	r2, r3
 8004514:	d8f7      	bhi.n	8004506 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	4413      	add	r3, r2
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	429a      	cmp	r2, r3
 8004526:	d108      	bne.n	800453a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	441a      	add	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	441a      	add	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d118      	bne.n	8004580 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	4b14      	ldr	r3, [pc, #80]	@ (80045a4 <prvInsertBlockIntoFreeList+0xac>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d00d      	beq.n	8004576 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	441a      	add	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	e008      	b.n	8004588 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004576:	4b0b      	ldr	r3, [pc, #44]	@ (80045a4 <prvInsertBlockIntoFreeList+0xac>)
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	e003      	b.n	8004588 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	429a      	cmp	r2, r3
 800458e:	d002      	beq.n	8004596 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004596:	bf00      	nop
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	bc80      	pop	{r7}
 800459e:	4770      	bx	lr
 80045a0:	20001154 	.word	0x20001154
 80045a4:	2000115c 	.word	0x2000115c

080045a8 <std>:
 80045a8:	2300      	movs	r3, #0
 80045aa:	b510      	push	{r4, lr}
 80045ac:	4604      	mov	r4, r0
 80045ae:	e9c0 3300 	strd	r3, r3, [r0]
 80045b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045b6:	6083      	str	r3, [r0, #8]
 80045b8:	8181      	strh	r1, [r0, #12]
 80045ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80045bc:	81c2      	strh	r2, [r0, #14]
 80045be:	6183      	str	r3, [r0, #24]
 80045c0:	4619      	mov	r1, r3
 80045c2:	2208      	movs	r2, #8
 80045c4:	305c      	adds	r0, #92	@ 0x5c
 80045c6:	f000 fa19 	bl	80049fc <memset>
 80045ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004600 <std+0x58>)
 80045cc:	6224      	str	r4, [r4, #32]
 80045ce:	6263      	str	r3, [r4, #36]	@ 0x24
 80045d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004604 <std+0x5c>)
 80045d2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80045d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004608 <std+0x60>)
 80045d6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80045d8:	4b0c      	ldr	r3, [pc, #48]	@ (800460c <std+0x64>)
 80045da:	6323      	str	r3, [r4, #48]	@ 0x30
 80045dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004610 <std+0x68>)
 80045de:	429c      	cmp	r4, r3
 80045e0:	d006      	beq.n	80045f0 <std+0x48>
 80045e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80045e6:	4294      	cmp	r4, r2
 80045e8:	d002      	beq.n	80045f0 <std+0x48>
 80045ea:	33d0      	adds	r3, #208	@ 0xd0
 80045ec:	429c      	cmp	r4, r3
 80045ee:	d105      	bne.n	80045fc <std+0x54>
 80045f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80045f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045f8:	f000 ba78 	b.w	8004aec <__retarget_lock_init_recursive>
 80045fc:	bd10      	pop	{r4, pc}
 80045fe:	bf00      	nop
 8004600:	0800484d 	.word	0x0800484d
 8004604:	0800486f 	.word	0x0800486f
 8004608:	080048a7 	.word	0x080048a7
 800460c:	080048cb 	.word	0x080048cb
 8004610:	20001174 	.word	0x20001174

08004614 <stdio_exit_handler>:
 8004614:	4a02      	ldr	r2, [pc, #8]	@ (8004620 <stdio_exit_handler+0xc>)
 8004616:	4903      	ldr	r1, [pc, #12]	@ (8004624 <stdio_exit_handler+0x10>)
 8004618:	4803      	ldr	r0, [pc, #12]	@ (8004628 <stdio_exit_handler+0x14>)
 800461a:	f000 b869 	b.w	80046f0 <_fwalk_sglue>
 800461e:	bf00      	nop
 8004620:	20000014 	.word	0x20000014
 8004624:	08005651 	.word	0x08005651
 8004628:	20000024 	.word	0x20000024

0800462c <cleanup_stdio>:
 800462c:	6841      	ldr	r1, [r0, #4]
 800462e:	4b0c      	ldr	r3, [pc, #48]	@ (8004660 <cleanup_stdio+0x34>)
 8004630:	b510      	push	{r4, lr}
 8004632:	4299      	cmp	r1, r3
 8004634:	4604      	mov	r4, r0
 8004636:	d001      	beq.n	800463c <cleanup_stdio+0x10>
 8004638:	f001 f80a 	bl	8005650 <_fflush_r>
 800463c:	68a1      	ldr	r1, [r4, #8]
 800463e:	4b09      	ldr	r3, [pc, #36]	@ (8004664 <cleanup_stdio+0x38>)
 8004640:	4299      	cmp	r1, r3
 8004642:	d002      	beq.n	800464a <cleanup_stdio+0x1e>
 8004644:	4620      	mov	r0, r4
 8004646:	f001 f803 	bl	8005650 <_fflush_r>
 800464a:	68e1      	ldr	r1, [r4, #12]
 800464c:	4b06      	ldr	r3, [pc, #24]	@ (8004668 <cleanup_stdio+0x3c>)
 800464e:	4299      	cmp	r1, r3
 8004650:	d004      	beq.n	800465c <cleanup_stdio+0x30>
 8004652:	4620      	mov	r0, r4
 8004654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004658:	f000 bffa 	b.w	8005650 <_fflush_r>
 800465c:	bd10      	pop	{r4, pc}
 800465e:	bf00      	nop
 8004660:	20001174 	.word	0x20001174
 8004664:	200011dc 	.word	0x200011dc
 8004668:	20001244 	.word	0x20001244

0800466c <global_stdio_init.part.0>:
 800466c:	b510      	push	{r4, lr}
 800466e:	4b0b      	ldr	r3, [pc, #44]	@ (800469c <global_stdio_init.part.0+0x30>)
 8004670:	4c0b      	ldr	r4, [pc, #44]	@ (80046a0 <global_stdio_init.part.0+0x34>)
 8004672:	4a0c      	ldr	r2, [pc, #48]	@ (80046a4 <global_stdio_init.part.0+0x38>)
 8004674:	4620      	mov	r0, r4
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	2104      	movs	r1, #4
 800467a:	2200      	movs	r2, #0
 800467c:	f7ff ff94 	bl	80045a8 <std>
 8004680:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004684:	2201      	movs	r2, #1
 8004686:	2109      	movs	r1, #9
 8004688:	f7ff ff8e 	bl	80045a8 <std>
 800468c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004690:	2202      	movs	r2, #2
 8004692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004696:	2112      	movs	r1, #18
 8004698:	f7ff bf86 	b.w	80045a8 <std>
 800469c:	200012ac 	.word	0x200012ac
 80046a0:	20001174 	.word	0x20001174
 80046a4:	08004615 	.word	0x08004615

080046a8 <__sfp_lock_acquire>:
 80046a8:	4801      	ldr	r0, [pc, #4]	@ (80046b0 <__sfp_lock_acquire+0x8>)
 80046aa:	f000 ba20 	b.w	8004aee <__retarget_lock_acquire_recursive>
 80046ae:	bf00      	nop
 80046b0:	200012b5 	.word	0x200012b5

080046b4 <__sfp_lock_release>:
 80046b4:	4801      	ldr	r0, [pc, #4]	@ (80046bc <__sfp_lock_release+0x8>)
 80046b6:	f000 ba1b 	b.w	8004af0 <__retarget_lock_release_recursive>
 80046ba:	bf00      	nop
 80046bc:	200012b5 	.word	0x200012b5

080046c0 <__sinit>:
 80046c0:	b510      	push	{r4, lr}
 80046c2:	4604      	mov	r4, r0
 80046c4:	f7ff fff0 	bl	80046a8 <__sfp_lock_acquire>
 80046c8:	6a23      	ldr	r3, [r4, #32]
 80046ca:	b11b      	cbz	r3, 80046d4 <__sinit+0x14>
 80046cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046d0:	f7ff bff0 	b.w	80046b4 <__sfp_lock_release>
 80046d4:	4b04      	ldr	r3, [pc, #16]	@ (80046e8 <__sinit+0x28>)
 80046d6:	6223      	str	r3, [r4, #32]
 80046d8:	4b04      	ldr	r3, [pc, #16]	@ (80046ec <__sinit+0x2c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1f5      	bne.n	80046cc <__sinit+0xc>
 80046e0:	f7ff ffc4 	bl	800466c <global_stdio_init.part.0>
 80046e4:	e7f2      	b.n	80046cc <__sinit+0xc>
 80046e6:	bf00      	nop
 80046e8:	0800462d 	.word	0x0800462d
 80046ec:	200012ac 	.word	0x200012ac

080046f0 <_fwalk_sglue>:
 80046f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046f4:	4607      	mov	r7, r0
 80046f6:	4688      	mov	r8, r1
 80046f8:	4614      	mov	r4, r2
 80046fa:	2600      	movs	r6, #0
 80046fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004700:	f1b9 0901 	subs.w	r9, r9, #1
 8004704:	d505      	bpl.n	8004712 <_fwalk_sglue+0x22>
 8004706:	6824      	ldr	r4, [r4, #0]
 8004708:	2c00      	cmp	r4, #0
 800470a:	d1f7      	bne.n	80046fc <_fwalk_sglue+0xc>
 800470c:	4630      	mov	r0, r6
 800470e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004712:	89ab      	ldrh	r3, [r5, #12]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d907      	bls.n	8004728 <_fwalk_sglue+0x38>
 8004718:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800471c:	3301      	adds	r3, #1
 800471e:	d003      	beq.n	8004728 <_fwalk_sglue+0x38>
 8004720:	4629      	mov	r1, r5
 8004722:	4638      	mov	r0, r7
 8004724:	47c0      	blx	r8
 8004726:	4306      	orrs	r6, r0
 8004728:	3568      	adds	r5, #104	@ 0x68
 800472a:	e7e9      	b.n	8004700 <_fwalk_sglue+0x10>

0800472c <iprintf>:
 800472c:	b40f      	push	{r0, r1, r2, r3}
 800472e:	b507      	push	{r0, r1, r2, lr}
 8004730:	4906      	ldr	r1, [pc, #24]	@ (800474c <iprintf+0x20>)
 8004732:	ab04      	add	r3, sp, #16
 8004734:	6808      	ldr	r0, [r1, #0]
 8004736:	f853 2b04 	ldr.w	r2, [r3], #4
 800473a:	6881      	ldr	r1, [r0, #8]
 800473c:	9301      	str	r3, [sp, #4]
 800473e:	f000 fc5d 	bl	8004ffc <_vfiprintf_r>
 8004742:	b003      	add	sp, #12
 8004744:	f85d eb04 	ldr.w	lr, [sp], #4
 8004748:	b004      	add	sp, #16
 800474a:	4770      	bx	lr
 800474c:	20000020 	.word	0x20000020

08004750 <_puts_r>:
 8004750:	6a03      	ldr	r3, [r0, #32]
 8004752:	b570      	push	{r4, r5, r6, lr}
 8004754:	4605      	mov	r5, r0
 8004756:	460e      	mov	r6, r1
 8004758:	6884      	ldr	r4, [r0, #8]
 800475a:	b90b      	cbnz	r3, 8004760 <_puts_r+0x10>
 800475c:	f7ff ffb0 	bl	80046c0 <__sinit>
 8004760:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004762:	07db      	lsls	r3, r3, #31
 8004764:	d405      	bmi.n	8004772 <_puts_r+0x22>
 8004766:	89a3      	ldrh	r3, [r4, #12]
 8004768:	0598      	lsls	r0, r3, #22
 800476a:	d402      	bmi.n	8004772 <_puts_r+0x22>
 800476c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800476e:	f000 f9be 	bl	8004aee <__retarget_lock_acquire_recursive>
 8004772:	89a3      	ldrh	r3, [r4, #12]
 8004774:	0719      	lsls	r1, r3, #28
 8004776:	d502      	bpl.n	800477e <_puts_r+0x2e>
 8004778:	6923      	ldr	r3, [r4, #16]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d135      	bne.n	80047ea <_puts_r+0x9a>
 800477e:	4621      	mov	r1, r4
 8004780:	4628      	mov	r0, r5
 8004782:	f000 f8e5 	bl	8004950 <__swsetup_r>
 8004786:	b380      	cbz	r0, 80047ea <_puts_r+0x9a>
 8004788:	f04f 35ff 	mov.w	r5, #4294967295
 800478c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800478e:	07da      	lsls	r2, r3, #31
 8004790:	d405      	bmi.n	800479e <_puts_r+0x4e>
 8004792:	89a3      	ldrh	r3, [r4, #12]
 8004794:	059b      	lsls	r3, r3, #22
 8004796:	d402      	bmi.n	800479e <_puts_r+0x4e>
 8004798:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800479a:	f000 f9a9 	bl	8004af0 <__retarget_lock_release_recursive>
 800479e:	4628      	mov	r0, r5
 80047a0:	bd70      	pop	{r4, r5, r6, pc}
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	da04      	bge.n	80047b0 <_puts_r+0x60>
 80047a6:	69a2      	ldr	r2, [r4, #24]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	dc17      	bgt.n	80047dc <_puts_r+0x8c>
 80047ac:	290a      	cmp	r1, #10
 80047ae:	d015      	beq.n	80047dc <_puts_r+0x8c>
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	6022      	str	r2, [r4, #0]
 80047b6:	7019      	strb	r1, [r3, #0]
 80047b8:	68a3      	ldr	r3, [r4, #8]
 80047ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80047be:	3b01      	subs	r3, #1
 80047c0:	60a3      	str	r3, [r4, #8]
 80047c2:	2900      	cmp	r1, #0
 80047c4:	d1ed      	bne.n	80047a2 <_puts_r+0x52>
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	da11      	bge.n	80047ee <_puts_r+0x9e>
 80047ca:	4622      	mov	r2, r4
 80047cc:	210a      	movs	r1, #10
 80047ce:	4628      	mov	r0, r5
 80047d0:	f000 f87f 	bl	80048d2 <__swbuf_r>
 80047d4:	3001      	adds	r0, #1
 80047d6:	d0d7      	beq.n	8004788 <_puts_r+0x38>
 80047d8:	250a      	movs	r5, #10
 80047da:	e7d7      	b.n	800478c <_puts_r+0x3c>
 80047dc:	4622      	mov	r2, r4
 80047de:	4628      	mov	r0, r5
 80047e0:	f000 f877 	bl	80048d2 <__swbuf_r>
 80047e4:	3001      	adds	r0, #1
 80047e6:	d1e7      	bne.n	80047b8 <_puts_r+0x68>
 80047e8:	e7ce      	b.n	8004788 <_puts_r+0x38>
 80047ea:	3e01      	subs	r6, #1
 80047ec:	e7e4      	b.n	80047b8 <_puts_r+0x68>
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	6022      	str	r2, [r4, #0]
 80047f4:	220a      	movs	r2, #10
 80047f6:	701a      	strb	r2, [r3, #0]
 80047f8:	e7ee      	b.n	80047d8 <_puts_r+0x88>
	...

080047fc <puts>:
 80047fc:	4b02      	ldr	r3, [pc, #8]	@ (8004808 <puts+0xc>)
 80047fe:	4601      	mov	r1, r0
 8004800:	6818      	ldr	r0, [r3, #0]
 8004802:	f7ff bfa5 	b.w	8004750 <_puts_r>
 8004806:	bf00      	nop
 8004808:	20000020 	.word	0x20000020

0800480c <siprintf>:
 800480c:	b40e      	push	{r1, r2, r3}
 800480e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004812:	b500      	push	{lr}
 8004814:	b09c      	sub	sp, #112	@ 0x70
 8004816:	ab1d      	add	r3, sp, #116	@ 0x74
 8004818:	9002      	str	r0, [sp, #8]
 800481a:	9006      	str	r0, [sp, #24]
 800481c:	9107      	str	r1, [sp, #28]
 800481e:	9104      	str	r1, [sp, #16]
 8004820:	4808      	ldr	r0, [pc, #32]	@ (8004844 <siprintf+0x38>)
 8004822:	4909      	ldr	r1, [pc, #36]	@ (8004848 <siprintf+0x3c>)
 8004824:	f853 2b04 	ldr.w	r2, [r3], #4
 8004828:	9105      	str	r1, [sp, #20]
 800482a:	6800      	ldr	r0, [r0, #0]
 800482c:	a902      	add	r1, sp, #8
 800482e:	9301      	str	r3, [sp, #4]
 8004830:	f000 fac0 	bl	8004db4 <_svfiprintf_r>
 8004834:	2200      	movs	r2, #0
 8004836:	9b02      	ldr	r3, [sp, #8]
 8004838:	701a      	strb	r2, [r3, #0]
 800483a:	b01c      	add	sp, #112	@ 0x70
 800483c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004840:	b003      	add	sp, #12
 8004842:	4770      	bx	lr
 8004844:	20000020 	.word	0x20000020
 8004848:	ffff0208 	.word	0xffff0208

0800484c <__sread>:
 800484c:	b510      	push	{r4, lr}
 800484e:	460c      	mov	r4, r1
 8004850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004854:	f000 f8fc 	bl	8004a50 <_read_r>
 8004858:	2800      	cmp	r0, #0
 800485a:	bfab      	itete	ge
 800485c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800485e:	89a3      	ldrhlt	r3, [r4, #12]
 8004860:	181b      	addge	r3, r3, r0
 8004862:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004866:	bfac      	ite	ge
 8004868:	6563      	strge	r3, [r4, #84]	@ 0x54
 800486a:	81a3      	strhlt	r3, [r4, #12]
 800486c:	bd10      	pop	{r4, pc}

0800486e <__swrite>:
 800486e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004872:	461f      	mov	r7, r3
 8004874:	898b      	ldrh	r3, [r1, #12]
 8004876:	4605      	mov	r5, r0
 8004878:	05db      	lsls	r3, r3, #23
 800487a:	460c      	mov	r4, r1
 800487c:	4616      	mov	r6, r2
 800487e:	d505      	bpl.n	800488c <__swrite+0x1e>
 8004880:	2302      	movs	r3, #2
 8004882:	2200      	movs	r2, #0
 8004884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004888:	f000 f8d0 	bl	8004a2c <_lseek_r>
 800488c:	89a3      	ldrh	r3, [r4, #12]
 800488e:	4632      	mov	r2, r6
 8004890:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004894:	81a3      	strh	r3, [r4, #12]
 8004896:	4628      	mov	r0, r5
 8004898:	463b      	mov	r3, r7
 800489a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800489e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048a2:	f000 b8e7 	b.w	8004a74 <_write_r>

080048a6 <__sseek>:
 80048a6:	b510      	push	{r4, lr}
 80048a8:	460c      	mov	r4, r1
 80048aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ae:	f000 f8bd 	bl	8004a2c <_lseek_r>
 80048b2:	1c43      	adds	r3, r0, #1
 80048b4:	89a3      	ldrh	r3, [r4, #12]
 80048b6:	bf15      	itete	ne
 80048b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80048ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80048be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80048c2:	81a3      	strheq	r3, [r4, #12]
 80048c4:	bf18      	it	ne
 80048c6:	81a3      	strhne	r3, [r4, #12]
 80048c8:	bd10      	pop	{r4, pc}

080048ca <__sclose>:
 80048ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ce:	f000 b89d 	b.w	8004a0c <_close_r>

080048d2 <__swbuf_r>:
 80048d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d4:	460e      	mov	r6, r1
 80048d6:	4614      	mov	r4, r2
 80048d8:	4605      	mov	r5, r0
 80048da:	b118      	cbz	r0, 80048e4 <__swbuf_r+0x12>
 80048dc:	6a03      	ldr	r3, [r0, #32]
 80048de:	b90b      	cbnz	r3, 80048e4 <__swbuf_r+0x12>
 80048e0:	f7ff feee 	bl	80046c0 <__sinit>
 80048e4:	69a3      	ldr	r3, [r4, #24]
 80048e6:	60a3      	str	r3, [r4, #8]
 80048e8:	89a3      	ldrh	r3, [r4, #12]
 80048ea:	071a      	lsls	r2, r3, #28
 80048ec:	d501      	bpl.n	80048f2 <__swbuf_r+0x20>
 80048ee:	6923      	ldr	r3, [r4, #16]
 80048f0:	b943      	cbnz	r3, 8004904 <__swbuf_r+0x32>
 80048f2:	4621      	mov	r1, r4
 80048f4:	4628      	mov	r0, r5
 80048f6:	f000 f82b 	bl	8004950 <__swsetup_r>
 80048fa:	b118      	cbz	r0, 8004904 <__swbuf_r+0x32>
 80048fc:	f04f 37ff 	mov.w	r7, #4294967295
 8004900:	4638      	mov	r0, r7
 8004902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	6922      	ldr	r2, [r4, #16]
 8004908:	b2f6      	uxtb	r6, r6
 800490a:	1a98      	subs	r0, r3, r2
 800490c:	6963      	ldr	r3, [r4, #20]
 800490e:	4637      	mov	r7, r6
 8004910:	4283      	cmp	r3, r0
 8004912:	dc05      	bgt.n	8004920 <__swbuf_r+0x4e>
 8004914:	4621      	mov	r1, r4
 8004916:	4628      	mov	r0, r5
 8004918:	f000 fe9a 	bl	8005650 <_fflush_r>
 800491c:	2800      	cmp	r0, #0
 800491e:	d1ed      	bne.n	80048fc <__swbuf_r+0x2a>
 8004920:	68a3      	ldr	r3, [r4, #8]
 8004922:	3b01      	subs	r3, #1
 8004924:	60a3      	str	r3, [r4, #8]
 8004926:	6823      	ldr	r3, [r4, #0]
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	6022      	str	r2, [r4, #0]
 800492c:	701e      	strb	r6, [r3, #0]
 800492e:	6962      	ldr	r2, [r4, #20]
 8004930:	1c43      	adds	r3, r0, #1
 8004932:	429a      	cmp	r2, r3
 8004934:	d004      	beq.n	8004940 <__swbuf_r+0x6e>
 8004936:	89a3      	ldrh	r3, [r4, #12]
 8004938:	07db      	lsls	r3, r3, #31
 800493a:	d5e1      	bpl.n	8004900 <__swbuf_r+0x2e>
 800493c:	2e0a      	cmp	r6, #10
 800493e:	d1df      	bne.n	8004900 <__swbuf_r+0x2e>
 8004940:	4621      	mov	r1, r4
 8004942:	4628      	mov	r0, r5
 8004944:	f000 fe84 	bl	8005650 <_fflush_r>
 8004948:	2800      	cmp	r0, #0
 800494a:	d0d9      	beq.n	8004900 <__swbuf_r+0x2e>
 800494c:	e7d6      	b.n	80048fc <__swbuf_r+0x2a>
	...

08004950 <__swsetup_r>:
 8004950:	b538      	push	{r3, r4, r5, lr}
 8004952:	4b29      	ldr	r3, [pc, #164]	@ (80049f8 <__swsetup_r+0xa8>)
 8004954:	4605      	mov	r5, r0
 8004956:	6818      	ldr	r0, [r3, #0]
 8004958:	460c      	mov	r4, r1
 800495a:	b118      	cbz	r0, 8004964 <__swsetup_r+0x14>
 800495c:	6a03      	ldr	r3, [r0, #32]
 800495e:	b90b      	cbnz	r3, 8004964 <__swsetup_r+0x14>
 8004960:	f7ff feae 	bl	80046c0 <__sinit>
 8004964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004968:	0719      	lsls	r1, r3, #28
 800496a:	d422      	bmi.n	80049b2 <__swsetup_r+0x62>
 800496c:	06da      	lsls	r2, r3, #27
 800496e:	d407      	bmi.n	8004980 <__swsetup_r+0x30>
 8004970:	2209      	movs	r2, #9
 8004972:	602a      	str	r2, [r5, #0]
 8004974:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004978:	f04f 30ff 	mov.w	r0, #4294967295
 800497c:	81a3      	strh	r3, [r4, #12]
 800497e:	e033      	b.n	80049e8 <__swsetup_r+0x98>
 8004980:	0758      	lsls	r0, r3, #29
 8004982:	d512      	bpl.n	80049aa <__swsetup_r+0x5a>
 8004984:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004986:	b141      	cbz	r1, 800499a <__swsetup_r+0x4a>
 8004988:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800498c:	4299      	cmp	r1, r3
 800498e:	d002      	beq.n	8004996 <__swsetup_r+0x46>
 8004990:	4628      	mov	r0, r5
 8004992:	f000 f8bd 	bl	8004b10 <_free_r>
 8004996:	2300      	movs	r3, #0
 8004998:	6363      	str	r3, [r4, #52]	@ 0x34
 800499a:	89a3      	ldrh	r3, [r4, #12]
 800499c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80049a0:	81a3      	strh	r3, [r4, #12]
 80049a2:	2300      	movs	r3, #0
 80049a4:	6063      	str	r3, [r4, #4]
 80049a6:	6923      	ldr	r3, [r4, #16]
 80049a8:	6023      	str	r3, [r4, #0]
 80049aa:	89a3      	ldrh	r3, [r4, #12]
 80049ac:	f043 0308 	orr.w	r3, r3, #8
 80049b0:	81a3      	strh	r3, [r4, #12]
 80049b2:	6923      	ldr	r3, [r4, #16]
 80049b4:	b94b      	cbnz	r3, 80049ca <__swsetup_r+0x7a>
 80049b6:	89a3      	ldrh	r3, [r4, #12]
 80049b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80049bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049c0:	d003      	beq.n	80049ca <__swsetup_r+0x7a>
 80049c2:	4621      	mov	r1, r4
 80049c4:	4628      	mov	r0, r5
 80049c6:	f000 fe90 	bl	80056ea <__smakebuf_r>
 80049ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049ce:	f013 0201 	ands.w	r2, r3, #1
 80049d2:	d00a      	beq.n	80049ea <__swsetup_r+0x9a>
 80049d4:	2200      	movs	r2, #0
 80049d6:	60a2      	str	r2, [r4, #8]
 80049d8:	6962      	ldr	r2, [r4, #20]
 80049da:	4252      	negs	r2, r2
 80049dc:	61a2      	str	r2, [r4, #24]
 80049de:	6922      	ldr	r2, [r4, #16]
 80049e0:	b942      	cbnz	r2, 80049f4 <__swsetup_r+0xa4>
 80049e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80049e6:	d1c5      	bne.n	8004974 <__swsetup_r+0x24>
 80049e8:	bd38      	pop	{r3, r4, r5, pc}
 80049ea:	0799      	lsls	r1, r3, #30
 80049ec:	bf58      	it	pl
 80049ee:	6962      	ldrpl	r2, [r4, #20]
 80049f0:	60a2      	str	r2, [r4, #8]
 80049f2:	e7f4      	b.n	80049de <__swsetup_r+0x8e>
 80049f4:	2000      	movs	r0, #0
 80049f6:	e7f7      	b.n	80049e8 <__swsetup_r+0x98>
 80049f8:	20000020 	.word	0x20000020

080049fc <memset>:
 80049fc:	4603      	mov	r3, r0
 80049fe:	4402      	add	r2, r0
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d100      	bne.n	8004a06 <memset+0xa>
 8004a04:	4770      	bx	lr
 8004a06:	f803 1b01 	strb.w	r1, [r3], #1
 8004a0a:	e7f9      	b.n	8004a00 <memset+0x4>

08004a0c <_close_r>:
 8004a0c:	b538      	push	{r3, r4, r5, lr}
 8004a0e:	2300      	movs	r3, #0
 8004a10:	4d05      	ldr	r5, [pc, #20]	@ (8004a28 <_close_r+0x1c>)
 8004a12:	4604      	mov	r4, r0
 8004a14:	4608      	mov	r0, r1
 8004a16:	602b      	str	r3, [r5, #0]
 8004a18:	f7fc f95d 	bl	8000cd6 <_close>
 8004a1c:	1c43      	adds	r3, r0, #1
 8004a1e:	d102      	bne.n	8004a26 <_close_r+0x1a>
 8004a20:	682b      	ldr	r3, [r5, #0]
 8004a22:	b103      	cbz	r3, 8004a26 <_close_r+0x1a>
 8004a24:	6023      	str	r3, [r4, #0]
 8004a26:	bd38      	pop	{r3, r4, r5, pc}
 8004a28:	200012b0 	.word	0x200012b0

08004a2c <_lseek_r>:
 8004a2c:	b538      	push	{r3, r4, r5, lr}
 8004a2e:	4604      	mov	r4, r0
 8004a30:	4608      	mov	r0, r1
 8004a32:	4611      	mov	r1, r2
 8004a34:	2200      	movs	r2, #0
 8004a36:	4d05      	ldr	r5, [pc, #20]	@ (8004a4c <_lseek_r+0x20>)
 8004a38:	602a      	str	r2, [r5, #0]
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	f7fc f96f 	bl	8000d1e <_lseek>
 8004a40:	1c43      	adds	r3, r0, #1
 8004a42:	d102      	bne.n	8004a4a <_lseek_r+0x1e>
 8004a44:	682b      	ldr	r3, [r5, #0]
 8004a46:	b103      	cbz	r3, 8004a4a <_lseek_r+0x1e>
 8004a48:	6023      	str	r3, [r4, #0]
 8004a4a:	bd38      	pop	{r3, r4, r5, pc}
 8004a4c:	200012b0 	.word	0x200012b0

08004a50 <_read_r>:
 8004a50:	b538      	push	{r3, r4, r5, lr}
 8004a52:	4604      	mov	r4, r0
 8004a54:	4608      	mov	r0, r1
 8004a56:	4611      	mov	r1, r2
 8004a58:	2200      	movs	r2, #0
 8004a5a:	4d05      	ldr	r5, [pc, #20]	@ (8004a70 <_read_r+0x20>)
 8004a5c:	602a      	str	r2, [r5, #0]
 8004a5e:	461a      	mov	r2, r3
 8004a60:	f7fc f900 	bl	8000c64 <_read>
 8004a64:	1c43      	adds	r3, r0, #1
 8004a66:	d102      	bne.n	8004a6e <_read_r+0x1e>
 8004a68:	682b      	ldr	r3, [r5, #0]
 8004a6a:	b103      	cbz	r3, 8004a6e <_read_r+0x1e>
 8004a6c:	6023      	str	r3, [r4, #0]
 8004a6e:	bd38      	pop	{r3, r4, r5, pc}
 8004a70:	200012b0 	.word	0x200012b0

08004a74 <_write_r>:
 8004a74:	b538      	push	{r3, r4, r5, lr}
 8004a76:	4604      	mov	r4, r0
 8004a78:	4608      	mov	r0, r1
 8004a7a:	4611      	mov	r1, r2
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	4d05      	ldr	r5, [pc, #20]	@ (8004a94 <_write_r+0x20>)
 8004a80:	602a      	str	r2, [r5, #0]
 8004a82:	461a      	mov	r2, r3
 8004a84:	f7fc f90b 	bl	8000c9e <_write>
 8004a88:	1c43      	adds	r3, r0, #1
 8004a8a:	d102      	bne.n	8004a92 <_write_r+0x1e>
 8004a8c:	682b      	ldr	r3, [r5, #0]
 8004a8e:	b103      	cbz	r3, 8004a92 <_write_r+0x1e>
 8004a90:	6023      	str	r3, [r4, #0]
 8004a92:	bd38      	pop	{r3, r4, r5, pc}
 8004a94:	200012b0 	.word	0x200012b0

08004a98 <__errno>:
 8004a98:	4b01      	ldr	r3, [pc, #4]	@ (8004aa0 <__errno+0x8>)
 8004a9a:	6818      	ldr	r0, [r3, #0]
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	20000020 	.word	0x20000020

08004aa4 <__libc_init_array>:
 8004aa4:	b570      	push	{r4, r5, r6, lr}
 8004aa6:	2600      	movs	r6, #0
 8004aa8:	4d0c      	ldr	r5, [pc, #48]	@ (8004adc <__libc_init_array+0x38>)
 8004aaa:	4c0d      	ldr	r4, [pc, #52]	@ (8004ae0 <__libc_init_array+0x3c>)
 8004aac:	1b64      	subs	r4, r4, r5
 8004aae:	10a4      	asrs	r4, r4, #2
 8004ab0:	42a6      	cmp	r6, r4
 8004ab2:	d109      	bne.n	8004ac8 <__libc_init_array+0x24>
 8004ab4:	f000 fee6 	bl	8005884 <_init>
 8004ab8:	2600      	movs	r6, #0
 8004aba:	4d0a      	ldr	r5, [pc, #40]	@ (8004ae4 <__libc_init_array+0x40>)
 8004abc:	4c0a      	ldr	r4, [pc, #40]	@ (8004ae8 <__libc_init_array+0x44>)
 8004abe:	1b64      	subs	r4, r4, r5
 8004ac0:	10a4      	asrs	r4, r4, #2
 8004ac2:	42a6      	cmp	r6, r4
 8004ac4:	d105      	bne.n	8004ad2 <__libc_init_array+0x2e>
 8004ac6:	bd70      	pop	{r4, r5, r6, pc}
 8004ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004acc:	4798      	blx	r3
 8004ace:	3601      	adds	r6, #1
 8004ad0:	e7ee      	b.n	8004ab0 <__libc_init_array+0xc>
 8004ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ad6:	4798      	blx	r3
 8004ad8:	3601      	adds	r6, #1
 8004ada:	e7f2      	b.n	8004ac2 <__libc_init_array+0x1e>
 8004adc:	08005a14 	.word	0x08005a14
 8004ae0:	08005a14 	.word	0x08005a14
 8004ae4:	08005a14 	.word	0x08005a14
 8004ae8:	08005a18 	.word	0x08005a18

08004aec <__retarget_lock_init_recursive>:
 8004aec:	4770      	bx	lr

08004aee <__retarget_lock_acquire_recursive>:
 8004aee:	4770      	bx	lr

08004af0 <__retarget_lock_release_recursive>:
 8004af0:	4770      	bx	lr

08004af2 <memcpy>:
 8004af2:	440a      	add	r2, r1
 8004af4:	4291      	cmp	r1, r2
 8004af6:	f100 33ff 	add.w	r3, r0, #4294967295
 8004afa:	d100      	bne.n	8004afe <memcpy+0xc>
 8004afc:	4770      	bx	lr
 8004afe:	b510      	push	{r4, lr}
 8004b00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b04:	4291      	cmp	r1, r2
 8004b06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b0a:	d1f9      	bne.n	8004b00 <memcpy+0xe>
 8004b0c:	bd10      	pop	{r4, pc}
	...

08004b10 <_free_r>:
 8004b10:	b538      	push	{r3, r4, r5, lr}
 8004b12:	4605      	mov	r5, r0
 8004b14:	2900      	cmp	r1, #0
 8004b16:	d040      	beq.n	8004b9a <_free_r+0x8a>
 8004b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b1c:	1f0c      	subs	r4, r1, #4
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	bfb8      	it	lt
 8004b22:	18e4      	addlt	r4, r4, r3
 8004b24:	f000 f8de 	bl	8004ce4 <__malloc_lock>
 8004b28:	4a1c      	ldr	r2, [pc, #112]	@ (8004b9c <_free_r+0x8c>)
 8004b2a:	6813      	ldr	r3, [r2, #0]
 8004b2c:	b933      	cbnz	r3, 8004b3c <_free_r+0x2c>
 8004b2e:	6063      	str	r3, [r4, #4]
 8004b30:	6014      	str	r4, [r2, #0]
 8004b32:	4628      	mov	r0, r5
 8004b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b38:	f000 b8da 	b.w	8004cf0 <__malloc_unlock>
 8004b3c:	42a3      	cmp	r3, r4
 8004b3e:	d908      	bls.n	8004b52 <_free_r+0x42>
 8004b40:	6820      	ldr	r0, [r4, #0]
 8004b42:	1821      	adds	r1, r4, r0
 8004b44:	428b      	cmp	r3, r1
 8004b46:	bf01      	itttt	eq
 8004b48:	6819      	ldreq	r1, [r3, #0]
 8004b4a:	685b      	ldreq	r3, [r3, #4]
 8004b4c:	1809      	addeq	r1, r1, r0
 8004b4e:	6021      	streq	r1, [r4, #0]
 8004b50:	e7ed      	b.n	8004b2e <_free_r+0x1e>
 8004b52:	461a      	mov	r2, r3
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	b10b      	cbz	r3, 8004b5c <_free_r+0x4c>
 8004b58:	42a3      	cmp	r3, r4
 8004b5a:	d9fa      	bls.n	8004b52 <_free_r+0x42>
 8004b5c:	6811      	ldr	r1, [r2, #0]
 8004b5e:	1850      	adds	r0, r2, r1
 8004b60:	42a0      	cmp	r0, r4
 8004b62:	d10b      	bne.n	8004b7c <_free_r+0x6c>
 8004b64:	6820      	ldr	r0, [r4, #0]
 8004b66:	4401      	add	r1, r0
 8004b68:	1850      	adds	r0, r2, r1
 8004b6a:	4283      	cmp	r3, r0
 8004b6c:	6011      	str	r1, [r2, #0]
 8004b6e:	d1e0      	bne.n	8004b32 <_free_r+0x22>
 8004b70:	6818      	ldr	r0, [r3, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	4408      	add	r0, r1
 8004b76:	6010      	str	r0, [r2, #0]
 8004b78:	6053      	str	r3, [r2, #4]
 8004b7a:	e7da      	b.n	8004b32 <_free_r+0x22>
 8004b7c:	d902      	bls.n	8004b84 <_free_r+0x74>
 8004b7e:	230c      	movs	r3, #12
 8004b80:	602b      	str	r3, [r5, #0]
 8004b82:	e7d6      	b.n	8004b32 <_free_r+0x22>
 8004b84:	6820      	ldr	r0, [r4, #0]
 8004b86:	1821      	adds	r1, r4, r0
 8004b88:	428b      	cmp	r3, r1
 8004b8a:	bf01      	itttt	eq
 8004b8c:	6819      	ldreq	r1, [r3, #0]
 8004b8e:	685b      	ldreq	r3, [r3, #4]
 8004b90:	1809      	addeq	r1, r1, r0
 8004b92:	6021      	streq	r1, [r4, #0]
 8004b94:	6063      	str	r3, [r4, #4]
 8004b96:	6054      	str	r4, [r2, #4]
 8004b98:	e7cb      	b.n	8004b32 <_free_r+0x22>
 8004b9a:	bd38      	pop	{r3, r4, r5, pc}
 8004b9c:	200012bc 	.word	0x200012bc

08004ba0 <sbrk_aligned>:
 8004ba0:	b570      	push	{r4, r5, r6, lr}
 8004ba2:	4e0f      	ldr	r6, [pc, #60]	@ (8004be0 <sbrk_aligned+0x40>)
 8004ba4:	460c      	mov	r4, r1
 8004ba6:	6831      	ldr	r1, [r6, #0]
 8004ba8:	4605      	mov	r5, r0
 8004baa:	b911      	cbnz	r1, 8004bb2 <sbrk_aligned+0x12>
 8004bac:	f000 fe16 	bl	80057dc <_sbrk_r>
 8004bb0:	6030      	str	r0, [r6, #0]
 8004bb2:	4621      	mov	r1, r4
 8004bb4:	4628      	mov	r0, r5
 8004bb6:	f000 fe11 	bl	80057dc <_sbrk_r>
 8004bba:	1c43      	adds	r3, r0, #1
 8004bbc:	d103      	bne.n	8004bc6 <sbrk_aligned+0x26>
 8004bbe:	f04f 34ff 	mov.w	r4, #4294967295
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	bd70      	pop	{r4, r5, r6, pc}
 8004bc6:	1cc4      	adds	r4, r0, #3
 8004bc8:	f024 0403 	bic.w	r4, r4, #3
 8004bcc:	42a0      	cmp	r0, r4
 8004bce:	d0f8      	beq.n	8004bc2 <sbrk_aligned+0x22>
 8004bd0:	1a21      	subs	r1, r4, r0
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	f000 fe02 	bl	80057dc <_sbrk_r>
 8004bd8:	3001      	adds	r0, #1
 8004bda:	d1f2      	bne.n	8004bc2 <sbrk_aligned+0x22>
 8004bdc:	e7ef      	b.n	8004bbe <sbrk_aligned+0x1e>
 8004bde:	bf00      	nop
 8004be0:	200012b8 	.word	0x200012b8

08004be4 <_malloc_r>:
 8004be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004be8:	1ccd      	adds	r5, r1, #3
 8004bea:	f025 0503 	bic.w	r5, r5, #3
 8004bee:	3508      	adds	r5, #8
 8004bf0:	2d0c      	cmp	r5, #12
 8004bf2:	bf38      	it	cc
 8004bf4:	250c      	movcc	r5, #12
 8004bf6:	2d00      	cmp	r5, #0
 8004bf8:	4606      	mov	r6, r0
 8004bfa:	db01      	blt.n	8004c00 <_malloc_r+0x1c>
 8004bfc:	42a9      	cmp	r1, r5
 8004bfe:	d904      	bls.n	8004c0a <_malloc_r+0x26>
 8004c00:	230c      	movs	r3, #12
 8004c02:	6033      	str	r3, [r6, #0]
 8004c04:	2000      	movs	r0, #0
 8004c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ce0 <_malloc_r+0xfc>
 8004c0e:	f000 f869 	bl	8004ce4 <__malloc_lock>
 8004c12:	f8d8 3000 	ldr.w	r3, [r8]
 8004c16:	461c      	mov	r4, r3
 8004c18:	bb44      	cbnz	r4, 8004c6c <_malloc_r+0x88>
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	f7ff ffbf 	bl	8004ba0 <sbrk_aligned>
 8004c22:	1c43      	adds	r3, r0, #1
 8004c24:	4604      	mov	r4, r0
 8004c26:	d158      	bne.n	8004cda <_malloc_r+0xf6>
 8004c28:	f8d8 4000 	ldr.w	r4, [r8]
 8004c2c:	4627      	mov	r7, r4
 8004c2e:	2f00      	cmp	r7, #0
 8004c30:	d143      	bne.n	8004cba <_malloc_r+0xd6>
 8004c32:	2c00      	cmp	r4, #0
 8004c34:	d04b      	beq.n	8004cce <_malloc_r+0xea>
 8004c36:	6823      	ldr	r3, [r4, #0]
 8004c38:	4639      	mov	r1, r7
 8004c3a:	4630      	mov	r0, r6
 8004c3c:	eb04 0903 	add.w	r9, r4, r3
 8004c40:	f000 fdcc 	bl	80057dc <_sbrk_r>
 8004c44:	4581      	cmp	r9, r0
 8004c46:	d142      	bne.n	8004cce <_malloc_r+0xea>
 8004c48:	6821      	ldr	r1, [r4, #0]
 8004c4a:	4630      	mov	r0, r6
 8004c4c:	1a6d      	subs	r5, r5, r1
 8004c4e:	4629      	mov	r1, r5
 8004c50:	f7ff ffa6 	bl	8004ba0 <sbrk_aligned>
 8004c54:	3001      	adds	r0, #1
 8004c56:	d03a      	beq.n	8004cce <_malloc_r+0xea>
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	442b      	add	r3, r5
 8004c5c:	6023      	str	r3, [r4, #0]
 8004c5e:	f8d8 3000 	ldr.w	r3, [r8]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	bb62      	cbnz	r2, 8004cc0 <_malloc_r+0xdc>
 8004c66:	f8c8 7000 	str.w	r7, [r8]
 8004c6a:	e00f      	b.n	8004c8c <_malloc_r+0xa8>
 8004c6c:	6822      	ldr	r2, [r4, #0]
 8004c6e:	1b52      	subs	r2, r2, r5
 8004c70:	d420      	bmi.n	8004cb4 <_malloc_r+0xd0>
 8004c72:	2a0b      	cmp	r2, #11
 8004c74:	d917      	bls.n	8004ca6 <_malloc_r+0xc2>
 8004c76:	1961      	adds	r1, r4, r5
 8004c78:	42a3      	cmp	r3, r4
 8004c7a:	6025      	str	r5, [r4, #0]
 8004c7c:	bf18      	it	ne
 8004c7e:	6059      	strne	r1, [r3, #4]
 8004c80:	6863      	ldr	r3, [r4, #4]
 8004c82:	bf08      	it	eq
 8004c84:	f8c8 1000 	streq.w	r1, [r8]
 8004c88:	5162      	str	r2, [r4, r5]
 8004c8a:	604b      	str	r3, [r1, #4]
 8004c8c:	4630      	mov	r0, r6
 8004c8e:	f000 f82f 	bl	8004cf0 <__malloc_unlock>
 8004c92:	f104 000b 	add.w	r0, r4, #11
 8004c96:	1d23      	adds	r3, r4, #4
 8004c98:	f020 0007 	bic.w	r0, r0, #7
 8004c9c:	1ac2      	subs	r2, r0, r3
 8004c9e:	bf1c      	itt	ne
 8004ca0:	1a1b      	subne	r3, r3, r0
 8004ca2:	50a3      	strne	r3, [r4, r2]
 8004ca4:	e7af      	b.n	8004c06 <_malloc_r+0x22>
 8004ca6:	6862      	ldr	r2, [r4, #4]
 8004ca8:	42a3      	cmp	r3, r4
 8004caa:	bf0c      	ite	eq
 8004cac:	f8c8 2000 	streq.w	r2, [r8]
 8004cb0:	605a      	strne	r2, [r3, #4]
 8004cb2:	e7eb      	b.n	8004c8c <_malloc_r+0xa8>
 8004cb4:	4623      	mov	r3, r4
 8004cb6:	6864      	ldr	r4, [r4, #4]
 8004cb8:	e7ae      	b.n	8004c18 <_malloc_r+0x34>
 8004cba:	463c      	mov	r4, r7
 8004cbc:	687f      	ldr	r7, [r7, #4]
 8004cbe:	e7b6      	b.n	8004c2e <_malloc_r+0x4a>
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	42a3      	cmp	r3, r4
 8004cc6:	d1fb      	bne.n	8004cc0 <_malloc_r+0xdc>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	6053      	str	r3, [r2, #4]
 8004ccc:	e7de      	b.n	8004c8c <_malloc_r+0xa8>
 8004cce:	230c      	movs	r3, #12
 8004cd0:	4630      	mov	r0, r6
 8004cd2:	6033      	str	r3, [r6, #0]
 8004cd4:	f000 f80c 	bl	8004cf0 <__malloc_unlock>
 8004cd8:	e794      	b.n	8004c04 <_malloc_r+0x20>
 8004cda:	6005      	str	r5, [r0, #0]
 8004cdc:	e7d6      	b.n	8004c8c <_malloc_r+0xa8>
 8004cde:	bf00      	nop
 8004ce0:	200012bc 	.word	0x200012bc

08004ce4 <__malloc_lock>:
 8004ce4:	4801      	ldr	r0, [pc, #4]	@ (8004cec <__malloc_lock+0x8>)
 8004ce6:	f7ff bf02 	b.w	8004aee <__retarget_lock_acquire_recursive>
 8004cea:	bf00      	nop
 8004cec:	200012b4 	.word	0x200012b4

08004cf0 <__malloc_unlock>:
 8004cf0:	4801      	ldr	r0, [pc, #4]	@ (8004cf8 <__malloc_unlock+0x8>)
 8004cf2:	f7ff befd 	b.w	8004af0 <__retarget_lock_release_recursive>
 8004cf6:	bf00      	nop
 8004cf8:	200012b4 	.word	0x200012b4

08004cfc <__ssputs_r>:
 8004cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d00:	461f      	mov	r7, r3
 8004d02:	688e      	ldr	r6, [r1, #8]
 8004d04:	4682      	mov	sl, r0
 8004d06:	42be      	cmp	r6, r7
 8004d08:	460c      	mov	r4, r1
 8004d0a:	4690      	mov	r8, r2
 8004d0c:	680b      	ldr	r3, [r1, #0]
 8004d0e:	d82d      	bhi.n	8004d6c <__ssputs_r+0x70>
 8004d10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004d18:	d026      	beq.n	8004d68 <__ssputs_r+0x6c>
 8004d1a:	6965      	ldr	r5, [r4, #20]
 8004d1c:	6909      	ldr	r1, [r1, #16]
 8004d1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d22:	eba3 0901 	sub.w	r9, r3, r1
 8004d26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d2a:	1c7b      	adds	r3, r7, #1
 8004d2c:	444b      	add	r3, r9
 8004d2e:	106d      	asrs	r5, r5, #1
 8004d30:	429d      	cmp	r5, r3
 8004d32:	bf38      	it	cc
 8004d34:	461d      	movcc	r5, r3
 8004d36:	0553      	lsls	r3, r2, #21
 8004d38:	d527      	bpl.n	8004d8a <__ssputs_r+0x8e>
 8004d3a:	4629      	mov	r1, r5
 8004d3c:	f7ff ff52 	bl	8004be4 <_malloc_r>
 8004d40:	4606      	mov	r6, r0
 8004d42:	b360      	cbz	r0, 8004d9e <__ssputs_r+0xa2>
 8004d44:	464a      	mov	r2, r9
 8004d46:	6921      	ldr	r1, [r4, #16]
 8004d48:	f7ff fed3 	bl	8004af2 <memcpy>
 8004d4c:	89a3      	ldrh	r3, [r4, #12]
 8004d4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004d52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d56:	81a3      	strh	r3, [r4, #12]
 8004d58:	6126      	str	r6, [r4, #16]
 8004d5a:	444e      	add	r6, r9
 8004d5c:	6026      	str	r6, [r4, #0]
 8004d5e:	463e      	mov	r6, r7
 8004d60:	6165      	str	r5, [r4, #20]
 8004d62:	eba5 0509 	sub.w	r5, r5, r9
 8004d66:	60a5      	str	r5, [r4, #8]
 8004d68:	42be      	cmp	r6, r7
 8004d6a:	d900      	bls.n	8004d6e <__ssputs_r+0x72>
 8004d6c:	463e      	mov	r6, r7
 8004d6e:	4632      	mov	r2, r6
 8004d70:	4641      	mov	r1, r8
 8004d72:	6820      	ldr	r0, [r4, #0]
 8004d74:	f000 fcf5 	bl	8005762 <memmove>
 8004d78:	2000      	movs	r0, #0
 8004d7a:	68a3      	ldr	r3, [r4, #8]
 8004d7c:	1b9b      	subs	r3, r3, r6
 8004d7e:	60a3      	str	r3, [r4, #8]
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	4433      	add	r3, r6
 8004d84:	6023      	str	r3, [r4, #0]
 8004d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d8a:	462a      	mov	r2, r5
 8004d8c:	f000 fd44 	bl	8005818 <_realloc_r>
 8004d90:	4606      	mov	r6, r0
 8004d92:	2800      	cmp	r0, #0
 8004d94:	d1e0      	bne.n	8004d58 <__ssputs_r+0x5c>
 8004d96:	4650      	mov	r0, sl
 8004d98:	6921      	ldr	r1, [r4, #16]
 8004d9a:	f7ff feb9 	bl	8004b10 <_free_r>
 8004d9e:	230c      	movs	r3, #12
 8004da0:	f8ca 3000 	str.w	r3, [sl]
 8004da4:	89a3      	ldrh	r3, [r4, #12]
 8004da6:	f04f 30ff 	mov.w	r0, #4294967295
 8004daa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004dae:	81a3      	strh	r3, [r4, #12]
 8004db0:	e7e9      	b.n	8004d86 <__ssputs_r+0x8a>
	...

08004db4 <_svfiprintf_r>:
 8004db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db8:	4698      	mov	r8, r3
 8004dba:	898b      	ldrh	r3, [r1, #12]
 8004dbc:	4607      	mov	r7, r0
 8004dbe:	061b      	lsls	r3, r3, #24
 8004dc0:	460d      	mov	r5, r1
 8004dc2:	4614      	mov	r4, r2
 8004dc4:	b09d      	sub	sp, #116	@ 0x74
 8004dc6:	d510      	bpl.n	8004dea <_svfiprintf_r+0x36>
 8004dc8:	690b      	ldr	r3, [r1, #16]
 8004dca:	b973      	cbnz	r3, 8004dea <_svfiprintf_r+0x36>
 8004dcc:	2140      	movs	r1, #64	@ 0x40
 8004dce:	f7ff ff09 	bl	8004be4 <_malloc_r>
 8004dd2:	6028      	str	r0, [r5, #0]
 8004dd4:	6128      	str	r0, [r5, #16]
 8004dd6:	b930      	cbnz	r0, 8004de6 <_svfiprintf_r+0x32>
 8004dd8:	230c      	movs	r3, #12
 8004dda:	603b      	str	r3, [r7, #0]
 8004ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8004de0:	b01d      	add	sp, #116	@ 0x74
 8004de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de6:	2340      	movs	r3, #64	@ 0x40
 8004de8:	616b      	str	r3, [r5, #20]
 8004dea:	2300      	movs	r3, #0
 8004dec:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dee:	2320      	movs	r3, #32
 8004df0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004df4:	2330      	movs	r3, #48	@ 0x30
 8004df6:	f04f 0901 	mov.w	r9, #1
 8004dfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dfe:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004f98 <_svfiprintf_r+0x1e4>
 8004e02:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e06:	4623      	mov	r3, r4
 8004e08:	469a      	mov	sl, r3
 8004e0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e0e:	b10a      	cbz	r2, 8004e14 <_svfiprintf_r+0x60>
 8004e10:	2a25      	cmp	r2, #37	@ 0x25
 8004e12:	d1f9      	bne.n	8004e08 <_svfiprintf_r+0x54>
 8004e14:	ebba 0b04 	subs.w	fp, sl, r4
 8004e18:	d00b      	beq.n	8004e32 <_svfiprintf_r+0x7e>
 8004e1a:	465b      	mov	r3, fp
 8004e1c:	4622      	mov	r2, r4
 8004e1e:	4629      	mov	r1, r5
 8004e20:	4638      	mov	r0, r7
 8004e22:	f7ff ff6b 	bl	8004cfc <__ssputs_r>
 8004e26:	3001      	adds	r0, #1
 8004e28:	f000 80a7 	beq.w	8004f7a <_svfiprintf_r+0x1c6>
 8004e2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e2e:	445a      	add	r2, fp
 8004e30:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e32:	f89a 3000 	ldrb.w	r3, [sl]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 809f 	beq.w	8004f7a <_svfiprintf_r+0x1c6>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e46:	f10a 0a01 	add.w	sl, sl, #1
 8004e4a:	9304      	str	r3, [sp, #16]
 8004e4c:	9307      	str	r3, [sp, #28]
 8004e4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e52:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e54:	4654      	mov	r4, sl
 8004e56:	2205      	movs	r2, #5
 8004e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e5c:	484e      	ldr	r0, [pc, #312]	@ (8004f98 <_svfiprintf_r+0x1e4>)
 8004e5e:	f000 fccd 	bl	80057fc <memchr>
 8004e62:	9a04      	ldr	r2, [sp, #16]
 8004e64:	b9d8      	cbnz	r0, 8004e9e <_svfiprintf_r+0xea>
 8004e66:	06d0      	lsls	r0, r2, #27
 8004e68:	bf44      	itt	mi
 8004e6a:	2320      	movmi	r3, #32
 8004e6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e70:	0711      	lsls	r1, r2, #28
 8004e72:	bf44      	itt	mi
 8004e74:	232b      	movmi	r3, #43	@ 0x2b
 8004e76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e7a:	f89a 3000 	ldrb.w	r3, [sl]
 8004e7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e80:	d015      	beq.n	8004eae <_svfiprintf_r+0xfa>
 8004e82:	4654      	mov	r4, sl
 8004e84:	2000      	movs	r0, #0
 8004e86:	f04f 0c0a 	mov.w	ip, #10
 8004e8a:	9a07      	ldr	r2, [sp, #28]
 8004e8c:	4621      	mov	r1, r4
 8004e8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e92:	3b30      	subs	r3, #48	@ 0x30
 8004e94:	2b09      	cmp	r3, #9
 8004e96:	d94b      	bls.n	8004f30 <_svfiprintf_r+0x17c>
 8004e98:	b1b0      	cbz	r0, 8004ec8 <_svfiprintf_r+0x114>
 8004e9a:	9207      	str	r2, [sp, #28]
 8004e9c:	e014      	b.n	8004ec8 <_svfiprintf_r+0x114>
 8004e9e:	eba0 0308 	sub.w	r3, r0, r8
 8004ea2:	fa09 f303 	lsl.w	r3, r9, r3
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	46a2      	mov	sl, r4
 8004eaa:	9304      	str	r3, [sp, #16]
 8004eac:	e7d2      	b.n	8004e54 <_svfiprintf_r+0xa0>
 8004eae:	9b03      	ldr	r3, [sp, #12]
 8004eb0:	1d19      	adds	r1, r3, #4
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	9103      	str	r1, [sp, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	bfbb      	ittet	lt
 8004eba:	425b      	neglt	r3, r3
 8004ebc:	f042 0202 	orrlt.w	r2, r2, #2
 8004ec0:	9307      	strge	r3, [sp, #28]
 8004ec2:	9307      	strlt	r3, [sp, #28]
 8004ec4:	bfb8      	it	lt
 8004ec6:	9204      	strlt	r2, [sp, #16]
 8004ec8:	7823      	ldrb	r3, [r4, #0]
 8004eca:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ecc:	d10a      	bne.n	8004ee4 <_svfiprintf_r+0x130>
 8004ece:	7863      	ldrb	r3, [r4, #1]
 8004ed0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ed2:	d132      	bne.n	8004f3a <_svfiprintf_r+0x186>
 8004ed4:	9b03      	ldr	r3, [sp, #12]
 8004ed6:	3402      	adds	r4, #2
 8004ed8:	1d1a      	adds	r2, r3, #4
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	9203      	str	r2, [sp, #12]
 8004ede:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ee2:	9305      	str	r3, [sp, #20]
 8004ee4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004f9c <_svfiprintf_r+0x1e8>
 8004ee8:	2203      	movs	r2, #3
 8004eea:	4650      	mov	r0, sl
 8004eec:	7821      	ldrb	r1, [r4, #0]
 8004eee:	f000 fc85 	bl	80057fc <memchr>
 8004ef2:	b138      	cbz	r0, 8004f04 <_svfiprintf_r+0x150>
 8004ef4:	2240      	movs	r2, #64	@ 0x40
 8004ef6:	9b04      	ldr	r3, [sp, #16]
 8004ef8:	eba0 000a 	sub.w	r0, r0, sl
 8004efc:	4082      	lsls	r2, r0
 8004efe:	4313      	orrs	r3, r2
 8004f00:	3401      	adds	r4, #1
 8004f02:	9304      	str	r3, [sp, #16]
 8004f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f08:	2206      	movs	r2, #6
 8004f0a:	4825      	ldr	r0, [pc, #148]	@ (8004fa0 <_svfiprintf_r+0x1ec>)
 8004f0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f10:	f000 fc74 	bl	80057fc <memchr>
 8004f14:	2800      	cmp	r0, #0
 8004f16:	d036      	beq.n	8004f86 <_svfiprintf_r+0x1d2>
 8004f18:	4b22      	ldr	r3, [pc, #136]	@ (8004fa4 <_svfiprintf_r+0x1f0>)
 8004f1a:	bb1b      	cbnz	r3, 8004f64 <_svfiprintf_r+0x1b0>
 8004f1c:	9b03      	ldr	r3, [sp, #12]
 8004f1e:	3307      	adds	r3, #7
 8004f20:	f023 0307 	bic.w	r3, r3, #7
 8004f24:	3308      	adds	r3, #8
 8004f26:	9303      	str	r3, [sp, #12]
 8004f28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f2a:	4433      	add	r3, r6
 8004f2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f2e:	e76a      	b.n	8004e06 <_svfiprintf_r+0x52>
 8004f30:	460c      	mov	r4, r1
 8004f32:	2001      	movs	r0, #1
 8004f34:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f38:	e7a8      	b.n	8004e8c <_svfiprintf_r+0xd8>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	f04f 0c0a 	mov.w	ip, #10
 8004f40:	4619      	mov	r1, r3
 8004f42:	3401      	adds	r4, #1
 8004f44:	9305      	str	r3, [sp, #20]
 8004f46:	4620      	mov	r0, r4
 8004f48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f4c:	3a30      	subs	r2, #48	@ 0x30
 8004f4e:	2a09      	cmp	r2, #9
 8004f50:	d903      	bls.n	8004f5a <_svfiprintf_r+0x1a6>
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d0c6      	beq.n	8004ee4 <_svfiprintf_r+0x130>
 8004f56:	9105      	str	r1, [sp, #20]
 8004f58:	e7c4      	b.n	8004ee4 <_svfiprintf_r+0x130>
 8004f5a:	4604      	mov	r4, r0
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f62:	e7f0      	b.n	8004f46 <_svfiprintf_r+0x192>
 8004f64:	ab03      	add	r3, sp, #12
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	462a      	mov	r2, r5
 8004f6a:	4638      	mov	r0, r7
 8004f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8004fa8 <_svfiprintf_r+0x1f4>)
 8004f6e:	a904      	add	r1, sp, #16
 8004f70:	f3af 8000 	nop.w
 8004f74:	1c42      	adds	r2, r0, #1
 8004f76:	4606      	mov	r6, r0
 8004f78:	d1d6      	bne.n	8004f28 <_svfiprintf_r+0x174>
 8004f7a:	89ab      	ldrh	r3, [r5, #12]
 8004f7c:	065b      	lsls	r3, r3, #25
 8004f7e:	f53f af2d 	bmi.w	8004ddc <_svfiprintf_r+0x28>
 8004f82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f84:	e72c      	b.n	8004de0 <_svfiprintf_r+0x2c>
 8004f86:	ab03      	add	r3, sp, #12
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	462a      	mov	r2, r5
 8004f8c:	4638      	mov	r0, r7
 8004f8e:	4b06      	ldr	r3, [pc, #24]	@ (8004fa8 <_svfiprintf_r+0x1f4>)
 8004f90:	a904      	add	r1, sp, #16
 8004f92:	f000 f9bd 	bl	8005310 <_printf_i>
 8004f96:	e7ed      	b.n	8004f74 <_svfiprintf_r+0x1c0>
 8004f98:	080059d6 	.word	0x080059d6
 8004f9c:	080059dc 	.word	0x080059dc
 8004fa0:	080059e0 	.word	0x080059e0
 8004fa4:	00000000 	.word	0x00000000
 8004fa8:	08004cfd 	.word	0x08004cfd

08004fac <__sfputc_r>:
 8004fac:	6893      	ldr	r3, [r2, #8]
 8004fae:	b410      	push	{r4}
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	6093      	str	r3, [r2, #8]
 8004fb6:	da07      	bge.n	8004fc8 <__sfputc_r+0x1c>
 8004fb8:	6994      	ldr	r4, [r2, #24]
 8004fba:	42a3      	cmp	r3, r4
 8004fbc:	db01      	blt.n	8004fc2 <__sfputc_r+0x16>
 8004fbe:	290a      	cmp	r1, #10
 8004fc0:	d102      	bne.n	8004fc8 <__sfputc_r+0x1c>
 8004fc2:	bc10      	pop	{r4}
 8004fc4:	f7ff bc85 	b.w	80048d2 <__swbuf_r>
 8004fc8:	6813      	ldr	r3, [r2, #0]
 8004fca:	1c58      	adds	r0, r3, #1
 8004fcc:	6010      	str	r0, [r2, #0]
 8004fce:	7019      	strb	r1, [r3, #0]
 8004fd0:	4608      	mov	r0, r1
 8004fd2:	bc10      	pop	{r4}
 8004fd4:	4770      	bx	lr

08004fd6 <__sfputs_r>:
 8004fd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd8:	4606      	mov	r6, r0
 8004fda:	460f      	mov	r7, r1
 8004fdc:	4614      	mov	r4, r2
 8004fde:	18d5      	adds	r5, r2, r3
 8004fe0:	42ac      	cmp	r4, r5
 8004fe2:	d101      	bne.n	8004fe8 <__sfputs_r+0x12>
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	e007      	b.n	8004ff8 <__sfputs_r+0x22>
 8004fe8:	463a      	mov	r2, r7
 8004fea:	4630      	mov	r0, r6
 8004fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ff0:	f7ff ffdc 	bl	8004fac <__sfputc_r>
 8004ff4:	1c43      	adds	r3, r0, #1
 8004ff6:	d1f3      	bne.n	8004fe0 <__sfputs_r+0xa>
 8004ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ffc <_vfiprintf_r>:
 8004ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005000:	460d      	mov	r5, r1
 8005002:	4614      	mov	r4, r2
 8005004:	4698      	mov	r8, r3
 8005006:	4606      	mov	r6, r0
 8005008:	b09d      	sub	sp, #116	@ 0x74
 800500a:	b118      	cbz	r0, 8005014 <_vfiprintf_r+0x18>
 800500c:	6a03      	ldr	r3, [r0, #32]
 800500e:	b90b      	cbnz	r3, 8005014 <_vfiprintf_r+0x18>
 8005010:	f7ff fb56 	bl	80046c0 <__sinit>
 8005014:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005016:	07d9      	lsls	r1, r3, #31
 8005018:	d405      	bmi.n	8005026 <_vfiprintf_r+0x2a>
 800501a:	89ab      	ldrh	r3, [r5, #12]
 800501c:	059a      	lsls	r2, r3, #22
 800501e:	d402      	bmi.n	8005026 <_vfiprintf_r+0x2a>
 8005020:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005022:	f7ff fd64 	bl	8004aee <__retarget_lock_acquire_recursive>
 8005026:	89ab      	ldrh	r3, [r5, #12]
 8005028:	071b      	lsls	r3, r3, #28
 800502a:	d501      	bpl.n	8005030 <_vfiprintf_r+0x34>
 800502c:	692b      	ldr	r3, [r5, #16]
 800502e:	b99b      	cbnz	r3, 8005058 <_vfiprintf_r+0x5c>
 8005030:	4629      	mov	r1, r5
 8005032:	4630      	mov	r0, r6
 8005034:	f7ff fc8c 	bl	8004950 <__swsetup_r>
 8005038:	b170      	cbz	r0, 8005058 <_vfiprintf_r+0x5c>
 800503a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800503c:	07dc      	lsls	r4, r3, #31
 800503e:	d504      	bpl.n	800504a <_vfiprintf_r+0x4e>
 8005040:	f04f 30ff 	mov.w	r0, #4294967295
 8005044:	b01d      	add	sp, #116	@ 0x74
 8005046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800504a:	89ab      	ldrh	r3, [r5, #12]
 800504c:	0598      	lsls	r0, r3, #22
 800504e:	d4f7      	bmi.n	8005040 <_vfiprintf_r+0x44>
 8005050:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005052:	f7ff fd4d 	bl	8004af0 <__retarget_lock_release_recursive>
 8005056:	e7f3      	b.n	8005040 <_vfiprintf_r+0x44>
 8005058:	2300      	movs	r3, #0
 800505a:	9309      	str	r3, [sp, #36]	@ 0x24
 800505c:	2320      	movs	r3, #32
 800505e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005062:	2330      	movs	r3, #48	@ 0x30
 8005064:	f04f 0901 	mov.w	r9, #1
 8005068:	f8cd 800c 	str.w	r8, [sp, #12]
 800506c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005218 <_vfiprintf_r+0x21c>
 8005070:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005074:	4623      	mov	r3, r4
 8005076:	469a      	mov	sl, r3
 8005078:	f813 2b01 	ldrb.w	r2, [r3], #1
 800507c:	b10a      	cbz	r2, 8005082 <_vfiprintf_r+0x86>
 800507e:	2a25      	cmp	r2, #37	@ 0x25
 8005080:	d1f9      	bne.n	8005076 <_vfiprintf_r+0x7a>
 8005082:	ebba 0b04 	subs.w	fp, sl, r4
 8005086:	d00b      	beq.n	80050a0 <_vfiprintf_r+0xa4>
 8005088:	465b      	mov	r3, fp
 800508a:	4622      	mov	r2, r4
 800508c:	4629      	mov	r1, r5
 800508e:	4630      	mov	r0, r6
 8005090:	f7ff ffa1 	bl	8004fd6 <__sfputs_r>
 8005094:	3001      	adds	r0, #1
 8005096:	f000 80a7 	beq.w	80051e8 <_vfiprintf_r+0x1ec>
 800509a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800509c:	445a      	add	r2, fp
 800509e:	9209      	str	r2, [sp, #36]	@ 0x24
 80050a0:	f89a 3000 	ldrb.w	r3, [sl]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 809f 	beq.w	80051e8 <_vfiprintf_r+0x1ec>
 80050aa:	2300      	movs	r3, #0
 80050ac:	f04f 32ff 	mov.w	r2, #4294967295
 80050b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050b4:	f10a 0a01 	add.w	sl, sl, #1
 80050b8:	9304      	str	r3, [sp, #16]
 80050ba:	9307      	str	r3, [sp, #28]
 80050bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80050c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80050c2:	4654      	mov	r4, sl
 80050c4:	2205      	movs	r2, #5
 80050c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ca:	4853      	ldr	r0, [pc, #332]	@ (8005218 <_vfiprintf_r+0x21c>)
 80050cc:	f000 fb96 	bl	80057fc <memchr>
 80050d0:	9a04      	ldr	r2, [sp, #16]
 80050d2:	b9d8      	cbnz	r0, 800510c <_vfiprintf_r+0x110>
 80050d4:	06d1      	lsls	r1, r2, #27
 80050d6:	bf44      	itt	mi
 80050d8:	2320      	movmi	r3, #32
 80050da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050de:	0713      	lsls	r3, r2, #28
 80050e0:	bf44      	itt	mi
 80050e2:	232b      	movmi	r3, #43	@ 0x2b
 80050e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050e8:	f89a 3000 	ldrb.w	r3, [sl]
 80050ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80050ee:	d015      	beq.n	800511c <_vfiprintf_r+0x120>
 80050f0:	4654      	mov	r4, sl
 80050f2:	2000      	movs	r0, #0
 80050f4:	f04f 0c0a 	mov.w	ip, #10
 80050f8:	9a07      	ldr	r2, [sp, #28]
 80050fa:	4621      	mov	r1, r4
 80050fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005100:	3b30      	subs	r3, #48	@ 0x30
 8005102:	2b09      	cmp	r3, #9
 8005104:	d94b      	bls.n	800519e <_vfiprintf_r+0x1a2>
 8005106:	b1b0      	cbz	r0, 8005136 <_vfiprintf_r+0x13a>
 8005108:	9207      	str	r2, [sp, #28]
 800510a:	e014      	b.n	8005136 <_vfiprintf_r+0x13a>
 800510c:	eba0 0308 	sub.w	r3, r0, r8
 8005110:	fa09 f303 	lsl.w	r3, r9, r3
 8005114:	4313      	orrs	r3, r2
 8005116:	46a2      	mov	sl, r4
 8005118:	9304      	str	r3, [sp, #16]
 800511a:	e7d2      	b.n	80050c2 <_vfiprintf_r+0xc6>
 800511c:	9b03      	ldr	r3, [sp, #12]
 800511e:	1d19      	adds	r1, r3, #4
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	9103      	str	r1, [sp, #12]
 8005124:	2b00      	cmp	r3, #0
 8005126:	bfbb      	ittet	lt
 8005128:	425b      	neglt	r3, r3
 800512a:	f042 0202 	orrlt.w	r2, r2, #2
 800512e:	9307      	strge	r3, [sp, #28]
 8005130:	9307      	strlt	r3, [sp, #28]
 8005132:	bfb8      	it	lt
 8005134:	9204      	strlt	r2, [sp, #16]
 8005136:	7823      	ldrb	r3, [r4, #0]
 8005138:	2b2e      	cmp	r3, #46	@ 0x2e
 800513a:	d10a      	bne.n	8005152 <_vfiprintf_r+0x156>
 800513c:	7863      	ldrb	r3, [r4, #1]
 800513e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005140:	d132      	bne.n	80051a8 <_vfiprintf_r+0x1ac>
 8005142:	9b03      	ldr	r3, [sp, #12]
 8005144:	3402      	adds	r4, #2
 8005146:	1d1a      	adds	r2, r3, #4
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	9203      	str	r2, [sp, #12]
 800514c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005150:	9305      	str	r3, [sp, #20]
 8005152:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800521c <_vfiprintf_r+0x220>
 8005156:	2203      	movs	r2, #3
 8005158:	4650      	mov	r0, sl
 800515a:	7821      	ldrb	r1, [r4, #0]
 800515c:	f000 fb4e 	bl	80057fc <memchr>
 8005160:	b138      	cbz	r0, 8005172 <_vfiprintf_r+0x176>
 8005162:	2240      	movs	r2, #64	@ 0x40
 8005164:	9b04      	ldr	r3, [sp, #16]
 8005166:	eba0 000a 	sub.w	r0, r0, sl
 800516a:	4082      	lsls	r2, r0
 800516c:	4313      	orrs	r3, r2
 800516e:	3401      	adds	r4, #1
 8005170:	9304      	str	r3, [sp, #16]
 8005172:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005176:	2206      	movs	r2, #6
 8005178:	4829      	ldr	r0, [pc, #164]	@ (8005220 <_vfiprintf_r+0x224>)
 800517a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800517e:	f000 fb3d 	bl	80057fc <memchr>
 8005182:	2800      	cmp	r0, #0
 8005184:	d03f      	beq.n	8005206 <_vfiprintf_r+0x20a>
 8005186:	4b27      	ldr	r3, [pc, #156]	@ (8005224 <_vfiprintf_r+0x228>)
 8005188:	bb1b      	cbnz	r3, 80051d2 <_vfiprintf_r+0x1d6>
 800518a:	9b03      	ldr	r3, [sp, #12]
 800518c:	3307      	adds	r3, #7
 800518e:	f023 0307 	bic.w	r3, r3, #7
 8005192:	3308      	adds	r3, #8
 8005194:	9303      	str	r3, [sp, #12]
 8005196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005198:	443b      	add	r3, r7
 800519a:	9309      	str	r3, [sp, #36]	@ 0x24
 800519c:	e76a      	b.n	8005074 <_vfiprintf_r+0x78>
 800519e:	460c      	mov	r4, r1
 80051a0:	2001      	movs	r0, #1
 80051a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80051a6:	e7a8      	b.n	80050fa <_vfiprintf_r+0xfe>
 80051a8:	2300      	movs	r3, #0
 80051aa:	f04f 0c0a 	mov.w	ip, #10
 80051ae:	4619      	mov	r1, r3
 80051b0:	3401      	adds	r4, #1
 80051b2:	9305      	str	r3, [sp, #20]
 80051b4:	4620      	mov	r0, r4
 80051b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051ba:	3a30      	subs	r2, #48	@ 0x30
 80051bc:	2a09      	cmp	r2, #9
 80051be:	d903      	bls.n	80051c8 <_vfiprintf_r+0x1cc>
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0c6      	beq.n	8005152 <_vfiprintf_r+0x156>
 80051c4:	9105      	str	r1, [sp, #20]
 80051c6:	e7c4      	b.n	8005152 <_vfiprintf_r+0x156>
 80051c8:	4604      	mov	r4, r0
 80051ca:	2301      	movs	r3, #1
 80051cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80051d0:	e7f0      	b.n	80051b4 <_vfiprintf_r+0x1b8>
 80051d2:	ab03      	add	r3, sp, #12
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	462a      	mov	r2, r5
 80051d8:	4630      	mov	r0, r6
 80051da:	4b13      	ldr	r3, [pc, #76]	@ (8005228 <_vfiprintf_r+0x22c>)
 80051dc:	a904      	add	r1, sp, #16
 80051de:	f3af 8000 	nop.w
 80051e2:	4607      	mov	r7, r0
 80051e4:	1c78      	adds	r0, r7, #1
 80051e6:	d1d6      	bne.n	8005196 <_vfiprintf_r+0x19a>
 80051e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051ea:	07d9      	lsls	r1, r3, #31
 80051ec:	d405      	bmi.n	80051fa <_vfiprintf_r+0x1fe>
 80051ee:	89ab      	ldrh	r3, [r5, #12]
 80051f0:	059a      	lsls	r2, r3, #22
 80051f2:	d402      	bmi.n	80051fa <_vfiprintf_r+0x1fe>
 80051f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051f6:	f7ff fc7b 	bl	8004af0 <__retarget_lock_release_recursive>
 80051fa:	89ab      	ldrh	r3, [r5, #12]
 80051fc:	065b      	lsls	r3, r3, #25
 80051fe:	f53f af1f 	bmi.w	8005040 <_vfiprintf_r+0x44>
 8005202:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005204:	e71e      	b.n	8005044 <_vfiprintf_r+0x48>
 8005206:	ab03      	add	r3, sp, #12
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	462a      	mov	r2, r5
 800520c:	4630      	mov	r0, r6
 800520e:	4b06      	ldr	r3, [pc, #24]	@ (8005228 <_vfiprintf_r+0x22c>)
 8005210:	a904      	add	r1, sp, #16
 8005212:	f000 f87d 	bl	8005310 <_printf_i>
 8005216:	e7e4      	b.n	80051e2 <_vfiprintf_r+0x1e6>
 8005218:	080059d6 	.word	0x080059d6
 800521c:	080059dc 	.word	0x080059dc
 8005220:	080059e0 	.word	0x080059e0
 8005224:	00000000 	.word	0x00000000
 8005228:	08004fd7 	.word	0x08004fd7

0800522c <_printf_common>:
 800522c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005230:	4616      	mov	r6, r2
 8005232:	4698      	mov	r8, r3
 8005234:	688a      	ldr	r2, [r1, #8]
 8005236:	690b      	ldr	r3, [r1, #16]
 8005238:	4607      	mov	r7, r0
 800523a:	4293      	cmp	r3, r2
 800523c:	bfb8      	it	lt
 800523e:	4613      	movlt	r3, r2
 8005240:	6033      	str	r3, [r6, #0]
 8005242:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005246:	460c      	mov	r4, r1
 8005248:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800524c:	b10a      	cbz	r2, 8005252 <_printf_common+0x26>
 800524e:	3301      	adds	r3, #1
 8005250:	6033      	str	r3, [r6, #0]
 8005252:	6823      	ldr	r3, [r4, #0]
 8005254:	0699      	lsls	r1, r3, #26
 8005256:	bf42      	ittt	mi
 8005258:	6833      	ldrmi	r3, [r6, #0]
 800525a:	3302      	addmi	r3, #2
 800525c:	6033      	strmi	r3, [r6, #0]
 800525e:	6825      	ldr	r5, [r4, #0]
 8005260:	f015 0506 	ands.w	r5, r5, #6
 8005264:	d106      	bne.n	8005274 <_printf_common+0x48>
 8005266:	f104 0a19 	add.w	sl, r4, #25
 800526a:	68e3      	ldr	r3, [r4, #12]
 800526c:	6832      	ldr	r2, [r6, #0]
 800526e:	1a9b      	subs	r3, r3, r2
 8005270:	42ab      	cmp	r3, r5
 8005272:	dc2b      	bgt.n	80052cc <_printf_common+0xa0>
 8005274:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005278:	6822      	ldr	r2, [r4, #0]
 800527a:	3b00      	subs	r3, #0
 800527c:	bf18      	it	ne
 800527e:	2301      	movne	r3, #1
 8005280:	0692      	lsls	r2, r2, #26
 8005282:	d430      	bmi.n	80052e6 <_printf_common+0xba>
 8005284:	4641      	mov	r1, r8
 8005286:	4638      	mov	r0, r7
 8005288:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800528c:	47c8      	blx	r9
 800528e:	3001      	adds	r0, #1
 8005290:	d023      	beq.n	80052da <_printf_common+0xae>
 8005292:	6823      	ldr	r3, [r4, #0]
 8005294:	6922      	ldr	r2, [r4, #16]
 8005296:	f003 0306 	and.w	r3, r3, #6
 800529a:	2b04      	cmp	r3, #4
 800529c:	bf14      	ite	ne
 800529e:	2500      	movne	r5, #0
 80052a0:	6833      	ldreq	r3, [r6, #0]
 80052a2:	f04f 0600 	mov.w	r6, #0
 80052a6:	bf08      	it	eq
 80052a8:	68e5      	ldreq	r5, [r4, #12]
 80052aa:	f104 041a 	add.w	r4, r4, #26
 80052ae:	bf08      	it	eq
 80052b0:	1aed      	subeq	r5, r5, r3
 80052b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80052b6:	bf08      	it	eq
 80052b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052bc:	4293      	cmp	r3, r2
 80052be:	bfc4      	itt	gt
 80052c0:	1a9b      	subgt	r3, r3, r2
 80052c2:	18ed      	addgt	r5, r5, r3
 80052c4:	42b5      	cmp	r5, r6
 80052c6:	d11a      	bne.n	80052fe <_printf_common+0xd2>
 80052c8:	2000      	movs	r0, #0
 80052ca:	e008      	b.n	80052de <_printf_common+0xb2>
 80052cc:	2301      	movs	r3, #1
 80052ce:	4652      	mov	r2, sl
 80052d0:	4641      	mov	r1, r8
 80052d2:	4638      	mov	r0, r7
 80052d4:	47c8      	blx	r9
 80052d6:	3001      	adds	r0, #1
 80052d8:	d103      	bne.n	80052e2 <_printf_common+0xb6>
 80052da:	f04f 30ff 	mov.w	r0, #4294967295
 80052de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052e2:	3501      	adds	r5, #1
 80052e4:	e7c1      	b.n	800526a <_printf_common+0x3e>
 80052e6:	2030      	movs	r0, #48	@ 0x30
 80052e8:	18e1      	adds	r1, r4, r3
 80052ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80052ee:	1c5a      	adds	r2, r3, #1
 80052f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80052f4:	4422      	add	r2, r4
 80052f6:	3302      	adds	r3, #2
 80052f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80052fc:	e7c2      	b.n	8005284 <_printf_common+0x58>
 80052fe:	2301      	movs	r3, #1
 8005300:	4622      	mov	r2, r4
 8005302:	4641      	mov	r1, r8
 8005304:	4638      	mov	r0, r7
 8005306:	47c8      	blx	r9
 8005308:	3001      	adds	r0, #1
 800530a:	d0e6      	beq.n	80052da <_printf_common+0xae>
 800530c:	3601      	adds	r6, #1
 800530e:	e7d9      	b.n	80052c4 <_printf_common+0x98>

08005310 <_printf_i>:
 8005310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005314:	7e0f      	ldrb	r7, [r1, #24]
 8005316:	4691      	mov	r9, r2
 8005318:	2f78      	cmp	r7, #120	@ 0x78
 800531a:	4680      	mov	r8, r0
 800531c:	460c      	mov	r4, r1
 800531e:	469a      	mov	sl, r3
 8005320:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005322:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005326:	d807      	bhi.n	8005338 <_printf_i+0x28>
 8005328:	2f62      	cmp	r7, #98	@ 0x62
 800532a:	d80a      	bhi.n	8005342 <_printf_i+0x32>
 800532c:	2f00      	cmp	r7, #0
 800532e:	f000 80d3 	beq.w	80054d8 <_printf_i+0x1c8>
 8005332:	2f58      	cmp	r7, #88	@ 0x58
 8005334:	f000 80ba 	beq.w	80054ac <_printf_i+0x19c>
 8005338:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800533c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005340:	e03a      	b.n	80053b8 <_printf_i+0xa8>
 8005342:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005346:	2b15      	cmp	r3, #21
 8005348:	d8f6      	bhi.n	8005338 <_printf_i+0x28>
 800534a:	a101      	add	r1, pc, #4	@ (adr r1, 8005350 <_printf_i+0x40>)
 800534c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005350:	080053a9 	.word	0x080053a9
 8005354:	080053bd 	.word	0x080053bd
 8005358:	08005339 	.word	0x08005339
 800535c:	08005339 	.word	0x08005339
 8005360:	08005339 	.word	0x08005339
 8005364:	08005339 	.word	0x08005339
 8005368:	080053bd 	.word	0x080053bd
 800536c:	08005339 	.word	0x08005339
 8005370:	08005339 	.word	0x08005339
 8005374:	08005339 	.word	0x08005339
 8005378:	08005339 	.word	0x08005339
 800537c:	080054bf 	.word	0x080054bf
 8005380:	080053e7 	.word	0x080053e7
 8005384:	08005479 	.word	0x08005479
 8005388:	08005339 	.word	0x08005339
 800538c:	08005339 	.word	0x08005339
 8005390:	080054e1 	.word	0x080054e1
 8005394:	08005339 	.word	0x08005339
 8005398:	080053e7 	.word	0x080053e7
 800539c:	08005339 	.word	0x08005339
 80053a0:	08005339 	.word	0x08005339
 80053a4:	08005481 	.word	0x08005481
 80053a8:	6833      	ldr	r3, [r6, #0]
 80053aa:	1d1a      	adds	r2, r3, #4
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6032      	str	r2, [r6, #0]
 80053b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80053b8:	2301      	movs	r3, #1
 80053ba:	e09e      	b.n	80054fa <_printf_i+0x1ea>
 80053bc:	6833      	ldr	r3, [r6, #0]
 80053be:	6820      	ldr	r0, [r4, #0]
 80053c0:	1d19      	adds	r1, r3, #4
 80053c2:	6031      	str	r1, [r6, #0]
 80053c4:	0606      	lsls	r6, r0, #24
 80053c6:	d501      	bpl.n	80053cc <_printf_i+0xbc>
 80053c8:	681d      	ldr	r5, [r3, #0]
 80053ca:	e003      	b.n	80053d4 <_printf_i+0xc4>
 80053cc:	0645      	lsls	r5, r0, #25
 80053ce:	d5fb      	bpl.n	80053c8 <_printf_i+0xb8>
 80053d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053d4:	2d00      	cmp	r5, #0
 80053d6:	da03      	bge.n	80053e0 <_printf_i+0xd0>
 80053d8:	232d      	movs	r3, #45	@ 0x2d
 80053da:	426d      	negs	r5, r5
 80053dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053e0:	230a      	movs	r3, #10
 80053e2:	4859      	ldr	r0, [pc, #356]	@ (8005548 <_printf_i+0x238>)
 80053e4:	e011      	b.n	800540a <_printf_i+0xfa>
 80053e6:	6821      	ldr	r1, [r4, #0]
 80053e8:	6833      	ldr	r3, [r6, #0]
 80053ea:	0608      	lsls	r0, r1, #24
 80053ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80053f0:	d402      	bmi.n	80053f8 <_printf_i+0xe8>
 80053f2:	0649      	lsls	r1, r1, #25
 80053f4:	bf48      	it	mi
 80053f6:	b2ad      	uxthmi	r5, r5
 80053f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80053fa:	6033      	str	r3, [r6, #0]
 80053fc:	bf14      	ite	ne
 80053fe:	230a      	movne	r3, #10
 8005400:	2308      	moveq	r3, #8
 8005402:	4851      	ldr	r0, [pc, #324]	@ (8005548 <_printf_i+0x238>)
 8005404:	2100      	movs	r1, #0
 8005406:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800540a:	6866      	ldr	r6, [r4, #4]
 800540c:	2e00      	cmp	r6, #0
 800540e:	bfa8      	it	ge
 8005410:	6821      	ldrge	r1, [r4, #0]
 8005412:	60a6      	str	r6, [r4, #8]
 8005414:	bfa4      	itt	ge
 8005416:	f021 0104 	bicge.w	r1, r1, #4
 800541a:	6021      	strge	r1, [r4, #0]
 800541c:	b90d      	cbnz	r5, 8005422 <_printf_i+0x112>
 800541e:	2e00      	cmp	r6, #0
 8005420:	d04b      	beq.n	80054ba <_printf_i+0x1aa>
 8005422:	4616      	mov	r6, r2
 8005424:	fbb5 f1f3 	udiv	r1, r5, r3
 8005428:	fb03 5711 	mls	r7, r3, r1, r5
 800542c:	5dc7      	ldrb	r7, [r0, r7]
 800542e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005432:	462f      	mov	r7, r5
 8005434:	42bb      	cmp	r3, r7
 8005436:	460d      	mov	r5, r1
 8005438:	d9f4      	bls.n	8005424 <_printf_i+0x114>
 800543a:	2b08      	cmp	r3, #8
 800543c:	d10b      	bne.n	8005456 <_printf_i+0x146>
 800543e:	6823      	ldr	r3, [r4, #0]
 8005440:	07df      	lsls	r7, r3, #31
 8005442:	d508      	bpl.n	8005456 <_printf_i+0x146>
 8005444:	6923      	ldr	r3, [r4, #16]
 8005446:	6861      	ldr	r1, [r4, #4]
 8005448:	4299      	cmp	r1, r3
 800544a:	bfde      	ittt	le
 800544c:	2330      	movle	r3, #48	@ 0x30
 800544e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005452:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005456:	1b92      	subs	r2, r2, r6
 8005458:	6122      	str	r2, [r4, #16]
 800545a:	464b      	mov	r3, r9
 800545c:	4621      	mov	r1, r4
 800545e:	4640      	mov	r0, r8
 8005460:	f8cd a000 	str.w	sl, [sp]
 8005464:	aa03      	add	r2, sp, #12
 8005466:	f7ff fee1 	bl	800522c <_printf_common>
 800546a:	3001      	adds	r0, #1
 800546c:	d14a      	bne.n	8005504 <_printf_i+0x1f4>
 800546e:	f04f 30ff 	mov.w	r0, #4294967295
 8005472:	b004      	add	sp, #16
 8005474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	f043 0320 	orr.w	r3, r3, #32
 800547e:	6023      	str	r3, [r4, #0]
 8005480:	2778      	movs	r7, #120	@ 0x78
 8005482:	4832      	ldr	r0, [pc, #200]	@ (800554c <_printf_i+0x23c>)
 8005484:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	6831      	ldr	r1, [r6, #0]
 800548c:	061f      	lsls	r7, r3, #24
 800548e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005492:	d402      	bmi.n	800549a <_printf_i+0x18a>
 8005494:	065f      	lsls	r7, r3, #25
 8005496:	bf48      	it	mi
 8005498:	b2ad      	uxthmi	r5, r5
 800549a:	6031      	str	r1, [r6, #0]
 800549c:	07d9      	lsls	r1, r3, #31
 800549e:	bf44      	itt	mi
 80054a0:	f043 0320 	orrmi.w	r3, r3, #32
 80054a4:	6023      	strmi	r3, [r4, #0]
 80054a6:	b11d      	cbz	r5, 80054b0 <_printf_i+0x1a0>
 80054a8:	2310      	movs	r3, #16
 80054aa:	e7ab      	b.n	8005404 <_printf_i+0xf4>
 80054ac:	4826      	ldr	r0, [pc, #152]	@ (8005548 <_printf_i+0x238>)
 80054ae:	e7e9      	b.n	8005484 <_printf_i+0x174>
 80054b0:	6823      	ldr	r3, [r4, #0]
 80054b2:	f023 0320 	bic.w	r3, r3, #32
 80054b6:	6023      	str	r3, [r4, #0]
 80054b8:	e7f6      	b.n	80054a8 <_printf_i+0x198>
 80054ba:	4616      	mov	r6, r2
 80054bc:	e7bd      	b.n	800543a <_printf_i+0x12a>
 80054be:	6833      	ldr	r3, [r6, #0]
 80054c0:	6825      	ldr	r5, [r4, #0]
 80054c2:	1d18      	adds	r0, r3, #4
 80054c4:	6961      	ldr	r1, [r4, #20]
 80054c6:	6030      	str	r0, [r6, #0]
 80054c8:	062e      	lsls	r6, r5, #24
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	d501      	bpl.n	80054d2 <_printf_i+0x1c2>
 80054ce:	6019      	str	r1, [r3, #0]
 80054d0:	e002      	b.n	80054d8 <_printf_i+0x1c8>
 80054d2:	0668      	lsls	r0, r5, #25
 80054d4:	d5fb      	bpl.n	80054ce <_printf_i+0x1be>
 80054d6:	8019      	strh	r1, [r3, #0]
 80054d8:	2300      	movs	r3, #0
 80054da:	4616      	mov	r6, r2
 80054dc:	6123      	str	r3, [r4, #16]
 80054de:	e7bc      	b.n	800545a <_printf_i+0x14a>
 80054e0:	6833      	ldr	r3, [r6, #0]
 80054e2:	2100      	movs	r1, #0
 80054e4:	1d1a      	adds	r2, r3, #4
 80054e6:	6032      	str	r2, [r6, #0]
 80054e8:	681e      	ldr	r6, [r3, #0]
 80054ea:	6862      	ldr	r2, [r4, #4]
 80054ec:	4630      	mov	r0, r6
 80054ee:	f000 f985 	bl	80057fc <memchr>
 80054f2:	b108      	cbz	r0, 80054f8 <_printf_i+0x1e8>
 80054f4:	1b80      	subs	r0, r0, r6
 80054f6:	6060      	str	r0, [r4, #4]
 80054f8:	6863      	ldr	r3, [r4, #4]
 80054fa:	6123      	str	r3, [r4, #16]
 80054fc:	2300      	movs	r3, #0
 80054fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005502:	e7aa      	b.n	800545a <_printf_i+0x14a>
 8005504:	4632      	mov	r2, r6
 8005506:	4649      	mov	r1, r9
 8005508:	4640      	mov	r0, r8
 800550a:	6923      	ldr	r3, [r4, #16]
 800550c:	47d0      	blx	sl
 800550e:	3001      	adds	r0, #1
 8005510:	d0ad      	beq.n	800546e <_printf_i+0x15e>
 8005512:	6823      	ldr	r3, [r4, #0]
 8005514:	079b      	lsls	r3, r3, #30
 8005516:	d413      	bmi.n	8005540 <_printf_i+0x230>
 8005518:	68e0      	ldr	r0, [r4, #12]
 800551a:	9b03      	ldr	r3, [sp, #12]
 800551c:	4298      	cmp	r0, r3
 800551e:	bfb8      	it	lt
 8005520:	4618      	movlt	r0, r3
 8005522:	e7a6      	b.n	8005472 <_printf_i+0x162>
 8005524:	2301      	movs	r3, #1
 8005526:	4632      	mov	r2, r6
 8005528:	4649      	mov	r1, r9
 800552a:	4640      	mov	r0, r8
 800552c:	47d0      	blx	sl
 800552e:	3001      	adds	r0, #1
 8005530:	d09d      	beq.n	800546e <_printf_i+0x15e>
 8005532:	3501      	adds	r5, #1
 8005534:	68e3      	ldr	r3, [r4, #12]
 8005536:	9903      	ldr	r1, [sp, #12]
 8005538:	1a5b      	subs	r3, r3, r1
 800553a:	42ab      	cmp	r3, r5
 800553c:	dcf2      	bgt.n	8005524 <_printf_i+0x214>
 800553e:	e7eb      	b.n	8005518 <_printf_i+0x208>
 8005540:	2500      	movs	r5, #0
 8005542:	f104 0619 	add.w	r6, r4, #25
 8005546:	e7f5      	b.n	8005534 <_printf_i+0x224>
 8005548:	080059e7 	.word	0x080059e7
 800554c:	080059f8 	.word	0x080059f8

08005550 <__sflush_r>:
 8005550:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005556:	0716      	lsls	r6, r2, #28
 8005558:	4605      	mov	r5, r0
 800555a:	460c      	mov	r4, r1
 800555c:	d454      	bmi.n	8005608 <__sflush_r+0xb8>
 800555e:	684b      	ldr	r3, [r1, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	dc02      	bgt.n	800556a <__sflush_r+0x1a>
 8005564:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005566:	2b00      	cmp	r3, #0
 8005568:	dd48      	ble.n	80055fc <__sflush_r+0xac>
 800556a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800556c:	2e00      	cmp	r6, #0
 800556e:	d045      	beq.n	80055fc <__sflush_r+0xac>
 8005570:	2300      	movs	r3, #0
 8005572:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005576:	682f      	ldr	r7, [r5, #0]
 8005578:	6a21      	ldr	r1, [r4, #32]
 800557a:	602b      	str	r3, [r5, #0]
 800557c:	d030      	beq.n	80055e0 <__sflush_r+0x90>
 800557e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005580:	89a3      	ldrh	r3, [r4, #12]
 8005582:	0759      	lsls	r1, r3, #29
 8005584:	d505      	bpl.n	8005592 <__sflush_r+0x42>
 8005586:	6863      	ldr	r3, [r4, #4]
 8005588:	1ad2      	subs	r2, r2, r3
 800558a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800558c:	b10b      	cbz	r3, 8005592 <__sflush_r+0x42>
 800558e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005590:	1ad2      	subs	r2, r2, r3
 8005592:	2300      	movs	r3, #0
 8005594:	4628      	mov	r0, r5
 8005596:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005598:	6a21      	ldr	r1, [r4, #32]
 800559a:	47b0      	blx	r6
 800559c:	1c43      	adds	r3, r0, #1
 800559e:	89a3      	ldrh	r3, [r4, #12]
 80055a0:	d106      	bne.n	80055b0 <__sflush_r+0x60>
 80055a2:	6829      	ldr	r1, [r5, #0]
 80055a4:	291d      	cmp	r1, #29
 80055a6:	d82b      	bhi.n	8005600 <__sflush_r+0xb0>
 80055a8:	4a28      	ldr	r2, [pc, #160]	@ (800564c <__sflush_r+0xfc>)
 80055aa:	410a      	asrs	r2, r1
 80055ac:	07d6      	lsls	r6, r2, #31
 80055ae:	d427      	bmi.n	8005600 <__sflush_r+0xb0>
 80055b0:	2200      	movs	r2, #0
 80055b2:	6062      	str	r2, [r4, #4]
 80055b4:	6922      	ldr	r2, [r4, #16]
 80055b6:	04d9      	lsls	r1, r3, #19
 80055b8:	6022      	str	r2, [r4, #0]
 80055ba:	d504      	bpl.n	80055c6 <__sflush_r+0x76>
 80055bc:	1c42      	adds	r2, r0, #1
 80055be:	d101      	bne.n	80055c4 <__sflush_r+0x74>
 80055c0:	682b      	ldr	r3, [r5, #0]
 80055c2:	b903      	cbnz	r3, 80055c6 <__sflush_r+0x76>
 80055c4:	6560      	str	r0, [r4, #84]	@ 0x54
 80055c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80055c8:	602f      	str	r7, [r5, #0]
 80055ca:	b1b9      	cbz	r1, 80055fc <__sflush_r+0xac>
 80055cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80055d0:	4299      	cmp	r1, r3
 80055d2:	d002      	beq.n	80055da <__sflush_r+0x8a>
 80055d4:	4628      	mov	r0, r5
 80055d6:	f7ff fa9b 	bl	8004b10 <_free_r>
 80055da:	2300      	movs	r3, #0
 80055dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80055de:	e00d      	b.n	80055fc <__sflush_r+0xac>
 80055e0:	2301      	movs	r3, #1
 80055e2:	4628      	mov	r0, r5
 80055e4:	47b0      	blx	r6
 80055e6:	4602      	mov	r2, r0
 80055e8:	1c50      	adds	r0, r2, #1
 80055ea:	d1c9      	bne.n	8005580 <__sflush_r+0x30>
 80055ec:	682b      	ldr	r3, [r5, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0c6      	beq.n	8005580 <__sflush_r+0x30>
 80055f2:	2b1d      	cmp	r3, #29
 80055f4:	d001      	beq.n	80055fa <__sflush_r+0xaa>
 80055f6:	2b16      	cmp	r3, #22
 80055f8:	d11d      	bne.n	8005636 <__sflush_r+0xe6>
 80055fa:	602f      	str	r7, [r5, #0]
 80055fc:	2000      	movs	r0, #0
 80055fe:	e021      	b.n	8005644 <__sflush_r+0xf4>
 8005600:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005604:	b21b      	sxth	r3, r3
 8005606:	e01a      	b.n	800563e <__sflush_r+0xee>
 8005608:	690f      	ldr	r7, [r1, #16]
 800560a:	2f00      	cmp	r7, #0
 800560c:	d0f6      	beq.n	80055fc <__sflush_r+0xac>
 800560e:	0793      	lsls	r3, r2, #30
 8005610:	bf18      	it	ne
 8005612:	2300      	movne	r3, #0
 8005614:	680e      	ldr	r6, [r1, #0]
 8005616:	bf08      	it	eq
 8005618:	694b      	ldreq	r3, [r1, #20]
 800561a:	1bf6      	subs	r6, r6, r7
 800561c:	600f      	str	r7, [r1, #0]
 800561e:	608b      	str	r3, [r1, #8]
 8005620:	2e00      	cmp	r6, #0
 8005622:	ddeb      	ble.n	80055fc <__sflush_r+0xac>
 8005624:	4633      	mov	r3, r6
 8005626:	463a      	mov	r2, r7
 8005628:	4628      	mov	r0, r5
 800562a:	6a21      	ldr	r1, [r4, #32]
 800562c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005630:	47e0      	blx	ip
 8005632:	2800      	cmp	r0, #0
 8005634:	dc07      	bgt.n	8005646 <__sflush_r+0xf6>
 8005636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800563a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800563e:	f04f 30ff 	mov.w	r0, #4294967295
 8005642:	81a3      	strh	r3, [r4, #12]
 8005644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005646:	4407      	add	r7, r0
 8005648:	1a36      	subs	r6, r6, r0
 800564a:	e7e9      	b.n	8005620 <__sflush_r+0xd0>
 800564c:	dfbffffe 	.word	0xdfbffffe

08005650 <_fflush_r>:
 8005650:	b538      	push	{r3, r4, r5, lr}
 8005652:	690b      	ldr	r3, [r1, #16]
 8005654:	4605      	mov	r5, r0
 8005656:	460c      	mov	r4, r1
 8005658:	b913      	cbnz	r3, 8005660 <_fflush_r+0x10>
 800565a:	2500      	movs	r5, #0
 800565c:	4628      	mov	r0, r5
 800565e:	bd38      	pop	{r3, r4, r5, pc}
 8005660:	b118      	cbz	r0, 800566a <_fflush_r+0x1a>
 8005662:	6a03      	ldr	r3, [r0, #32]
 8005664:	b90b      	cbnz	r3, 800566a <_fflush_r+0x1a>
 8005666:	f7ff f82b 	bl	80046c0 <__sinit>
 800566a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d0f3      	beq.n	800565a <_fflush_r+0xa>
 8005672:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005674:	07d0      	lsls	r0, r2, #31
 8005676:	d404      	bmi.n	8005682 <_fflush_r+0x32>
 8005678:	0599      	lsls	r1, r3, #22
 800567a:	d402      	bmi.n	8005682 <_fflush_r+0x32>
 800567c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800567e:	f7ff fa36 	bl	8004aee <__retarget_lock_acquire_recursive>
 8005682:	4628      	mov	r0, r5
 8005684:	4621      	mov	r1, r4
 8005686:	f7ff ff63 	bl	8005550 <__sflush_r>
 800568a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800568c:	4605      	mov	r5, r0
 800568e:	07da      	lsls	r2, r3, #31
 8005690:	d4e4      	bmi.n	800565c <_fflush_r+0xc>
 8005692:	89a3      	ldrh	r3, [r4, #12]
 8005694:	059b      	lsls	r3, r3, #22
 8005696:	d4e1      	bmi.n	800565c <_fflush_r+0xc>
 8005698:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800569a:	f7ff fa29 	bl	8004af0 <__retarget_lock_release_recursive>
 800569e:	e7dd      	b.n	800565c <_fflush_r+0xc>

080056a0 <__swhatbuf_r>:
 80056a0:	b570      	push	{r4, r5, r6, lr}
 80056a2:	460c      	mov	r4, r1
 80056a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056a8:	4615      	mov	r5, r2
 80056aa:	2900      	cmp	r1, #0
 80056ac:	461e      	mov	r6, r3
 80056ae:	b096      	sub	sp, #88	@ 0x58
 80056b0:	da0c      	bge.n	80056cc <__swhatbuf_r+0x2c>
 80056b2:	89a3      	ldrh	r3, [r4, #12]
 80056b4:	2100      	movs	r1, #0
 80056b6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80056ba:	bf14      	ite	ne
 80056bc:	2340      	movne	r3, #64	@ 0x40
 80056be:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80056c2:	2000      	movs	r0, #0
 80056c4:	6031      	str	r1, [r6, #0]
 80056c6:	602b      	str	r3, [r5, #0]
 80056c8:	b016      	add	sp, #88	@ 0x58
 80056ca:	bd70      	pop	{r4, r5, r6, pc}
 80056cc:	466a      	mov	r2, sp
 80056ce:	f000 f863 	bl	8005798 <_fstat_r>
 80056d2:	2800      	cmp	r0, #0
 80056d4:	dbed      	blt.n	80056b2 <__swhatbuf_r+0x12>
 80056d6:	9901      	ldr	r1, [sp, #4]
 80056d8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80056dc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80056e0:	4259      	negs	r1, r3
 80056e2:	4159      	adcs	r1, r3
 80056e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056e8:	e7eb      	b.n	80056c2 <__swhatbuf_r+0x22>

080056ea <__smakebuf_r>:
 80056ea:	898b      	ldrh	r3, [r1, #12]
 80056ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056ee:	079d      	lsls	r5, r3, #30
 80056f0:	4606      	mov	r6, r0
 80056f2:	460c      	mov	r4, r1
 80056f4:	d507      	bpl.n	8005706 <__smakebuf_r+0x1c>
 80056f6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80056fa:	6023      	str	r3, [r4, #0]
 80056fc:	6123      	str	r3, [r4, #16]
 80056fe:	2301      	movs	r3, #1
 8005700:	6163      	str	r3, [r4, #20]
 8005702:	b003      	add	sp, #12
 8005704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005706:	466a      	mov	r2, sp
 8005708:	ab01      	add	r3, sp, #4
 800570a:	f7ff ffc9 	bl	80056a0 <__swhatbuf_r>
 800570e:	9f00      	ldr	r7, [sp, #0]
 8005710:	4605      	mov	r5, r0
 8005712:	4639      	mov	r1, r7
 8005714:	4630      	mov	r0, r6
 8005716:	f7ff fa65 	bl	8004be4 <_malloc_r>
 800571a:	b948      	cbnz	r0, 8005730 <__smakebuf_r+0x46>
 800571c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005720:	059a      	lsls	r2, r3, #22
 8005722:	d4ee      	bmi.n	8005702 <__smakebuf_r+0x18>
 8005724:	f023 0303 	bic.w	r3, r3, #3
 8005728:	f043 0302 	orr.w	r3, r3, #2
 800572c:	81a3      	strh	r3, [r4, #12]
 800572e:	e7e2      	b.n	80056f6 <__smakebuf_r+0xc>
 8005730:	89a3      	ldrh	r3, [r4, #12]
 8005732:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800573a:	81a3      	strh	r3, [r4, #12]
 800573c:	9b01      	ldr	r3, [sp, #4]
 800573e:	6020      	str	r0, [r4, #0]
 8005740:	b15b      	cbz	r3, 800575a <__smakebuf_r+0x70>
 8005742:	4630      	mov	r0, r6
 8005744:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005748:	f000 f838 	bl	80057bc <_isatty_r>
 800574c:	b128      	cbz	r0, 800575a <__smakebuf_r+0x70>
 800574e:	89a3      	ldrh	r3, [r4, #12]
 8005750:	f023 0303 	bic.w	r3, r3, #3
 8005754:	f043 0301 	orr.w	r3, r3, #1
 8005758:	81a3      	strh	r3, [r4, #12]
 800575a:	89a3      	ldrh	r3, [r4, #12]
 800575c:	431d      	orrs	r5, r3
 800575e:	81a5      	strh	r5, [r4, #12]
 8005760:	e7cf      	b.n	8005702 <__smakebuf_r+0x18>

08005762 <memmove>:
 8005762:	4288      	cmp	r0, r1
 8005764:	b510      	push	{r4, lr}
 8005766:	eb01 0402 	add.w	r4, r1, r2
 800576a:	d902      	bls.n	8005772 <memmove+0x10>
 800576c:	4284      	cmp	r4, r0
 800576e:	4623      	mov	r3, r4
 8005770:	d807      	bhi.n	8005782 <memmove+0x20>
 8005772:	1e43      	subs	r3, r0, #1
 8005774:	42a1      	cmp	r1, r4
 8005776:	d008      	beq.n	800578a <memmove+0x28>
 8005778:	f811 2b01 	ldrb.w	r2, [r1], #1
 800577c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005780:	e7f8      	b.n	8005774 <memmove+0x12>
 8005782:	4601      	mov	r1, r0
 8005784:	4402      	add	r2, r0
 8005786:	428a      	cmp	r2, r1
 8005788:	d100      	bne.n	800578c <memmove+0x2a>
 800578a:	bd10      	pop	{r4, pc}
 800578c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005790:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005794:	e7f7      	b.n	8005786 <memmove+0x24>
	...

08005798 <_fstat_r>:
 8005798:	b538      	push	{r3, r4, r5, lr}
 800579a:	2300      	movs	r3, #0
 800579c:	4d06      	ldr	r5, [pc, #24]	@ (80057b8 <_fstat_r+0x20>)
 800579e:	4604      	mov	r4, r0
 80057a0:	4608      	mov	r0, r1
 80057a2:	4611      	mov	r1, r2
 80057a4:	602b      	str	r3, [r5, #0]
 80057a6:	f7fb faa1 	bl	8000cec <_fstat>
 80057aa:	1c43      	adds	r3, r0, #1
 80057ac:	d102      	bne.n	80057b4 <_fstat_r+0x1c>
 80057ae:	682b      	ldr	r3, [r5, #0]
 80057b0:	b103      	cbz	r3, 80057b4 <_fstat_r+0x1c>
 80057b2:	6023      	str	r3, [r4, #0]
 80057b4:	bd38      	pop	{r3, r4, r5, pc}
 80057b6:	bf00      	nop
 80057b8:	200012b0 	.word	0x200012b0

080057bc <_isatty_r>:
 80057bc:	b538      	push	{r3, r4, r5, lr}
 80057be:	2300      	movs	r3, #0
 80057c0:	4d05      	ldr	r5, [pc, #20]	@ (80057d8 <_isatty_r+0x1c>)
 80057c2:	4604      	mov	r4, r0
 80057c4:	4608      	mov	r0, r1
 80057c6:	602b      	str	r3, [r5, #0]
 80057c8:	f7fb fa9f 	bl	8000d0a <_isatty>
 80057cc:	1c43      	adds	r3, r0, #1
 80057ce:	d102      	bne.n	80057d6 <_isatty_r+0x1a>
 80057d0:	682b      	ldr	r3, [r5, #0]
 80057d2:	b103      	cbz	r3, 80057d6 <_isatty_r+0x1a>
 80057d4:	6023      	str	r3, [r4, #0]
 80057d6:	bd38      	pop	{r3, r4, r5, pc}
 80057d8:	200012b0 	.word	0x200012b0

080057dc <_sbrk_r>:
 80057dc:	b538      	push	{r3, r4, r5, lr}
 80057de:	2300      	movs	r3, #0
 80057e0:	4d05      	ldr	r5, [pc, #20]	@ (80057f8 <_sbrk_r+0x1c>)
 80057e2:	4604      	mov	r4, r0
 80057e4:	4608      	mov	r0, r1
 80057e6:	602b      	str	r3, [r5, #0]
 80057e8:	f7fb faa6 	bl	8000d38 <_sbrk>
 80057ec:	1c43      	adds	r3, r0, #1
 80057ee:	d102      	bne.n	80057f6 <_sbrk_r+0x1a>
 80057f0:	682b      	ldr	r3, [r5, #0]
 80057f2:	b103      	cbz	r3, 80057f6 <_sbrk_r+0x1a>
 80057f4:	6023      	str	r3, [r4, #0]
 80057f6:	bd38      	pop	{r3, r4, r5, pc}
 80057f8:	200012b0 	.word	0x200012b0

080057fc <memchr>:
 80057fc:	4603      	mov	r3, r0
 80057fe:	b510      	push	{r4, lr}
 8005800:	b2c9      	uxtb	r1, r1
 8005802:	4402      	add	r2, r0
 8005804:	4293      	cmp	r3, r2
 8005806:	4618      	mov	r0, r3
 8005808:	d101      	bne.n	800580e <memchr+0x12>
 800580a:	2000      	movs	r0, #0
 800580c:	e003      	b.n	8005816 <memchr+0x1a>
 800580e:	7804      	ldrb	r4, [r0, #0]
 8005810:	3301      	adds	r3, #1
 8005812:	428c      	cmp	r4, r1
 8005814:	d1f6      	bne.n	8005804 <memchr+0x8>
 8005816:	bd10      	pop	{r4, pc}

08005818 <_realloc_r>:
 8005818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800581c:	4680      	mov	r8, r0
 800581e:	4615      	mov	r5, r2
 8005820:	460c      	mov	r4, r1
 8005822:	b921      	cbnz	r1, 800582e <_realloc_r+0x16>
 8005824:	4611      	mov	r1, r2
 8005826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800582a:	f7ff b9db 	b.w	8004be4 <_malloc_r>
 800582e:	b92a      	cbnz	r2, 800583c <_realloc_r+0x24>
 8005830:	f7ff f96e 	bl	8004b10 <_free_r>
 8005834:	2400      	movs	r4, #0
 8005836:	4620      	mov	r0, r4
 8005838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800583c:	f000 f81a 	bl	8005874 <_malloc_usable_size_r>
 8005840:	4285      	cmp	r5, r0
 8005842:	4606      	mov	r6, r0
 8005844:	d802      	bhi.n	800584c <_realloc_r+0x34>
 8005846:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800584a:	d8f4      	bhi.n	8005836 <_realloc_r+0x1e>
 800584c:	4629      	mov	r1, r5
 800584e:	4640      	mov	r0, r8
 8005850:	f7ff f9c8 	bl	8004be4 <_malloc_r>
 8005854:	4607      	mov	r7, r0
 8005856:	2800      	cmp	r0, #0
 8005858:	d0ec      	beq.n	8005834 <_realloc_r+0x1c>
 800585a:	42b5      	cmp	r5, r6
 800585c:	462a      	mov	r2, r5
 800585e:	4621      	mov	r1, r4
 8005860:	bf28      	it	cs
 8005862:	4632      	movcs	r2, r6
 8005864:	f7ff f945 	bl	8004af2 <memcpy>
 8005868:	4621      	mov	r1, r4
 800586a:	4640      	mov	r0, r8
 800586c:	f7ff f950 	bl	8004b10 <_free_r>
 8005870:	463c      	mov	r4, r7
 8005872:	e7e0      	b.n	8005836 <_realloc_r+0x1e>

08005874 <_malloc_usable_size_r>:
 8005874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005878:	1f18      	subs	r0, r3, #4
 800587a:	2b00      	cmp	r3, #0
 800587c:	bfbc      	itt	lt
 800587e:	580b      	ldrlt	r3, [r1, r0]
 8005880:	18c0      	addlt	r0, r0, r3
 8005882:	4770      	bx	lr

08005884 <_init>:
 8005884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005886:	bf00      	nop
 8005888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800588a:	bc08      	pop	{r3}
 800588c:	469e      	mov	lr, r3
 800588e:	4770      	bx	lr

08005890 <_fini>:
 8005890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005892:	bf00      	nop
 8005894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005896:	bc08      	pop	{r3}
 8005898:	469e      	mov	lr, r3
 800589a:	4770      	bx	lr
