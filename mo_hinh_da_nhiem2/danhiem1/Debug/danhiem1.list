
danhiem1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb9c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  0800bcb0  0800bcb0  0000ccb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1f8  0800c1f8  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1f8  0800c1f8  0000d1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c200  0800c200  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c200  0800c200  0000d200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c204  0800c204  0000d204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800c208  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024a4  200001d8  0800c3e0  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000267c  0800c3e0  0000e67c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d4f  00000000  00000000  0000e201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003607  00000000  00000000  00025f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  00029558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001144  00000000  00000000  0002ab60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ec3  00000000  00000000  0002bca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000191c5  00000000  00000000  00045b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000980b0  00000000  00000000  0005ed2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f6ddc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073ac  00000000  00000000  000f6e20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000fe1cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bc94 	.word	0x0800bc94

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800bc94 	.word	0x0800bc94

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	@ 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dea:	2afd      	cmp	r2, #253	@ 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	@ 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	@ 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	@ 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__aeabi_d2lz>:
 8001038:	b538      	push	{r3, r4, r5, lr}
 800103a:	2200      	movs	r2, #0
 800103c:	2300      	movs	r3, #0
 800103e:	4604      	mov	r4, r0
 8001040:	460d      	mov	r5, r1
 8001042:	f7ff fcc5 	bl	80009d0 <__aeabi_dcmplt>
 8001046:	b928      	cbnz	r0, 8001054 <__aeabi_d2lz+0x1c>
 8001048:	4620      	mov	r0, r4
 800104a:	4629      	mov	r1, r5
 800104c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001050:	f000 b80a 	b.w	8001068 <__aeabi_d2ulz>
 8001054:	4620      	mov	r0, r4
 8001056:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800105a:	f000 f805 	bl	8001068 <__aeabi_d2ulz>
 800105e:	4240      	negs	r0, r0
 8001060:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001064:	bd38      	pop	{r3, r4, r5, pc}
 8001066:	bf00      	nop

08001068 <__aeabi_d2ulz>:
 8001068:	b5d0      	push	{r4, r6, r7, lr}
 800106a:	2200      	movs	r2, #0
 800106c:	4b0b      	ldr	r3, [pc, #44]	@ (800109c <__aeabi_d2ulz+0x34>)
 800106e:	4606      	mov	r6, r0
 8001070:	460f      	mov	r7, r1
 8001072:	f7ff fa3b 	bl	80004ec <__aeabi_dmul>
 8001076:	f7ff fd11 	bl	8000a9c <__aeabi_d2uiz>
 800107a:	4604      	mov	r4, r0
 800107c:	f7ff f9bc 	bl	80003f8 <__aeabi_ui2d>
 8001080:	2200      	movs	r2, #0
 8001082:	4b07      	ldr	r3, [pc, #28]	@ (80010a0 <__aeabi_d2ulz+0x38>)
 8001084:	f7ff fa32 	bl	80004ec <__aeabi_dmul>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4630      	mov	r0, r6
 800108e:	4639      	mov	r1, r7
 8001090:	f7ff f874 	bl	800017c <__aeabi_dsub>
 8001094:	f7ff fd02 	bl	8000a9c <__aeabi_d2uiz>
 8001098:	4621      	mov	r1, r4
 800109a:	bdd0      	pop	{r4, r6, r7, pc}
 800109c:	3df00000 	.word	0x3df00000
 80010a0:	41f00000 	.word	0x41f00000

080010a4 <CLCD_Delay>:
******************************************************************************************************************/
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 80010ae:	88fb      	ldrh	r3, [r7, #6]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f001 f8c5 	bl	8002240 <HAL_Delay>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af02      	add	r7, sp, #8
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	460b      	mov	r3, r1
 80010c8:	70fb      	strb	r3, [r7, #3]
 80010ca:	4613      	mov	r3, r2
 80010cc:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 80010ce:	78fb      	ldrb	r3, [r7, #3]
 80010d0:	f023 030f 	bic.w	r3, r3, #15
 80010d4:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 80010d6:	78fb      	ldrb	r3, [r7, #3]
 80010d8:	011b      	lsls	r3, r3, #4
 80010da:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	7adb      	ldrb	r3, [r3, #11]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d007      	beq.n	80010f4 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT; 
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	f043 0308 	orr.w	r3, r3, #8
 80010ea:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT; 
 80010ec:	7bbb      	ldrb	r3, [r7, #14]
 80010ee:	f043 0308 	orr.w	r3, r3, #8
 80010f2:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 80010f4:	78bb      	ldrb	r3, [r7, #2]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d108      	bne.n	800110c <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 8001102:	7bbb      	ldrb	r3, [r7, #14]
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	73bb      	strb	r3, [r7, #14]
 800110a:	e00a      	b.n	8001122 <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 800110c:	78bb      	ldrb	r3, [r7, #2]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d107      	bne.n	8001122 <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	f023 0301 	bic.w	r3, r3, #1
 8001118:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 800111a:	7bbb      	ldrb	r3, [r7, #14]
 800111c:	f023 0301 	bic.w	r3, r3, #1
 8001120:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	b2db      	uxtb	r3, r3
 800112a:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 800112c:	2001      	movs	r0, #1
 800112e:	f7ff ffb9 	bl	80010a4 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 8001136:	7bbb      	ldrb	r3, [r7, #14]
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	b2db      	uxtb	r3, r3
 800113e:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 8001140:	2001      	movs	r0, #1
 8001142:	f7ff ffaf 	bl	80010a4 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8001146:	7bbb      	ldrb	r3, [r7, #14]
 8001148:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	791b      	ldrb	r3, [r3, #4]
 8001152:	4619      	mov	r1, r3
 8001154:	f107 0208 	add.w	r2, r7, #8
 8001158:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	2304      	movs	r3, #4
 8001160:	f001 fd1c 	bl	8002b9c <HAL_I2C_Master_Transmit>
}
 8001164:	bf00      	nop
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	4611      	mov	r1, r2
 8001178:	461a      	mov	r2, r3
 800117a:	460b      	mov	r3, r1
 800117c:	71fb      	strb	r3, [r7, #7]
 800117e:	4613      	mov	r3, r2
 8001180:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	68ba      	ldr	r2, [r7, #8]
 8001186:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	79fa      	ldrb	r2, [r7, #7]
 800118c:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	79ba      	ldrb	r2, [r7, #6]
 8001192:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	7e3a      	ldrb	r2, [r7, #24]
 8001198:	719a      	strb	r2, [r3, #6]
	
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2228      	movs	r2, #40	@ 0x28
 800119e:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2206      	movs	r2, #6
 80011a4:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	220c      	movs	r2, #12
 80011aa:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2214      	movs	r2, #20
 80011b0:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2208      	movs	r2, #8
 80011b6:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 80011b8:	2032      	movs	r0, #50	@ 0x32
 80011ba:	f7ff ff73 	bl	80010a4 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 80011be:	2200      	movs	r2, #0
 80011c0:	2133      	movs	r1, #51	@ 0x33
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f7ff ff7b 	bl	80010be <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2133      	movs	r1, #51	@ 0x33
 80011cc:	68f8      	ldr	r0, [r7, #12]
 80011ce:	f7ff ff76 	bl	80010be <CLCD_WriteI2C>
	CLCD_Delay(5);
 80011d2:	2005      	movs	r0, #5
 80011d4:	f7ff ff66 	bl	80010a4 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 80011d8:	2200      	movs	r2, #0
 80011da:	2132      	movs	r1, #50	@ 0x32
 80011dc:	68f8      	ldr	r0, [r7, #12]
 80011de:	f7ff ff6e 	bl	80010be <CLCD_WriteI2C>
	CLCD_Delay(5);
 80011e2:	2005      	movs	r0, #5
 80011e4:	f7ff ff5e 	bl	80010a4 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2120      	movs	r1, #32
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	f7ff ff66 	bl	80010be <CLCD_WriteI2C>
	CLCD_Delay(5);
 80011f2:	2005      	movs	r0, #5
 80011f4:	f7ff ff56 	bl	80010a4 <CLCD_Delay>
	
	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	79db      	ldrb	r3, [r3, #7]
 80011fc:	2200      	movs	r2, #0
 80011fe:	4619      	mov	r1, r3
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f7ff ff5c 	bl	80010be <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	7a1b      	ldrb	r3, [r3, #8]
 800120a:	2200      	movs	r2, #0
 800120c:	4619      	mov	r1, r3
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f7ff ff55 	bl	80010be <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	7a5b      	ldrb	r3, [r3, #9]
 8001218:	2200      	movs	r2, #0
 800121a:	4619      	mov	r1, r3
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f7ff ff4e 	bl	80010be <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	7a9b      	ldrb	r3, [r3, #10]
 8001226:	2200      	movs	r2, #0
 8001228:	4619      	mov	r1, r3
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f7ff ff47 	bl	80010be <CLCD_WriteI2C>
	
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 8001230:	2200      	movs	r2, #0
 8001232:	2101      	movs	r1, #1
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	f7ff ff42 	bl	80010be <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 800123a:	2200      	movs	r2, #0
 800123c:	2102      	movs	r1, #2
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f7ff ff3d 	bl	80010be <CLCD_WriteI2C>
}
 8001244:	bf00      	nop
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	70fb      	strb	r3, [r7, #3]
 8001258:	4613      	mov	r3, r2
 800125a:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 800125c:	2300      	movs	r3, #0
 800125e:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	795b      	ldrb	r3, [r3, #5]
 8001264:	78fa      	ldrb	r2, [r7, #3]
 8001266:	429a      	cmp	r2, r3
 8001268:	d303      	bcc.n	8001272 <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	795b      	ldrb	r3, [r3, #5]
 800126e:	3b01      	subs	r3, #1
 8001270:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	799b      	ldrb	r3, [r3, #6]
 8001276:	78ba      	ldrb	r2, [r7, #2]
 8001278:	429a      	cmp	r2, r3
 800127a:	d303      	bcc.n	8001284 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	799b      	ldrb	r3, [r3, #6]
 8001280:	3b01      	subs	r3, #1
 8001282:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 8001284:	78bb      	ldrb	r3, [r7, #2]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d102      	bne.n	8001290 <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 800128a:	78fb      	ldrb	r3, [r7, #3]
 800128c:	73fb      	strb	r3, [r7, #15]
 800128e:	e013      	b.n	80012b8 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 8001290:	78bb      	ldrb	r3, [r7, #2]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d103      	bne.n	800129e <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8001296:	78fb      	ldrb	r3, [r7, #3]
 8001298:	3340      	adds	r3, #64	@ 0x40
 800129a:	73fb      	strb	r3, [r7, #15]
 800129c:	e00c      	b.n	80012b8 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 800129e:	78bb      	ldrb	r3, [r7, #2]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d103      	bne.n	80012ac <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 80012a4:	78fb      	ldrb	r3, [r7, #3]
 80012a6:	3314      	adds	r3, #20
 80012a8:	73fb      	strb	r3, [r7, #15]
 80012aa:	e005      	b.n	80012b8 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 80012ac:	78bb      	ldrb	r3, [r7, #2]
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	d102      	bne.n	80012b8 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 80012b2:	78fb      	ldrb	r3, [r7, #3]
 80012b4:	3354      	adds	r3, #84	@ 0x54
 80012b6:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2200      	movs	r2, #0
 80012c2:	4619      	mov	r1, r3
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff fefa 	bl	80010be <CLCD_WriteI2C>
}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	460b      	mov	r3, r1
 80012dc:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 80012de:	78fb      	ldrb	r3, [r7, #3]
 80012e0:	2201      	movs	r2, #1
 80012e2:	4619      	mov	r1, r3
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff feea 	bl	80010be <CLCD_WriteI2C>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 80012fc:	e007      	b.n	800130e <CLCD_I2C_WriteString+0x1c>
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	1c5a      	adds	r2, r3, #1
 8001302:	603a      	str	r2, [r7, #0]
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	4619      	mov	r1, r3
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ffe2 	bl	80012d2 <CLCD_I2C_WriteChar>
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f3      	bne.n	80012fe <CLCD_I2C_WriteString+0xc>
}
 8001316:	bf00      	nop
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <microDelay>:
float tCelsius = 0;
float tFahrenheit = 0;
float RH = 0;

void microDelay (uint16_t delay)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800132a:	4b08      	ldr	r3, [pc, #32]	@ (800134c <microDelay+0x2c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2200      	movs	r2, #0
 8001330:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8001332:	bf00      	nop
 8001334:	4b05      	ldr	r3, [pc, #20]	@ (800134c <microDelay+0x2c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	429a      	cmp	r2, r3
 800133e:	d3f9      	bcc.n	8001334 <microDelay+0x14>
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	20000248 	.word	0x20000248

08001350 <DHT11_Start>:


uint8_t DHT11_Start (void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8001366:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800136a:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 800136c:	2301      	movs	r3, #1
 800136e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2302      	movs	r3, #2
 8001372:	613b      	str	r3, [r7, #16]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	4619      	mov	r1, r3
 800137c:	482c      	ldr	r0, [pc, #176]	@ (8001430 <DHT11_Start+0xe0>)
 800137e:	f001 f915 	bl	80025ac <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8001382:	2200      	movs	r2, #0
 8001384:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001388:	4829      	ldr	r0, [pc, #164]	@ (8001430 <DHT11_Start+0xe0>)
 800138a:	f001 faaa 	bl	80028e2 <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 800138e:	2014      	movs	r0, #20
 8001390:	f000 ff56 	bl	8002240 <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001394:	2201      	movs	r2, #1
 8001396:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800139a:	4825      	ldr	r0, [pc, #148]	@ (8001430 <DHT11_Start+0xe0>)
 800139c:	f001 faa1 	bl	80028e2 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 80013a0:	201e      	movs	r0, #30
 80013a2:	f7ff ffbd 	bl	8001320 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	4619      	mov	r1, r3
 80013b2:	481f      	ldr	r0, [pc, #124]	@ (8001430 <DHT11_Start+0xe0>)
 80013b4:	f001 f8fa 	bl	80025ac <HAL_GPIO_Init>
  microDelay (40);
 80013b8:	2028      	movs	r0, #40	@ 0x28
 80013ba:	f7ff ffb1 	bl	8001320 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80013be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013c2:	481b      	ldr	r0, [pc, #108]	@ (8001430 <DHT11_Start+0xe0>)
 80013c4:	f001 fa76 	bl	80028b4 <HAL_GPIO_ReadPin>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10c      	bne.n	80013e8 <DHT11_Start+0x98>
  {
    microDelay (80);
 80013ce:	2050      	movs	r0, #80	@ 0x50
 80013d0:	f7ff ffa6 	bl	8001320 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 80013d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013d8:	4815      	ldr	r0, [pc, #84]	@ (8001430 <DHT11_Start+0xe0>)
 80013da:	f001 fa6b 	bl	80028b4 <HAL_GPIO_ReadPin>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <DHT11_Start+0x98>
 80013e4:	2301      	movs	r3, #1
 80013e6:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 80013e8:	f000 ff20 	bl	800222c <HAL_GetTick>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4a11      	ldr	r2, [pc, #68]	@ (8001434 <DHT11_Start+0xe4>)
 80013f0:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 80013f2:	f000 ff1b 	bl	800222c <HAL_GetTick>
 80013f6:	4603      	mov	r3, r0
 80013f8:	4a0f      	ldr	r2, [pc, #60]	@ (8001438 <DHT11_Start+0xe8>)
 80013fa:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80013fc:	e004      	b.n	8001408 <DHT11_Start+0xb8>
  {
    cMillis = HAL_GetTick();
 80013fe:	f000 ff15 	bl	800222c <HAL_GetTick>
 8001402:	4603      	mov	r3, r0
 8001404:	4a0c      	ldr	r2, [pc, #48]	@ (8001438 <DHT11_Start+0xe8>)
 8001406:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001408:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800140c:	4808      	ldr	r0, [pc, #32]	@ (8001430 <DHT11_Start+0xe0>)
 800140e:	f001 fa51 	bl	80028b4 <HAL_GPIO_ReadPin>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d006      	beq.n	8001426 <DHT11_Start+0xd6>
 8001418:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <DHT11_Start+0xe4>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	1c9a      	adds	r2, r3, #2
 800141e:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <DHT11_Start+0xe8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	429a      	cmp	r2, r3
 8001424:	d8eb      	bhi.n	80013fe <DHT11_Start+0xae>
  }
  return Response;
 8001426:	7dfb      	ldrb	r3, [r7, #23]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40010c00 	.word	0x40010c00
 8001434:	200002f4 	.word	0x200002f4
 8001438:	200002f8 	.word	0x200002f8

0800143c <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 8001442:	2300      	movs	r3, #0
 8001444:	71fb      	strb	r3, [r7, #7]
 8001446:	e066      	b.n	8001516 <DHT11_Read+0xda>
  {
    pMillis = HAL_GetTick();
 8001448:	f000 fef0 	bl	800222c <HAL_GetTick>
 800144c:	4603      	mov	r3, r0
 800144e:	4a36      	ldr	r2, [pc, #216]	@ (8001528 <DHT11_Read+0xec>)
 8001450:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8001452:	f000 feeb 	bl	800222c <HAL_GetTick>
 8001456:	4603      	mov	r3, r0
 8001458:	4a34      	ldr	r2, [pc, #208]	@ (800152c <DHT11_Read+0xf0>)
 800145a:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800145c:	e004      	b.n	8001468 <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 800145e:	f000 fee5 	bl	800222c <HAL_GetTick>
 8001462:	4603      	mov	r3, r0
 8001464:	4a31      	ldr	r2, [pc, #196]	@ (800152c <DHT11_Read+0xf0>)
 8001466:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001468:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800146c:	4830      	ldr	r0, [pc, #192]	@ (8001530 <DHT11_Read+0xf4>)
 800146e:	f001 fa21 	bl	80028b4 <HAL_GPIO_ReadPin>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d106      	bne.n	8001486 <DHT11_Read+0x4a>
 8001478:	4b2b      	ldr	r3, [pc, #172]	@ (8001528 <DHT11_Read+0xec>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	1c9a      	adds	r2, r3, #2
 800147e:	4b2b      	ldr	r3, [pc, #172]	@ (800152c <DHT11_Read+0xf0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	429a      	cmp	r2, r3
 8001484:	d8eb      	bhi.n	800145e <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 8001486:	2028      	movs	r0, #40	@ 0x28
 8001488:	f7ff ff4a 	bl	8001320 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 800148c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001490:	4827      	ldr	r0, [pc, #156]	@ (8001530 <DHT11_Read+0xf4>)
 8001492:	f001 fa0f 	bl	80028b4 <HAL_GPIO_ReadPin>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d10e      	bne.n	80014ba <DHT11_Read+0x7e>
      b&= ~(1<<(7-a));
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	f1c3 0307 	rsb	r3, r3, #7
 80014a2:	2201      	movs	r2, #1
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	b25a      	sxtb	r2, r3
 80014ae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80014b2:	4013      	ands	r3, r2
 80014b4:	b25b      	sxtb	r3, r3
 80014b6:	71bb      	strb	r3, [r7, #6]
 80014b8:	e00b      	b.n	80014d2 <DHT11_Read+0x96>
    else
      b|= (1<<(7-a));
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	f1c3 0307 	rsb	r3, r3, #7
 80014c0:	2201      	movs	r2, #1
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	b25a      	sxtb	r2, r3
 80014c8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	b25b      	sxtb	r3, r3
 80014d0:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 80014d2:	f000 feab 	bl	800222c <HAL_GetTick>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4a13      	ldr	r2, [pc, #76]	@ (8001528 <DHT11_Read+0xec>)
 80014da:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 80014dc:	f000 fea6 	bl	800222c <HAL_GetTick>
 80014e0:	4603      	mov	r3, r0
 80014e2:	4a12      	ldr	r2, [pc, #72]	@ (800152c <DHT11_Read+0xf0>)
 80014e4:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80014e6:	e004      	b.n	80014f2 <DHT11_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 80014e8:	f000 fea0 	bl	800222c <HAL_GetTick>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4a0f      	ldr	r2, [pc, #60]	@ (800152c <DHT11_Read+0xf0>)
 80014f0:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80014f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014f6:	480e      	ldr	r0, [pc, #56]	@ (8001530 <DHT11_Read+0xf4>)
 80014f8:	f001 f9dc 	bl	80028b4 <HAL_GPIO_ReadPin>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d006      	beq.n	8001510 <DHT11_Read+0xd4>
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <DHT11_Read+0xec>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	1c9a      	adds	r2, r3, #2
 8001508:	4b08      	ldr	r3, [pc, #32]	@ (800152c <DHT11_Read+0xf0>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	429a      	cmp	r2, r3
 800150e:	d8eb      	bhi.n	80014e8 <DHT11_Read+0xac>
  for (a=0;a<8;a++)
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	3301      	adds	r3, #1
 8001514:	71fb      	strb	r3, [r7, #7]
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	2b07      	cmp	r3, #7
 800151a:	d995      	bls.n	8001448 <DHT11_Read+0xc>
    }
  }
  return b;
 800151c:	79bb      	ldrb	r3, [r7, #6]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200002f4 	.word	0x200002f4
 800152c:	200002f8 	.word	0x200002f8
 8001530:	40010c00 	.word	0x40010c00

08001534 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800153c:	1d39      	adds	r1, r7, #4
 800153e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001542:	2201      	movs	r2, #1
 8001544:	4803      	ldr	r0, [pc, #12]	@ (8001554 <__io_putchar+0x20>)
 8001546:	f002 ff4d 	bl	80043e4 <HAL_UART_Transmit>


  return ch;
 800154a:	687b      	ldr	r3, [r7, #4]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000290 	.word	0x20000290

08001558 <HAL_UART_RxCpltCallback>:





void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {  // Kiểm tra nếu là UART1
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a20      	ldr	r2, [pc, #128]	@ (80015e8 <HAL_UART_RxCpltCallback+0x90>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d139      	bne.n	80015de <HAL_UART_RxCpltCallback+0x86>
        char rxChar = rxBuffer[rxIndex]; // Lấy ký tự nhận được
 800156a:	4b20      	ldr	r3, [pc, #128]	@ (80015ec <HAL_UART_RxCpltCallback+0x94>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	461a      	mov	r2, r3
 8001570:	4b1f      	ldr	r3, [pc, #124]	@ (80015f0 <HAL_UART_RxCpltCallback+0x98>)
 8001572:	5c9b      	ldrb	r3, [r3, r2]
 8001574:	73fb      	strb	r3, [r7, #15]
        if (rxChar == '\n') {           // Ký tự kết thúc chuỗi
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	2b0a      	cmp	r3, #10
 800157a:	d119      	bne.n	80015b0 <HAL_UART_RxCpltCallback+0x58>
            rxBuffer[rxIndex] = '\0';   // Kết thúc chuỗi
 800157c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ec <HAL_UART_RxCpltCallback+0x94>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b1b      	ldr	r3, [pc, #108]	@ (80015f0 <HAL_UART_RxCpltCallback+0x98>)
 8001584:	2100      	movs	r1, #0
 8001586:	5499      	strb	r1, [r3, r2]
            osMutexWait(myMutex01Handle, osWaitForever); // Lấy Mutex
 8001588:	4b1a      	ldr	r3, [pc, #104]	@ (80015f4 <HAL_UART_RxCpltCallback+0x9c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f04f 31ff 	mov.w	r1, #4294967295
 8001590:	4618      	mov	r0, r3
 8001592:	f003 fde1 	bl	8005158 <osMutexWait>
            strcpy(command, rxBuffer); // Sao chép lệnh nhận được
 8001596:	4916      	ldr	r1, [pc, #88]	@ (80015f0 <HAL_UART_RxCpltCallback+0x98>)
 8001598:	4817      	ldr	r0, [pc, #92]	@ (80015f8 <HAL_UART_RxCpltCallback+0xa0>)
 800159a:	f007 f888 	bl	80086ae <strcpy>
            osMutexRelease(myMutex01Handle); // Giải phóng Mutex
 800159e:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <HAL_UART_RxCpltCallback+0x9c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f003 fe26 	bl	80051f4 <osMutexRelease>
            rxIndex = 0;                // Reset chỉ số
 80015a8:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <HAL_UART_RxCpltCallback+0x94>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
 80015ae:	e00c      	b.n	80015ca <HAL_UART_RxCpltCallback+0x72>
        } else {
            rxIndex++;                  // Tăng chỉ số
 80015b0:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <HAL_UART_RxCpltCallback+0x94>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	3301      	adds	r3, #1
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <HAL_UART_RxCpltCallback+0x94>)
 80015ba:	701a      	strb	r2, [r3, #0]
            if (rxIndex >= RX_BUFFER_SIZE) { // Quá kích thước buffer
 80015bc:	4b0b      	ldr	r3, [pc, #44]	@ (80015ec <HAL_UART_RxCpltCallback+0x94>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b31      	cmp	r3, #49	@ 0x31
 80015c2:	d902      	bls.n	80015ca <HAL_UART_RxCpltCallback+0x72>
                rxIndex = 0;            // Reset chỉ số
 80015c4:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <HAL_UART_RxCpltCallback+0x94>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
            }
        }
        // Tiếp tục nhận ký tự tiếp theo
        HAL_UART_Receive_IT(&huart1, (uint8_t *)&rxBuffer[rxIndex], 1);
 80015ca:	4b08      	ldr	r3, [pc, #32]	@ (80015ec <HAL_UART_RxCpltCallback+0x94>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b07      	ldr	r3, [pc, #28]	@ (80015f0 <HAL_UART_RxCpltCallback+0x98>)
 80015d2:	4413      	add	r3, r2
 80015d4:	2201      	movs	r2, #1
 80015d6:	4619      	mov	r1, r3
 80015d8:	4808      	ldr	r0, [pc, #32]	@ (80015fc <HAL_UART_RxCpltCallback+0xa4>)
 80015da:	f002 ff8e 	bl	80044fa <HAL_UART_Receive_IT>
    }
}
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40013800 	.word	0x40013800
 80015ec:	20000392 	.word	0x20000392
 80015f0:	2000032c 	.word	0x2000032c
 80015f4:	200002e8 	.word	0x200002e8
 80015f8:	20000360 	.word	0x20000360
 80015fc:	20000290 	.word	0x20000290

08001600 <Handle_Command>:

// Xử lý lệnh nhận được
void Handle_Command(void) {
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
    if (strcmp(command, "LED_ON") == 0) { // Lệnh bật LED
 8001604:	4912      	ldr	r1, [pc, #72]	@ (8001650 <Handle_Command+0x50>)
 8001606:	4813      	ldr	r0, [pc, #76]	@ (8001654 <Handle_Command+0x54>)
 8001608:	f7fe fda2 	bl	8000150 <strcmp>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d108      	bne.n	8001624 <Handle_Command+0x24>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001612:	2201      	movs	r2, #1
 8001614:	2120      	movs	r1, #32
 8001616:	4810      	ldr	r0, [pc, #64]	@ (8001658 <Handle_Command+0x58>)
 8001618:	f001 f963 	bl	80028e2 <HAL_GPIO_WritePin>
        printf("LED ON\n");
 800161c:	480f      	ldr	r0, [pc, #60]	@ (800165c <Handle_Command+0x5c>)
 800161e:	f006 fec7 	bl	80083b0 <puts>
 8001622:	e00e      	b.n	8001642 <Handle_Command+0x42>
    } else if (strcmp(command, "LED_OFF") == 0) { // Lệnh tắt LED
 8001624:	490e      	ldr	r1, [pc, #56]	@ (8001660 <Handle_Command+0x60>)
 8001626:	480b      	ldr	r0, [pc, #44]	@ (8001654 <Handle_Command+0x54>)
 8001628:	f7fe fd92 	bl	8000150 <strcmp>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d107      	bne.n	8001642 <Handle_Command+0x42>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	2120      	movs	r1, #32
 8001636:	4808      	ldr	r0, [pc, #32]	@ (8001658 <Handle_Command+0x58>)
 8001638:	f001 f953 	bl	80028e2 <HAL_GPIO_WritePin>
        printf("LED OFF\n");
 800163c:	4809      	ldr	r0, [pc, #36]	@ (8001664 <Handle_Command+0x64>)
 800163e:	f006 feb7 	bl	80083b0 <puts>
    }
    memset(command, 0, RX_BUFFER_SIZE); // Xóa bộ đệm lệnh
 8001642:	2232      	movs	r2, #50	@ 0x32
 8001644:	2100      	movs	r1, #0
 8001646:	4803      	ldr	r0, [pc, #12]	@ (8001654 <Handle_Command+0x54>)
 8001648:	f006 ffb2 	bl	80085b0 <memset>
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	0800bcb0 	.word	0x0800bcb0
 8001654:	20000360 	.word	0x20000360
 8001658:	40010800 	.word	0x40010800
 800165c:	0800bcb8 	.word	0x0800bcb8
 8001660:	0800bcc0 	.word	0x0800bcc0
 8001664:	0800bcc8 	.word	0x0800bcc8

08001668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001668:	b5b0      	push	{r4, r5, r7, lr}
 800166a:	b0a0      	sub	sp, #128	@ 0x80
 800166c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800166e:	f000 fdb5 	bl	80021dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001672:	f000 f893 	bl	800179c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001676:	f000 f97f 	bl	8001978 <MX_GPIO_Init>
  MX_I2C1_Init();
 800167a:	f000 f8d5 	bl	8001828 <MX_I2C1_Init>
  MX_TIM1_Init();
 800167e:	f000 f901 	bl	8001884 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001682:	f000 f94f 	bl	8001924 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CLCD_I2C_Init(&LCD1,&hi2c1,0x4e,16,2);
 8001686:	2302      	movs	r3, #2
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	2310      	movs	r3, #16
 800168c:	224e      	movs	r2, #78	@ 0x4e
 800168e:	4934      	ldr	r1, [pc, #208]	@ (8001760 <main+0xf8>)
 8001690:	4834      	ldr	r0, [pc, #208]	@ (8001764 <main+0xfc>)
 8001692:	f7ff fd6b 	bl	800116c <CLCD_I2C_Init>
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rxBuffer[rxIndex], 1); // Bắt đầu nhận UART
 8001696:	4b34      	ldr	r3, [pc, #208]	@ (8001768 <main+0x100>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	4b33      	ldr	r3, [pc, #204]	@ (800176c <main+0x104>)
 800169e:	4413      	add	r3, r2
 80016a0:	2201      	movs	r2, #1
 80016a2:	4619      	mov	r1, r3
 80016a4:	4832      	ldr	r0, [pc, #200]	@ (8001770 <main+0x108>)
 80016a6:	f002 ff28 	bl	80044fa <HAL_UART_Receive_IT>
    HAL_TIM_Base_Start(&htim1);
 80016aa:	4832      	ldr	r0, [pc, #200]	@ (8001774 <main+0x10c>)
 80016ac:	f002 fa5e 	bl	8003b6c <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 80016b0:	2300      	movs	r3, #0
 80016b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80016b4:	2300      	movs	r3, #0
 80016b6:	677b      	str	r3, [r7, #116]	@ 0x74
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 80016b8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80016bc:	4618      	mov	r0, r3
 80016be:	f003 fd33 	bl	8005128 <osMutexCreate>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4a2c      	ldr	r2, [pc, #176]	@ (8001778 <main+0x110>)
 80016c6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskDieukhien */
  osThreadDef(TaskDieukhien, StartDefaultTask, osPriorityHigh, 0, 256);
 80016c8:	4b2c      	ldr	r3, [pc, #176]	@ (800177c <main+0x114>)
 80016ca:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80016ce:	461d      	mov	r5, r3
 80016d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskDieukhienHandle = osThreadCreate(osThread(TaskDieukhien), NULL);
 80016dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 fcc0 	bl	8005068 <osThreadCreate>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4a25      	ldr	r2, [pc, #148]	@ (8001780 <main+0x118>)
 80016ec:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskDHT */
  osThreadDef(TaskDHT, StartTask02, osPriorityAboveNormal, 0, 256);
 80016ee:	4b25      	ldr	r3, [pc, #148]	@ (8001784 <main+0x11c>)
 80016f0:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80016f4:	461d      	mov	r5, r3
 80016f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskDHTHandle = osThreadCreate(osThread(TaskDHT), NULL);
 8001702:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f003 fcad 	bl	8005068 <osThreadCreate>
 800170e:	4603      	mov	r3, r0
 8001710:	4a1d      	ldr	r2, [pc, #116]	@ (8001788 <main+0x120>)
 8001712:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskLCD */
  osThreadDef(TaskLCD, StartTask03, osPriorityNormal, 0, 256);
 8001714:	4b1d      	ldr	r3, [pc, #116]	@ (800178c <main+0x124>)
 8001716:	f107 041c 	add.w	r4, r7, #28
 800171a:	461d      	mov	r5, r3
 800171c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800171e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001720:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001724:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskLCDHandle = osThreadCreate(osThread(TaskLCD), NULL);
 8001728:	f107 031c 	add.w	r3, r7, #28
 800172c:	2100      	movs	r1, #0
 800172e:	4618      	mov	r0, r3
 8001730:	f003 fc9a 	bl	8005068 <osThreadCreate>
 8001734:	4603      	mov	r3, r0
 8001736:	4a16      	ldr	r2, [pc, #88]	@ (8001790 <main+0x128>)
 8001738:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskUART */
  osThreadDef(TaskUART, StartTask04, osPriorityLow, 0, 256);
 800173a:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <main+0x12c>)
 800173c:	463c      	mov	r4, r7
 800173e:	461d      	mov	r5, r3
 8001740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001744:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001748:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskUARTHandle = osThreadCreate(osThread(TaskUART), NULL);
 800174c:	463b      	mov	r3, r7
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f003 fc89 	bl	8005068 <osThreadCreate>
 8001756:	4603      	mov	r3, r0
 8001758:	4a0f      	ldr	r2, [pc, #60]	@ (8001798 <main+0x130>)
 800175a:	6013      	str	r3, [r2, #0]

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <main+0xf4>
 8001760:	200001f4 	.word	0x200001f4
 8001764:	20000320 	.word	0x20000320
 8001768:	20000392 	.word	0x20000392
 800176c:	2000032c 	.word	0x2000032c
 8001770:	20000290 	.word	0x20000290
 8001774:	20000248 	.word	0x20000248
 8001778:	200002e8 	.word	0x200002e8
 800177c:	0800bce0 	.word	0x0800bce0
 8001780:	200002d8 	.word	0x200002d8
 8001784:	0800bd04 	.word	0x0800bd04
 8001788:	200002dc 	.word	0x200002dc
 800178c:	0800bd28 	.word	0x0800bd28
 8001790:	200002e0 	.word	0x200002e0
 8001794:	0800bd50 	.word	0x0800bd50
 8001798:	200002e4 	.word	0x200002e4

0800179c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b090      	sub	sp, #64	@ 0x40
 80017a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a2:	f107 0318 	add.w	r3, r7, #24
 80017a6:	2228      	movs	r2, #40	@ 0x28
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f006 ff00 	bl	80085b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
 80017bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017be:	2301      	movs	r3, #1
 80017c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80017c8:	2300      	movs	r3, #0
 80017ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017cc:	2301      	movs	r3, #1
 80017ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017d0:	2302      	movs	r3, #2
 80017d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80017da:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80017de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e0:	f107 0318 	add.w	r3, r7, #24
 80017e4:	4618      	mov	r0, r3
 80017e6:	f001 fd31 	bl	800324c <HAL_RCC_OscConfig>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80017f0:	f000 fa6c 	bl	8001ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f4:	230f      	movs	r3, #15
 80017f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f8:	2302      	movs	r3, #2
 80017fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001800:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001804:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	2102      	movs	r1, #2
 800180e:	4618      	mov	r0, r3
 8001810:	f001 ff9e 	bl	8003750 <HAL_RCC_ClockConfig>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800181a:	f000 fa57 	bl	8001ccc <Error_Handler>
  }
}
 800181e:	bf00      	nop
 8001820:	3740      	adds	r7, #64	@ 0x40
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800182c:	4b12      	ldr	r3, [pc, #72]	@ (8001878 <MX_I2C1_Init+0x50>)
 800182e:	4a13      	ldr	r2, [pc, #76]	@ (800187c <MX_I2C1_Init+0x54>)
 8001830:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001832:	4b11      	ldr	r3, [pc, #68]	@ (8001878 <MX_I2C1_Init+0x50>)
 8001834:	4a12      	ldr	r2, [pc, #72]	@ (8001880 <MX_I2C1_Init+0x58>)
 8001836:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001838:	4b0f      	ldr	r3, [pc, #60]	@ (8001878 <MX_I2C1_Init+0x50>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800183e:	4b0e      	ldr	r3, [pc, #56]	@ (8001878 <MX_I2C1_Init+0x50>)
 8001840:	2200      	movs	r2, #0
 8001842:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001844:	4b0c      	ldr	r3, [pc, #48]	@ (8001878 <MX_I2C1_Init+0x50>)
 8001846:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800184a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800184c:	4b0a      	ldr	r3, [pc, #40]	@ (8001878 <MX_I2C1_Init+0x50>)
 800184e:	2200      	movs	r2, #0
 8001850:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001852:	4b09      	ldr	r3, [pc, #36]	@ (8001878 <MX_I2C1_Init+0x50>)
 8001854:	2200      	movs	r2, #0
 8001856:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001858:	4b07      	ldr	r3, [pc, #28]	@ (8001878 <MX_I2C1_Init+0x50>)
 800185a:	2200      	movs	r2, #0
 800185c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800185e:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <MX_I2C1_Init+0x50>)
 8001860:	2200      	movs	r2, #0
 8001862:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001864:	4804      	ldr	r0, [pc, #16]	@ (8001878 <MX_I2C1_Init+0x50>)
 8001866:	f001 f855 	bl	8002914 <HAL_I2C_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001870:	f000 fa2c 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}
 8001878:	200001f4 	.word	0x200001f4
 800187c:	40005400 	.word	0x40005400
 8001880:	000186a0 	.word	0x000186a0

08001884 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800188a:	f107 0308 	add.w	r3, r7, #8
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001898:	463b      	mov	r3, r7
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018a0:	4b1e      	ldr	r3, [pc, #120]	@ (800191c <MX_TIM1_Init+0x98>)
 80018a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001920 <MX_TIM1_Init+0x9c>)
 80018a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018a6:	4b1d      	ldr	r3, [pc, #116]	@ (800191c <MX_TIM1_Init+0x98>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ac:	4b1b      	ldr	r3, [pc, #108]	@ (800191c <MX_TIM1_Init+0x98>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018b2:	4b1a      	ldr	r3, [pc, #104]	@ (800191c <MX_TIM1_Init+0x98>)
 80018b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ba:	4b18      	ldr	r3, [pc, #96]	@ (800191c <MX_TIM1_Init+0x98>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018c0:	4b16      	ldr	r3, [pc, #88]	@ (800191c <MX_TIM1_Init+0x98>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c6:	4b15      	ldr	r3, [pc, #84]	@ (800191c <MX_TIM1_Init+0x98>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018cc:	4813      	ldr	r0, [pc, #76]	@ (800191c <MX_TIM1_Init+0x98>)
 80018ce:	f002 f8fd 	bl	8003acc <HAL_TIM_Base_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80018d8:	f000 f9f8 	bl	8001ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018e2:	f107 0308 	add.w	r3, r7, #8
 80018e6:	4619      	mov	r1, r3
 80018e8:	480c      	ldr	r0, [pc, #48]	@ (800191c <MX_TIM1_Init+0x98>)
 80018ea:	f002 facb 	bl	8003e84 <HAL_TIM_ConfigClockSource>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80018f4:	f000 f9ea 	bl	8001ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f8:	2300      	movs	r3, #0
 80018fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001900:	463b      	mov	r3, r7
 8001902:	4619      	mov	r1, r3
 8001904:	4805      	ldr	r0, [pc, #20]	@ (800191c <MX_TIM1_Init+0x98>)
 8001906:	f002 fcad 	bl	8004264 <HAL_TIMEx_MasterConfigSynchronization>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001910:	f000 f9dc 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001914:	bf00      	nop
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000248 	.word	0x20000248
 8001920:	40012c00 	.word	0x40012c00

08001924 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001928:	4b11      	ldr	r3, [pc, #68]	@ (8001970 <MX_USART1_UART_Init+0x4c>)
 800192a:	4a12      	ldr	r2, [pc, #72]	@ (8001974 <MX_USART1_UART_Init+0x50>)
 800192c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800192e:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <MX_USART1_UART_Init+0x4c>)
 8001930:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001934:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001936:	4b0e      	ldr	r3, [pc, #56]	@ (8001970 <MX_USART1_UART_Init+0x4c>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800193c:	4b0c      	ldr	r3, [pc, #48]	@ (8001970 <MX_USART1_UART_Init+0x4c>)
 800193e:	2200      	movs	r2, #0
 8001940:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001942:	4b0b      	ldr	r3, [pc, #44]	@ (8001970 <MX_USART1_UART_Init+0x4c>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001948:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <MX_USART1_UART_Init+0x4c>)
 800194a:	220c      	movs	r2, #12
 800194c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800194e:	4b08      	ldr	r3, [pc, #32]	@ (8001970 <MX_USART1_UART_Init+0x4c>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001954:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <MX_USART1_UART_Init+0x4c>)
 8001956:	2200      	movs	r2, #0
 8001958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800195a:	4805      	ldr	r0, [pc, #20]	@ (8001970 <MX_USART1_UART_Init+0x4c>)
 800195c:	f002 fcf2 	bl	8004344 <HAL_UART_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001966:	f000 f9b1 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000290 	.word	0x20000290
 8001974:	40013800 	.word	0x40013800

08001978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197e:	f107 0310 	add.w	r3, r7, #16
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800198c:	4b1e      	ldr	r3, [pc, #120]	@ (8001a08 <MX_GPIO_Init+0x90>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	4a1d      	ldr	r2, [pc, #116]	@ (8001a08 <MX_GPIO_Init+0x90>)
 8001992:	f043 0320 	orr.w	r3, r3, #32
 8001996:	6193      	str	r3, [r2, #24]
 8001998:	4b1b      	ldr	r3, [pc, #108]	@ (8001a08 <MX_GPIO_Init+0x90>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	f003 0320 	and.w	r3, r3, #32
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a4:	4b18      	ldr	r3, [pc, #96]	@ (8001a08 <MX_GPIO_Init+0x90>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	4a17      	ldr	r2, [pc, #92]	@ (8001a08 <MX_GPIO_Init+0x90>)
 80019aa:	f043 0304 	orr.w	r3, r3, #4
 80019ae:	6193      	str	r3, [r2, #24]
 80019b0:	4b15      	ldr	r3, [pc, #84]	@ (8001a08 <MX_GPIO_Init+0x90>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019bc:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <MX_GPIO_Init+0x90>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	4a11      	ldr	r2, [pc, #68]	@ (8001a08 <MX_GPIO_Init+0x90>)
 80019c2:	f043 0308 	orr.w	r3, r3, #8
 80019c6:	6193      	str	r3, [r2, #24]
 80019c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a08 <MX_GPIO_Init+0x90>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	607b      	str	r3, [r7, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT_GPIO_Port, DHT_Pin, GPIO_PIN_RESET);
 80019d4:	2200      	movs	r2, #0
 80019d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019da:	480c      	ldr	r0, [pc, #48]	@ (8001a0c <MX_GPIO_Init+0x94>)
 80019dc:	f000 ff81 	bl	80028e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DHT_Pin */
  GPIO_InitStruct.Pin = DHT_Pin;
 80019e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e6:	2301      	movs	r3, #1
 80019e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2302      	movs	r3, #2
 80019f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT_GPIO_Port, &GPIO_InitStruct);
 80019f2:	f107 0310 	add.w	r3, r7, #16
 80019f6:	4619      	mov	r1, r3
 80019f8:	4804      	ldr	r0, [pc, #16]	@ (8001a0c <MX_GPIO_Init+0x94>)
 80019fa:	f000 fdd7 	bl	80025ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019fe:	bf00      	nop
 8001a00:	3720      	adds	r7, #32
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40010c00 	.word	0x40010c00

08001a10 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

	  HAL_UART_Receive_IT(&huart1, (uint8_t *)&rxBuffer[rxIndex], 1);
 8001a18:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <StartDefaultTask+0x50>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b11      	ldr	r3, [pc, #68]	@ (8001a64 <StartDefaultTask+0x54>)
 8001a20:	4413      	add	r3, r2
 8001a22:	2201      	movs	r2, #1
 8001a24:	4619      	mov	r1, r3
 8001a26:	4810      	ldr	r0, [pc, #64]	@ (8001a68 <StartDefaultTask+0x58>)
 8001a28:	f002 fd67 	bl	80044fa <HAL_UART_Receive_IT>

	     /* Infinite loop */
	     for (;;) {
	         // Kiểm tra nếu có lệnh mới
	    	 osMutexWait(myMutex01Handle, osWaitForever);
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a6c <StartDefaultTask+0x5c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f04f 31ff 	mov.w	r1, #4294967295
 8001a34:	4618      	mov	r0, r3
 8001a36:	f003 fb8f 	bl	8005158 <osMutexWait>
	         if (command[0] != '\0') {  // Nếu có lệnh
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a70 <StartDefaultTask+0x60>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d004      	beq.n	8001a4c <StartDefaultTask+0x3c>
	             Handle_Command();      // Xử lý lệnh
 8001a42:	f7ff fddd 	bl	8001600 <Handle_Command>
	             command[0] = '\0';     // Reset lệnh
 8001a46:	4b0a      	ldr	r3, [pc, #40]	@ (8001a70 <StartDefaultTask+0x60>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
	         }
	         osMutexRelease(myMutex01Handle);
 8001a4c:	4b07      	ldr	r3, [pc, #28]	@ (8001a6c <StartDefaultTask+0x5c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f003 fbcf 	bl	80051f4 <osMutexRelease>

	         osDelay(100); // Tạm dừng task một chút để không chiếm CPU
 8001a56:	2064      	movs	r0, #100	@ 0x64
 8001a58:	f003 fb52 	bl	8005100 <osDelay>
	    	 osMutexWait(myMutex01Handle, osWaitForever);
 8001a5c:	e7e6      	b.n	8001a2c <StartDefaultTask+0x1c>
 8001a5e:	bf00      	nop
 8001a60:	20000392 	.word	0x20000392
 8001a64:	2000032c 	.word	0x2000032c
 8001a68:	20000290 	.word	0x20000290
 8001a6c:	200002e8 	.word	0x200002e8
 8001a70:	20000360 	.word	0x20000360

08001a74 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001a74:	b590      	push	{r4, r7, lr}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  if(DHT11_Start())
 8001a7c:	f7ff fc68 	bl	8001350 <DHT11_Start>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0fa      	beq.n	8001a7c <StartTask02+0x8>
	  	      {
	  	        RHI = DHT11_Read(); // Relative humidity integral
 8001a86:	f7ff fcd9 	bl	800143c <DHT11_Read>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b8c <StartTask02+0x118>)
 8001a90:	701a      	strb	r2, [r3, #0]
	  	        RHD = DHT11_Read(); // Relative humidity decimal
 8001a92:	f7ff fcd3 	bl	800143c <DHT11_Read>
 8001a96:	4603      	mov	r3, r0
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b90 <StartTask02+0x11c>)
 8001a9c:	701a      	strb	r2, [r3, #0]
	  	        TCI = DHT11_Read(); // Celsius integral
 8001a9e:	f7ff fccd 	bl	800143c <DHT11_Read>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b3b      	ldr	r3, [pc, #236]	@ (8001b94 <StartTask02+0x120>)
 8001aa8:	701a      	strb	r2, [r3, #0]
	  	        TCD = DHT11_Read(); // Celsius decimal
 8001aaa:	f7ff fcc7 	bl	800143c <DHT11_Read>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b39      	ldr	r3, [pc, #228]	@ (8001b98 <StartTask02+0x124>)
 8001ab4:	701a      	strb	r2, [r3, #0]
	  	        SUM = DHT11_Read(); // Check sum
 8001ab6:	f7ff fcc1 	bl	800143c <DHT11_Read>
 8001aba:	4603      	mov	r3, r0
 8001abc:	461a      	mov	r2, r3
 8001abe:	4b37      	ldr	r3, [pc, #220]	@ (8001b9c <StartTask02+0x128>)
 8001ac0:	701a      	strb	r2, [r3, #0]
	  	        if (RHI + RHD + TCI + TCD == SUM)
 8001ac2:	4b32      	ldr	r3, [pc, #200]	@ (8001b8c <StartTask02+0x118>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4b31      	ldr	r3, [pc, #196]	@ (8001b90 <StartTask02+0x11c>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	4413      	add	r3, r2
 8001ace:	4a31      	ldr	r2, [pc, #196]	@ (8001b94 <StartTask02+0x120>)
 8001ad0:	7812      	ldrb	r2, [r2, #0]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	4a30      	ldr	r2, [pc, #192]	@ (8001b98 <StartTask02+0x124>)
 8001ad6:	7812      	ldrb	r2, [r2, #0]
 8001ad8:	4413      	add	r3, r2
 8001ada:	4a30      	ldr	r2, [pc, #192]	@ (8001b9c <StartTask02+0x128>)
 8001adc:	7812      	ldrb	r2, [r2, #0]
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d1cc      	bne.n	8001a7c <StartTask02+0x8>
	  	        {
	  	          // Can use RHI and TCI for any purposes if whole number only needed
	  	          tCelsius = (float)TCI + (float)(TCD/10.0);
 8001ae2:	4b2c      	ldr	r3, [pc, #176]	@ (8001b94 <StartTask02+0x120>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff f8fe 	bl	8000ce8 <__aeabi_ui2f>
 8001aec:	4604      	mov	r4, r0
 8001aee:	4b2a      	ldr	r3, [pc, #168]	@ (8001b98 <StartTask02+0x124>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fc90 	bl	8000418 <__aeabi_i2d>
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	4b28      	ldr	r3, [pc, #160]	@ (8001ba0 <StartTask02+0x12c>)
 8001afe:	f7fe fe1f 	bl	8000740 <__aeabi_ddiv>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f7fe ffe7 	bl	8000adc <__aeabi_d2f>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4619      	mov	r1, r3
 8001b12:	4620      	mov	r0, r4
 8001b14:	f7ff f838 	bl	8000b88 <__addsf3>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	4b21      	ldr	r3, [pc, #132]	@ (8001ba4 <StartTask02+0x130>)
 8001b1e:	601a      	str	r2, [r3, #0]
	  	          tFahrenheit = tCelsius * 9/5 + 32;
 8001b20:	4b20      	ldr	r3, [pc, #128]	@ (8001ba4 <StartTask02+0x130>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4920      	ldr	r1, [pc, #128]	@ (8001ba8 <StartTask02+0x134>)
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff f936 	bl	8000d98 <__aeabi_fmul>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	491f      	ldr	r1, [pc, #124]	@ (8001bac <StartTask02+0x138>)
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff f9e5 	bl	8000f00 <__aeabi_fdiv>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff f823 	bl	8000b88 <__addsf3>
 8001b42:	4603      	mov	r3, r0
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb0 <StartTask02+0x13c>)
 8001b48:	601a      	str	r2, [r3, #0]
	  	          RH = (float)RHI + (float)(RHD/10.0);
 8001b4a:	4b10      	ldr	r3, [pc, #64]	@ (8001b8c <StartTask02+0x118>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff f8ca 	bl	8000ce8 <__aeabi_ui2f>
 8001b54:	4604      	mov	r4, r0
 8001b56:	4b0e      	ldr	r3, [pc, #56]	@ (8001b90 <StartTask02+0x11c>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe fc5c 	bl	8000418 <__aeabi_i2d>
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba0 <StartTask02+0x12c>)
 8001b66:	f7fe fdeb 	bl	8000740 <__aeabi_ddiv>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4610      	mov	r0, r2
 8001b70:	4619      	mov	r1, r3
 8001b72:	f7fe ffb3 	bl	8000adc <__aeabi_d2f>
 8001b76:	4603      	mov	r3, r0
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	f7ff f804 	bl	8000b88 <__addsf3>
 8001b80:	4603      	mov	r3, r0
 8001b82:	461a      	mov	r2, r3
 8001b84:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb4 <StartTask02+0x140>)
 8001b86:	601a      	str	r2, [r3, #0]
	  if(DHT11_Start())
 8001b88:	e778      	b.n	8001a7c <StartTask02+0x8>
 8001b8a:	bf00      	nop
 8001b8c:	200002ec 	.word	0x200002ec
 8001b90:	200002ed 	.word	0x200002ed
 8001b94:	200002ee 	.word	0x200002ee
 8001b98:	200002ef 	.word	0x200002ef
 8001b9c:	200002f0 	.word	0x200002f0
 8001ba0:	40240000 	.word	0x40240000
 8001ba4:	200002fc 	.word	0x200002fc
 8001ba8:	41100000 	.word	0x41100000
 8001bac:	40a00000 	.word	0x40a00000
 8001bb0:	20000300 	.word	0x20000300
 8001bb4:	20000304 	.word	0x20000304

08001bb8 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  sprintf(str1, "%.2f", tCelsius);
 8001bc0:	4b18      	ldr	r3, [pc, #96]	@ (8001c24 <StartTask03+0x6c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fc39 	bl	800043c <__aeabi_f2d>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	4916      	ldr	r1, [pc, #88]	@ (8001c28 <StartTask03+0x70>)
 8001bd0:	4816      	ldr	r0, [pc, #88]	@ (8001c2c <StartTask03+0x74>)
 8001bd2:	f006 fbf5 	bl	80083c0 <siprintf>
		  sprintf(str2, "%.2f",tFahrenheit );
 8001bd6:	4b16      	ldr	r3, [pc, #88]	@ (8001c30 <StartTask03+0x78>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fc2e 	bl	800043c <__aeabi_f2d>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4910      	ldr	r1, [pc, #64]	@ (8001c28 <StartTask03+0x70>)
 8001be6:	4813      	ldr	r0, [pc, #76]	@ (8001c34 <StartTask03+0x7c>)
 8001be8:	f006 fbea 	bl	80083c0 <siprintf>
		  CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4811      	ldr	r0, [pc, #68]	@ (8001c38 <StartTask03+0x80>)
 8001bf2:	f7ff fb2b 	bl	800124c <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(&LCD1,"nhiet do: ");
 8001bf6:	4911      	ldr	r1, [pc, #68]	@ (8001c3c <StartTask03+0x84>)
 8001bf8:	480f      	ldr	r0, [pc, #60]	@ (8001c38 <StartTask03+0x80>)
 8001bfa:	f7ff fb7a 	bl	80012f2 <CLCD_I2C_WriteString>
		  CLCD_I2C_WriteString(&LCD1,str1);
 8001bfe:	490b      	ldr	r1, [pc, #44]	@ (8001c2c <StartTask03+0x74>)
 8001c00:	480d      	ldr	r0, [pc, #52]	@ (8001c38 <StartTask03+0x80>)
 8001c02:	f7ff fb76 	bl	80012f2 <CLCD_I2C_WriteString>
		  CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8001c06:	2201      	movs	r2, #1
 8001c08:	2100      	movs	r1, #0
 8001c0a:	480b      	ldr	r0, [pc, #44]	@ (8001c38 <StartTask03+0x80>)
 8001c0c:	f7ff fb1e 	bl	800124c <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(&LCD1,"do am: " );
 8001c10:	490b      	ldr	r1, [pc, #44]	@ (8001c40 <StartTask03+0x88>)
 8001c12:	4809      	ldr	r0, [pc, #36]	@ (8001c38 <StartTask03+0x80>)
 8001c14:	f7ff fb6d 	bl	80012f2 <CLCD_I2C_WriteString>
		  CLCD_I2C_WriteString(&LCD1,str2);
 8001c18:	4906      	ldr	r1, [pc, #24]	@ (8001c34 <StartTask03+0x7c>)
 8001c1a:	4807      	ldr	r0, [pc, #28]	@ (8001c38 <StartTask03+0x80>)
 8001c1c:	f7ff fb69 	bl	80012f2 <CLCD_I2C_WriteString>
	  sprintf(str1, "%.2f", tCelsius);
 8001c20:	bf00      	nop
 8001c22:	e7cd      	b.n	8001bc0 <StartTask03+0x8>
 8001c24:	200002fc 	.word	0x200002fc
 8001c28:	0800bd6c 	.word	0x0800bd6c
 8001c2c:	20000308 	.word	0x20000308
 8001c30:	20000300 	.word	0x20000300
 8001c34:	20000314 	.word	0x20000314
 8001c38:	20000320 	.word	0x20000320
 8001c3c:	0800bd74 	.word	0x0800bd74
 8001c40:	0800bd80 	.word	0x0800bd80

08001c44 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	   // Gửi dữ liệu qua UART
	  osMutexWait(myMutex01Handle, osWaitForever); // Lấy Mutex
 8001c4c:	4b11      	ldr	r3, [pc, #68]	@ (8001c94 <StartTask04+0x50>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f04f 31ff 	mov.w	r1, #4294967295
 8001c54:	4618      	mov	r0, r3
 8001c56:	f003 fa7f 	bl	8005158 <osMutexWait>
		printf("nhietdo: ");
 8001c5a:	480f      	ldr	r0, [pc, #60]	@ (8001c98 <StartTask04+0x54>)
 8001c5c:	f006 fb38 	bl	80082d0 <iprintf>
		printf(str1);
 8001c60:	480e      	ldr	r0, [pc, #56]	@ (8001c9c <StartTask04+0x58>)
 8001c62:	f006 fb35 	bl	80082d0 <iprintf>
		printf("\n");
 8001c66:	200a      	movs	r0, #10
 8001c68:	f006 fb44 	bl	80082f4 <putchar>
		printf("doam: ");
 8001c6c:	480c      	ldr	r0, [pc, #48]	@ (8001ca0 <StartTask04+0x5c>)
 8001c6e:	f006 fb2f 	bl	80082d0 <iprintf>
		printf(str2);
 8001c72:	480c      	ldr	r0, [pc, #48]	@ (8001ca4 <StartTask04+0x60>)
 8001c74:	f006 fb2c 	bl	80082d0 <iprintf>
		printf("\n");
 8001c78:	200a      	movs	r0, #10
 8001c7a:	f006 fb3b 	bl	80082f4 <putchar>
	osMutexRelease(myMutex01Handle);
 8001c7e:	4b05      	ldr	r3, [pc, #20]	@ (8001c94 <StartTask04+0x50>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f003 fab6 	bl	80051f4 <osMutexRelease>
	osDelay(500);
 8001c88:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c8c:	f003 fa38 	bl	8005100 <osDelay>
	  osMutexWait(myMutex01Handle, osWaitForever); // Lấy Mutex
 8001c90:	bf00      	nop
 8001c92:	e7db      	b.n	8001c4c <StartTask04+0x8>
 8001c94:	200002e8 	.word	0x200002e8
 8001c98:	0800bd88 	.word	0x0800bd88
 8001c9c:	20000308 	.word	0x20000308
 8001ca0:	0800bd94 	.word	0x0800bd94
 8001ca4:	20000314 	.word	0x20000314

08001ca8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a04      	ldr	r2, [pc, #16]	@ (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d101      	bne.n	8001cbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cba:	f000 faa5 	bl	8002208 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40000800 	.word	0x40000800

08001ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd0:	b672      	cpsid	i
}
 8001cd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cd4:	bf00      	nop
 8001cd6:	e7fd      	b.n	8001cd4 <Error_Handler+0x8>

08001cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cde:	4b18      	ldr	r3, [pc, #96]	@ (8001d40 <HAL_MspInit+0x68>)
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	4a17      	ldr	r2, [pc, #92]	@ (8001d40 <HAL_MspInit+0x68>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	6193      	str	r3, [r2, #24]
 8001cea:	4b15      	ldr	r3, [pc, #84]	@ (8001d40 <HAL_MspInit+0x68>)
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf6:	4b12      	ldr	r3, [pc, #72]	@ (8001d40 <HAL_MspInit+0x68>)
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	4a11      	ldr	r2, [pc, #68]	@ (8001d40 <HAL_MspInit+0x68>)
 8001cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d00:	61d3      	str	r3, [r2, #28]
 8001d02:	4b0f      	ldr	r3, [pc, #60]	@ (8001d40 <HAL_MspInit+0x68>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	210f      	movs	r1, #15
 8001d12:	f06f 0001 	mvn.w	r0, #1
 8001d16:	f000 fb6c 	bl	80023f2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d44 <HAL_MspInit+0x6c>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	4a04      	ldr	r2, [pc, #16]	@ (8001d44 <HAL_MspInit+0x6c>)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40010000 	.word	0x40010000

08001d48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 0310 	add.w	r3, r7, #16
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a15      	ldr	r2, [pc, #84]	@ (8001db8 <HAL_I2C_MspInit+0x70>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d123      	bne.n	8001db0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d68:	4b14      	ldr	r3, [pc, #80]	@ (8001dbc <HAL_I2C_MspInit+0x74>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	4a13      	ldr	r2, [pc, #76]	@ (8001dbc <HAL_I2C_MspInit+0x74>)
 8001d6e:	f043 0308 	orr.w	r3, r3, #8
 8001d72:	6193      	str	r3, [r2, #24]
 8001d74:	4b11      	ldr	r3, [pc, #68]	@ (8001dbc <HAL_I2C_MspInit+0x74>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d80:	23c0      	movs	r3, #192	@ 0xc0
 8001d82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d84:	2312      	movs	r3, #18
 8001d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8c:	f107 0310 	add.w	r3, r7, #16
 8001d90:	4619      	mov	r1, r3
 8001d92:	480b      	ldr	r0, [pc, #44]	@ (8001dc0 <HAL_I2C_MspInit+0x78>)
 8001d94:	f000 fc0a 	bl	80025ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d98:	4b08      	ldr	r3, [pc, #32]	@ (8001dbc <HAL_I2C_MspInit+0x74>)
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	4a07      	ldr	r2, [pc, #28]	@ (8001dbc <HAL_I2C_MspInit+0x74>)
 8001d9e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001da2:	61d3      	str	r3, [r2, #28]
 8001da4:	4b05      	ldr	r3, [pc, #20]	@ (8001dbc <HAL_I2C_MspInit+0x74>)
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001db0:	bf00      	nop
 8001db2:	3720      	adds	r7, #32
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40005400 	.word	0x40005400
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40010c00 	.word	0x40010c00

08001dc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a09      	ldr	r2, [pc, #36]	@ (8001df8 <HAL_TIM_Base_MspInit+0x34>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d10b      	bne.n	8001dee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dd6:	4b09      	ldr	r3, [pc, #36]	@ (8001dfc <HAL_TIM_Base_MspInit+0x38>)
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	4a08      	ldr	r2, [pc, #32]	@ (8001dfc <HAL_TIM_Base_MspInit+0x38>)
 8001ddc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001de0:	6193      	str	r3, [r2, #24]
 8001de2:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <HAL_TIM_Base_MspInit+0x38>)
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr
 8001df8:	40012c00 	.word	0x40012c00
 8001dfc:	40021000 	.word	0x40021000

08001e00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b088      	sub	sp, #32
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 0310 	add.w	r3, r7, #16
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a20      	ldr	r2, [pc, #128]	@ (8001e9c <HAL_UART_MspInit+0x9c>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d139      	bne.n	8001e94 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e20:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea0 <HAL_UART_MspInit+0xa0>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	4a1e      	ldr	r2, [pc, #120]	@ (8001ea0 <HAL_UART_MspInit+0xa0>)
 8001e26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e2a:	6193      	str	r3, [r2, #24]
 8001e2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea0 <HAL_UART_MspInit+0xa0>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e38:	4b19      	ldr	r3, [pc, #100]	@ (8001ea0 <HAL_UART_MspInit+0xa0>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	4a18      	ldr	r2, [pc, #96]	@ (8001ea0 <HAL_UART_MspInit+0xa0>)
 8001e3e:	f043 0304 	orr.w	r3, r3, #4
 8001e42:	6193      	str	r3, [r2, #24]
 8001e44:	4b16      	ldr	r3, [pc, #88]	@ (8001ea0 <HAL_UART_MspInit+0xa0>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5e:	f107 0310 	add.w	r3, r7, #16
 8001e62:	4619      	mov	r1, r3
 8001e64:	480f      	ldr	r0, [pc, #60]	@ (8001ea4 <HAL_UART_MspInit+0xa4>)
 8001e66:	f000 fba1 	bl	80025ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e78:	f107 0310 	add.w	r3, r7, #16
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4809      	ldr	r0, [pc, #36]	@ (8001ea4 <HAL_UART_MspInit+0xa4>)
 8001e80:	f000 fb94 	bl	80025ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001e84:	2200      	movs	r2, #0
 8001e86:	2105      	movs	r1, #5
 8001e88:	2025      	movs	r0, #37	@ 0x25
 8001e8a:	f000 fab2 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e8e:	2025      	movs	r0, #37	@ 0x25
 8001e90:	f000 facb 	bl	800242a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001e94:	bf00      	nop
 8001e96:	3720      	adds	r7, #32
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40013800 	.word	0x40013800
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40010800 	.word	0x40010800

08001ea8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08e      	sub	sp, #56	@ 0x38
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001ebe:	4b34      	ldr	r3, [pc, #208]	@ (8001f90 <HAL_InitTick+0xe8>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	4a33      	ldr	r2, [pc, #204]	@ (8001f90 <HAL_InitTick+0xe8>)
 8001ec4:	f043 0304 	orr.w	r3, r3, #4
 8001ec8:	61d3      	str	r3, [r2, #28]
 8001eca:	4b31      	ldr	r3, [pc, #196]	@ (8001f90 <HAL_InitTick+0xe8>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ed6:	f107 0210 	add.w	r2, r7, #16
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f001 fda5 	bl	8003a30 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d103      	bne.n	8001ef8 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ef0:	f001 fd76 	bl	80039e0 <HAL_RCC_GetPCLK1Freq>
 8001ef4:	6378      	str	r0, [r7, #52]	@ 0x34
 8001ef6:	e004      	b.n	8001f02 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ef8:	f001 fd72 	bl	80039e0 <HAL_RCC_GetPCLK1Freq>
 8001efc:	4603      	mov	r3, r0
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f04:	4a23      	ldr	r2, [pc, #140]	@ (8001f94 <HAL_InitTick+0xec>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	0c9b      	lsrs	r3, r3, #18
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001f10:	4b21      	ldr	r3, [pc, #132]	@ (8001f98 <HAL_InitTick+0xf0>)
 8001f12:	4a22      	ldr	r2, [pc, #136]	@ (8001f9c <HAL_InitTick+0xf4>)
 8001f14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001f16:	4b20      	ldr	r3, [pc, #128]	@ (8001f98 <HAL_InitTick+0xf0>)
 8001f18:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f1c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8001f98 <HAL_InitTick+0xf0>)
 8001f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f22:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001f24:	4b1c      	ldr	r3, [pc, #112]	@ (8001f98 <HAL_InitTick+0xf0>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001f98 <HAL_InitTick+0xf0>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f30:	4b19      	ldr	r3, [pc, #100]	@ (8001f98 <HAL_InitTick+0xf0>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001f36:	4818      	ldr	r0, [pc, #96]	@ (8001f98 <HAL_InitTick+0xf0>)
 8001f38:	f001 fdc8 	bl	8003acc <HAL_TIM_Base_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001f42:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d11b      	bne.n	8001f82 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001f4a:	4813      	ldr	r0, [pc, #76]	@ (8001f98 <HAL_InitTick+0xf0>)
 8001f4c:	f001 fe58 	bl	8003c00 <HAL_TIM_Base_Start_IT>
 8001f50:	4603      	mov	r3, r0
 8001f52:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001f56:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d111      	bne.n	8001f82 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f5e:	201e      	movs	r0, #30
 8001f60:	f000 fa63 	bl	800242a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b0f      	cmp	r3, #15
 8001f68:	d808      	bhi.n	8001f7c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	201e      	movs	r0, #30
 8001f70:	f000 fa3f 	bl	80023f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f74:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa0 <HAL_InitTick+0xf8>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e002      	b.n	8001f82 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f82:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3738      	adds	r7, #56	@ 0x38
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
 8001f94:	431bde83 	.word	0x431bde83
 8001f98:	20000394 	.word	0x20000394
 8001f9c:	40000800 	.word	0x40000800
 8001fa0:	20000004 	.word	0x20000004

08001fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fa8:	bf00      	nop
 8001faa:	e7fd      	b.n	8001fa8 <NMI_Handler+0x4>

08001fac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <HardFault_Handler+0x4>

08001fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb8:	bf00      	nop
 8001fba:	e7fd      	b.n	8001fb8 <MemManage_Handler+0x4>

08001fbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc0:	bf00      	nop
 8001fc2:	e7fd      	b.n	8001fc0 <BusFault_Handler+0x4>

08001fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc8:	bf00      	nop
 8001fca:	e7fd      	b.n	8001fc8 <UsageFault_Handler+0x4>

08001fcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fdc:	4802      	ldr	r0, [pc, #8]	@ (8001fe8 <TIM4_IRQHandler+0x10>)
 8001fde:	f001 fe61 	bl	8003ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000394 	.word	0x20000394

08001fec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ff0:	4802      	ldr	r0, [pc, #8]	@ (8001ffc <USART1_IRQHandler+0x10>)
 8001ff2:	f002 faa7 	bl	8004544 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000290 	.word	0x20000290

08002000 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return 1;
 8002004:	2301      	movs	r3, #1
}
 8002006:	4618      	mov	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr

0800200e <_kill>:

int _kill(int pid, int sig)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002018:	f006 fb1c 	bl	8008654 <__errno>
 800201c:	4603      	mov	r3, r0
 800201e:	2216      	movs	r2, #22
 8002020:	601a      	str	r2, [r3, #0]
  return -1;
 8002022:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <_exit>:

void _exit (int status)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002036:	f04f 31ff 	mov.w	r1, #4294967295
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff ffe7 	bl	800200e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002040:	bf00      	nop
 8002042:	e7fd      	b.n	8002040 <_exit+0x12>

08002044 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	e00a      	b.n	800206c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002056:	f3af 8000 	nop.w
 800205a:	4601      	mov	r1, r0
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	60ba      	str	r2, [r7, #8]
 8002062:	b2ca      	uxtb	r2, r1
 8002064:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	3301      	adds	r3, #1
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	429a      	cmp	r2, r3
 8002072:	dbf0      	blt.n	8002056 <_read+0x12>
  }

  return len;
 8002074:	687b      	ldr	r3, [r7, #4]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b086      	sub	sp, #24
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	e009      	b.n	80020a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	60ba      	str	r2, [r7, #8]
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff fa4b 	bl	8001534 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	3301      	adds	r3, #1
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	dbf1      	blt.n	8002090 <_write+0x12>
  }
  return len;
 80020ac:	687b      	ldr	r3, [r7, #4]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <_close>:

int _close(int file)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020dc:	605a      	str	r2, [r3, #4]
  return 0;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr

080020ea <_isatty>:

int _isatty(int file)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020f2:	2301      	movs	r3, #1
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr

080020fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020fe:	b480      	push	{r7}
 8002100:	b085      	sub	sp, #20
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr
	...

08002118 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002120:	4a14      	ldr	r2, [pc, #80]	@ (8002174 <_sbrk+0x5c>)
 8002122:	4b15      	ldr	r3, [pc, #84]	@ (8002178 <_sbrk+0x60>)
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800212c:	4b13      	ldr	r3, [pc, #76]	@ (800217c <_sbrk+0x64>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d102      	bne.n	800213a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002134:	4b11      	ldr	r3, [pc, #68]	@ (800217c <_sbrk+0x64>)
 8002136:	4a12      	ldr	r2, [pc, #72]	@ (8002180 <_sbrk+0x68>)
 8002138:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800213a:	4b10      	ldr	r3, [pc, #64]	@ (800217c <_sbrk+0x64>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	429a      	cmp	r2, r3
 8002146:	d207      	bcs.n	8002158 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002148:	f006 fa84 	bl	8008654 <__errno>
 800214c:	4603      	mov	r3, r0
 800214e:	220c      	movs	r2, #12
 8002150:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002152:	f04f 33ff 	mov.w	r3, #4294967295
 8002156:	e009      	b.n	800216c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002158:	4b08      	ldr	r3, [pc, #32]	@ (800217c <_sbrk+0x64>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800215e:	4b07      	ldr	r3, [pc, #28]	@ (800217c <_sbrk+0x64>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4413      	add	r3, r2
 8002166:	4a05      	ldr	r2, [pc, #20]	@ (800217c <_sbrk+0x64>)
 8002168:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800216a:	68fb      	ldr	r3, [r7, #12]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20005000 	.word	0x20005000
 8002178:	00000400 	.word	0x00000400
 800217c:	200003dc 	.word	0x200003dc
 8002180:	20002680 	.word	0x20002680

08002184 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr

08002190 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002190:	f7ff fff8 	bl	8002184 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002194:	480b      	ldr	r0, [pc, #44]	@ (80021c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002196:	490c      	ldr	r1, [pc, #48]	@ (80021c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002198:	4a0c      	ldr	r2, [pc, #48]	@ (80021cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800219a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800219c:	e002      	b.n	80021a4 <LoopCopyDataInit>

0800219e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800219e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021a2:	3304      	adds	r3, #4

080021a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a8:	d3f9      	bcc.n	800219e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021aa:	4a09      	ldr	r2, [pc, #36]	@ (80021d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80021ac:	4c09      	ldr	r4, [pc, #36]	@ (80021d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b0:	e001      	b.n	80021b6 <LoopFillZerobss>

080021b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b4:	3204      	adds	r2, #4

080021b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b8:	d3fb      	bcc.n	80021b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021ba:	f006 fa51 	bl	8008660 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021be:	f7ff fa53 	bl	8001668 <main>
  bx lr
 80021c2:	4770      	bx	lr
  ldr r0, =_sdata
 80021c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80021cc:	0800c208 	.word	0x0800c208
  ldr r2, =_sbss
 80021d0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80021d4:	2000267c 	.word	0x2000267c

080021d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021d8:	e7fe      	b.n	80021d8 <ADC1_2_IRQHandler>
	...

080021dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021e0:	4b08      	ldr	r3, [pc, #32]	@ (8002204 <HAL_Init+0x28>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a07      	ldr	r2, [pc, #28]	@ (8002204 <HAL_Init+0x28>)
 80021e6:	f043 0310 	orr.w	r3, r3, #16
 80021ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ec:	2003      	movs	r0, #3
 80021ee:	f000 f8f5 	bl	80023dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021f2:	200f      	movs	r0, #15
 80021f4:	f7ff fe58 	bl	8001ea8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021f8:	f7ff fd6e 	bl	8001cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40022000 	.word	0x40022000

08002208 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800220c:	4b05      	ldr	r3, [pc, #20]	@ (8002224 <HAL_IncTick+0x1c>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	461a      	mov	r2, r3
 8002212:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <HAL_IncTick+0x20>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4413      	add	r3, r2
 8002218:	4a03      	ldr	r2, [pc, #12]	@ (8002228 <HAL_IncTick+0x20>)
 800221a:	6013      	str	r3, [r2, #0]
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	20000008 	.word	0x20000008
 8002228:	200003e0 	.word	0x200003e0

0800222c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return uwTick;
 8002230:	4b02      	ldr	r3, [pc, #8]	@ (800223c <HAL_GetTick+0x10>)
 8002232:	681b      	ldr	r3, [r3, #0]
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr
 800223c:	200003e0 	.word	0x200003e0

08002240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002248:	f7ff fff0 	bl	800222c <HAL_GetTick>
 800224c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002258:	d005      	beq.n	8002266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800225a:	4b0a      	ldr	r3, [pc, #40]	@ (8002284 <HAL_Delay+0x44>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4413      	add	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002266:	bf00      	nop
 8002268:	f7ff ffe0 	bl	800222c <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	429a      	cmp	r2, r3
 8002276:	d8f7      	bhi.n	8002268 <HAL_Delay+0x28>
  {
  }
}
 8002278:	bf00      	nop
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000008 	.word	0x20000008

08002288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002298:	4b0c      	ldr	r3, [pc, #48]	@ (80022cc <__NVIC_SetPriorityGrouping+0x44>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022a4:	4013      	ands	r3, r2
 80022a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ba:	4a04      	ldr	r2, [pc, #16]	@ (80022cc <__NVIC_SetPriorityGrouping+0x44>)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	60d3      	str	r3, [r2, #12]
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d4:	4b04      	ldr	r3, [pc, #16]	@ (80022e8 <__NVIC_GetPriorityGrouping+0x18>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	0a1b      	lsrs	r3, r3, #8
 80022da:	f003 0307 	and.w	r3, r3, #7
}
 80022de:	4618      	mov	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	db0b      	blt.n	8002316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	f003 021f 	and.w	r2, r3, #31
 8002304:	4906      	ldr	r1, [pc, #24]	@ (8002320 <__NVIC_EnableIRQ+0x34>)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	2001      	movs	r0, #1
 800230e:	fa00 f202 	lsl.w	r2, r0, r2
 8002312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	e000e100 	.word	0xe000e100

08002324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	6039      	str	r1, [r7, #0]
 800232e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002334:	2b00      	cmp	r3, #0
 8002336:	db0a      	blt.n	800234e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	b2da      	uxtb	r2, r3
 800233c:	490c      	ldr	r1, [pc, #48]	@ (8002370 <__NVIC_SetPriority+0x4c>)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	0112      	lsls	r2, r2, #4
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	440b      	add	r3, r1
 8002348:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800234c:	e00a      	b.n	8002364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4908      	ldr	r1, [pc, #32]	@ (8002374 <__NVIC_SetPriority+0x50>)
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	3b04      	subs	r3, #4
 800235c:	0112      	lsls	r2, r2, #4
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	440b      	add	r3, r1
 8002362:	761a      	strb	r2, [r3, #24]
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	e000e100 	.word	0xe000e100
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002378:	b480      	push	{r7}
 800237a:	b089      	sub	sp, #36	@ 0x24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f1c3 0307 	rsb	r3, r3, #7
 8002392:	2b04      	cmp	r3, #4
 8002394:	bf28      	it	cs
 8002396:	2304      	movcs	r3, #4
 8002398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3304      	adds	r3, #4
 800239e:	2b06      	cmp	r3, #6
 80023a0:	d902      	bls.n	80023a8 <NVIC_EncodePriority+0x30>
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3b03      	subs	r3, #3
 80023a6:	e000      	b.n	80023aa <NVIC_EncodePriority+0x32>
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	f04f 32ff 	mov.w	r2, #4294967295
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43da      	mvns	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	401a      	ands	r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c0:	f04f 31ff 	mov.w	r1, #4294967295
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	43d9      	mvns	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	4313      	orrs	r3, r2
         );
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3724      	adds	r7, #36	@ 0x24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr

080023dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7ff ff4f 	bl	8002288 <__NVIC_SetPriorityGrouping>
}
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b086      	sub	sp, #24
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	4603      	mov	r3, r0
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
 80023fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002404:	f7ff ff64 	bl	80022d0 <__NVIC_GetPriorityGrouping>
 8002408:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	6978      	ldr	r0, [r7, #20]
 8002410:	f7ff ffb2 	bl	8002378 <NVIC_EncodePriority>
 8002414:	4602      	mov	r2, r0
 8002416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff81 	bl	8002324 <__NVIC_SetPriority>
}
 8002422:	bf00      	nop
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ff57 	bl	80022ec <__NVIC_EnableIRQ>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002446:	b480      	push	{r7}
 8002448:	b085      	sub	sp, #20
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d008      	beq.n	8002470 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2204      	movs	r2, #4
 8002462:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e020      	b.n	80024b2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 020e 	bic.w	r2, r2, #14
 800247e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0201 	bic.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002498:	2101      	movs	r1, #1
 800249a:	fa01 f202 	lsl.w	r2, r1, r2
 800249e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d005      	beq.n	80024e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2204      	movs	r2, #4
 80024d8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	73fb      	strb	r3, [r7, #15]
 80024de:	e051      	b.n	8002584 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 020e 	bic.w	r2, r2, #14
 80024ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0201 	bic.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a22      	ldr	r2, [pc, #136]	@ (8002590 <HAL_DMA_Abort_IT+0xd4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d029      	beq.n	800255e <HAL_DMA_Abort_IT+0xa2>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a21      	ldr	r2, [pc, #132]	@ (8002594 <HAL_DMA_Abort_IT+0xd8>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d022      	beq.n	800255a <HAL_DMA_Abort_IT+0x9e>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a1f      	ldr	r2, [pc, #124]	@ (8002598 <HAL_DMA_Abort_IT+0xdc>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d01a      	beq.n	8002554 <HAL_DMA_Abort_IT+0x98>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a1e      	ldr	r2, [pc, #120]	@ (800259c <HAL_DMA_Abort_IT+0xe0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d012      	beq.n	800254e <HAL_DMA_Abort_IT+0x92>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a1c      	ldr	r2, [pc, #112]	@ (80025a0 <HAL_DMA_Abort_IT+0xe4>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00a      	beq.n	8002548 <HAL_DMA_Abort_IT+0x8c>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a1b      	ldr	r2, [pc, #108]	@ (80025a4 <HAL_DMA_Abort_IT+0xe8>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d102      	bne.n	8002542 <HAL_DMA_Abort_IT+0x86>
 800253c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002540:	e00e      	b.n	8002560 <HAL_DMA_Abort_IT+0xa4>
 8002542:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002546:	e00b      	b.n	8002560 <HAL_DMA_Abort_IT+0xa4>
 8002548:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800254c:	e008      	b.n	8002560 <HAL_DMA_Abort_IT+0xa4>
 800254e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002552:	e005      	b.n	8002560 <HAL_DMA_Abort_IT+0xa4>
 8002554:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002558:	e002      	b.n	8002560 <HAL_DMA_Abort_IT+0xa4>
 800255a:	2310      	movs	r3, #16
 800255c:	e000      	b.n	8002560 <HAL_DMA_Abort_IT+0xa4>
 800255e:	2301      	movs	r3, #1
 8002560:	4a11      	ldr	r2, [pc, #68]	@ (80025a8 <HAL_DMA_Abort_IT+0xec>)
 8002562:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	4798      	blx	r3
    } 
  }
  return status;
 8002584:	7bfb      	ldrb	r3, [r7, #15]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40020008 	.word	0x40020008
 8002594:	4002001c 	.word	0x4002001c
 8002598:	40020030 	.word	0x40020030
 800259c:	40020044 	.word	0x40020044
 80025a0:	40020058 	.word	0x40020058
 80025a4:	4002006c 	.word	0x4002006c
 80025a8:	40020000 	.word	0x40020000

080025ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b08b      	sub	sp, #44	@ 0x2c
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025b6:	2300      	movs	r3, #0
 80025b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025ba:	2300      	movs	r3, #0
 80025bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025be:	e169      	b.n	8002894 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025c0:	2201      	movs	r2, #1
 80025c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	69fa      	ldr	r2, [r7, #28]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	429a      	cmp	r2, r3
 80025da:	f040 8158 	bne.w	800288e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	4a9a      	ldr	r2, [pc, #616]	@ (800284c <HAL_GPIO_Init+0x2a0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d05e      	beq.n	80026a6 <HAL_GPIO_Init+0xfa>
 80025e8:	4a98      	ldr	r2, [pc, #608]	@ (800284c <HAL_GPIO_Init+0x2a0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d875      	bhi.n	80026da <HAL_GPIO_Init+0x12e>
 80025ee:	4a98      	ldr	r2, [pc, #608]	@ (8002850 <HAL_GPIO_Init+0x2a4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d058      	beq.n	80026a6 <HAL_GPIO_Init+0xfa>
 80025f4:	4a96      	ldr	r2, [pc, #600]	@ (8002850 <HAL_GPIO_Init+0x2a4>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d86f      	bhi.n	80026da <HAL_GPIO_Init+0x12e>
 80025fa:	4a96      	ldr	r2, [pc, #600]	@ (8002854 <HAL_GPIO_Init+0x2a8>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d052      	beq.n	80026a6 <HAL_GPIO_Init+0xfa>
 8002600:	4a94      	ldr	r2, [pc, #592]	@ (8002854 <HAL_GPIO_Init+0x2a8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d869      	bhi.n	80026da <HAL_GPIO_Init+0x12e>
 8002606:	4a94      	ldr	r2, [pc, #592]	@ (8002858 <HAL_GPIO_Init+0x2ac>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d04c      	beq.n	80026a6 <HAL_GPIO_Init+0xfa>
 800260c:	4a92      	ldr	r2, [pc, #584]	@ (8002858 <HAL_GPIO_Init+0x2ac>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d863      	bhi.n	80026da <HAL_GPIO_Init+0x12e>
 8002612:	4a92      	ldr	r2, [pc, #584]	@ (800285c <HAL_GPIO_Init+0x2b0>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d046      	beq.n	80026a6 <HAL_GPIO_Init+0xfa>
 8002618:	4a90      	ldr	r2, [pc, #576]	@ (800285c <HAL_GPIO_Init+0x2b0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d85d      	bhi.n	80026da <HAL_GPIO_Init+0x12e>
 800261e:	2b12      	cmp	r3, #18
 8002620:	d82a      	bhi.n	8002678 <HAL_GPIO_Init+0xcc>
 8002622:	2b12      	cmp	r3, #18
 8002624:	d859      	bhi.n	80026da <HAL_GPIO_Init+0x12e>
 8002626:	a201      	add	r2, pc, #4	@ (adr r2, 800262c <HAL_GPIO_Init+0x80>)
 8002628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262c:	080026a7 	.word	0x080026a7
 8002630:	08002681 	.word	0x08002681
 8002634:	08002693 	.word	0x08002693
 8002638:	080026d5 	.word	0x080026d5
 800263c:	080026db 	.word	0x080026db
 8002640:	080026db 	.word	0x080026db
 8002644:	080026db 	.word	0x080026db
 8002648:	080026db 	.word	0x080026db
 800264c:	080026db 	.word	0x080026db
 8002650:	080026db 	.word	0x080026db
 8002654:	080026db 	.word	0x080026db
 8002658:	080026db 	.word	0x080026db
 800265c:	080026db 	.word	0x080026db
 8002660:	080026db 	.word	0x080026db
 8002664:	080026db 	.word	0x080026db
 8002668:	080026db 	.word	0x080026db
 800266c:	080026db 	.word	0x080026db
 8002670:	08002689 	.word	0x08002689
 8002674:	0800269d 	.word	0x0800269d
 8002678:	4a79      	ldr	r2, [pc, #484]	@ (8002860 <HAL_GPIO_Init+0x2b4>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d013      	beq.n	80026a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800267e:	e02c      	b.n	80026da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	623b      	str	r3, [r7, #32]
          break;
 8002686:	e029      	b.n	80026dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	3304      	adds	r3, #4
 800268e:	623b      	str	r3, [r7, #32]
          break;
 8002690:	e024      	b.n	80026dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	3308      	adds	r3, #8
 8002698:	623b      	str	r3, [r7, #32]
          break;
 800269a:	e01f      	b.n	80026dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	330c      	adds	r3, #12
 80026a2:	623b      	str	r3, [r7, #32]
          break;
 80026a4:	e01a      	b.n	80026dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d102      	bne.n	80026b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026ae:	2304      	movs	r3, #4
 80026b0:	623b      	str	r3, [r7, #32]
          break;
 80026b2:	e013      	b.n	80026dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d105      	bne.n	80026c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026bc:	2308      	movs	r3, #8
 80026be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69fa      	ldr	r2, [r7, #28]
 80026c4:	611a      	str	r2, [r3, #16]
          break;
 80026c6:	e009      	b.n	80026dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026c8:	2308      	movs	r3, #8
 80026ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69fa      	ldr	r2, [r7, #28]
 80026d0:	615a      	str	r2, [r3, #20]
          break;
 80026d2:	e003      	b.n	80026dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026d4:	2300      	movs	r3, #0
 80026d6:	623b      	str	r3, [r7, #32]
          break;
 80026d8:	e000      	b.n	80026dc <HAL_GPIO_Init+0x130>
          break;
 80026da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	2bff      	cmp	r3, #255	@ 0xff
 80026e0:	d801      	bhi.n	80026e6 <HAL_GPIO_Init+0x13a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	e001      	b.n	80026ea <HAL_GPIO_Init+0x13e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3304      	adds	r3, #4
 80026ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	2bff      	cmp	r3, #255	@ 0xff
 80026f0:	d802      	bhi.n	80026f8 <HAL_GPIO_Init+0x14c>
 80026f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	e002      	b.n	80026fe <HAL_GPIO_Init+0x152>
 80026f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fa:	3b08      	subs	r3, #8
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	210f      	movs	r1, #15
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	fa01 f303 	lsl.w	r3, r1, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	401a      	ands	r2, r3
 8002710:	6a39      	ldr	r1, [r7, #32]
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	fa01 f303 	lsl.w	r3, r1, r3
 8002718:	431a      	orrs	r2, r3
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 80b1 	beq.w	800288e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800272c:	4b4d      	ldr	r3, [pc, #308]	@ (8002864 <HAL_GPIO_Init+0x2b8>)
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	4a4c      	ldr	r2, [pc, #304]	@ (8002864 <HAL_GPIO_Init+0x2b8>)
 8002732:	f043 0301 	orr.w	r3, r3, #1
 8002736:	6193      	str	r3, [r2, #24]
 8002738:	4b4a      	ldr	r3, [pc, #296]	@ (8002864 <HAL_GPIO_Init+0x2b8>)
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002744:	4a48      	ldr	r2, [pc, #288]	@ (8002868 <HAL_GPIO_Init+0x2bc>)
 8002746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002748:	089b      	lsrs	r3, r3, #2
 800274a:	3302      	adds	r3, #2
 800274c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002750:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002754:	f003 0303 	and.w	r3, r3, #3
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	220f      	movs	r2, #15
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4013      	ands	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a40      	ldr	r2, [pc, #256]	@ (800286c <HAL_GPIO_Init+0x2c0>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d013      	beq.n	8002798 <HAL_GPIO_Init+0x1ec>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a3f      	ldr	r2, [pc, #252]	@ (8002870 <HAL_GPIO_Init+0x2c4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d00d      	beq.n	8002794 <HAL_GPIO_Init+0x1e8>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a3e      	ldr	r2, [pc, #248]	@ (8002874 <HAL_GPIO_Init+0x2c8>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d007      	beq.n	8002790 <HAL_GPIO_Init+0x1e4>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a3d      	ldr	r2, [pc, #244]	@ (8002878 <HAL_GPIO_Init+0x2cc>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d101      	bne.n	800278c <HAL_GPIO_Init+0x1e0>
 8002788:	2303      	movs	r3, #3
 800278a:	e006      	b.n	800279a <HAL_GPIO_Init+0x1ee>
 800278c:	2304      	movs	r3, #4
 800278e:	e004      	b.n	800279a <HAL_GPIO_Init+0x1ee>
 8002790:	2302      	movs	r3, #2
 8002792:	e002      	b.n	800279a <HAL_GPIO_Init+0x1ee>
 8002794:	2301      	movs	r3, #1
 8002796:	e000      	b.n	800279a <HAL_GPIO_Init+0x1ee>
 8002798:	2300      	movs	r3, #0
 800279a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800279c:	f002 0203 	and.w	r2, r2, #3
 80027a0:	0092      	lsls	r2, r2, #2
 80027a2:	4093      	lsls	r3, r2
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027aa:	492f      	ldr	r1, [pc, #188]	@ (8002868 <HAL_GPIO_Init+0x2bc>)
 80027ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ae:	089b      	lsrs	r3, r3, #2
 80027b0:	3302      	adds	r3, #2
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d006      	beq.n	80027d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027c4:	4b2d      	ldr	r3, [pc, #180]	@ (800287c <HAL_GPIO_Init+0x2d0>)
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	492c      	ldr	r1, [pc, #176]	@ (800287c <HAL_GPIO_Init+0x2d0>)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	608b      	str	r3, [r1, #8]
 80027d0:	e006      	b.n	80027e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027d2:	4b2a      	ldr	r3, [pc, #168]	@ (800287c <HAL_GPIO_Init+0x2d0>)
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	43db      	mvns	r3, r3
 80027da:	4928      	ldr	r1, [pc, #160]	@ (800287c <HAL_GPIO_Init+0x2d0>)
 80027dc:	4013      	ands	r3, r2
 80027de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d006      	beq.n	80027fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027ec:	4b23      	ldr	r3, [pc, #140]	@ (800287c <HAL_GPIO_Init+0x2d0>)
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	4922      	ldr	r1, [pc, #136]	@ (800287c <HAL_GPIO_Init+0x2d0>)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	60cb      	str	r3, [r1, #12]
 80027f8:	e006      	b.n	8002808 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027fa:	4b20      	ldr	r3, [pc, #128]	@ (800287c <HAL_GPIO_Init+0x2d0>)
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	43db      	mvns	r3, r3
 8002802:	491e      	ldr	r1, [pc, #120]	@ (800287c <HAL_GPIO_Init+0x2d0>)
 8002804:	4013      	ands	r3, r2
 8002806:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d006      	beq.n	8002822 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002814:	4b19      	ldr	r3, [pc, #100]	@ (800287c <HAL_GPIO_Init+0x2d0>)
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	4918      	ldr	r1, [pc, #96]	@ (800287c <HAL_GPIO_Init+0x2d0>)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	4313      	orrs	r3, r2
 800281e:	604b      	str	r3, [r1, #4]
 8002820:	e006      	b.n	8002830 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002822:	4b16      	ldr	r3, [pc, #88]	@ (800287c <HAL_GPIO_Init+0x2d0>)
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	43db      	mvns	r3, r3
 800282a:	4914      	ldr	r1, [pc, #80]	@ (800287c <HAL_GPIO_Init+0x2d0>)
 800282c:	4013      	ands	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d021      	beq.n	8002880 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800283c:	4b0f      	ldr	r3, [pc, #60]	@ (800287c <HAL_GPIO_Init+0x2d0>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	490e      	ldr	r1, [pc, #56]	@ (800287c <HAL_GPIO_Init+0x2d0>)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	4313      	orrs	r3, r2
 8002846:	600b      	str	r3, [r1, #0]
 8002848:	e021      	b.n	800288e <HAL_GPIO_Init+0x2e2>
 800284a:	bf00      	nop
 800284c:	10320000 	.word	0x10320000
 8002850:	10310000 	.word	0x10310000
 8002854:	10220000 	.word	0x10220000
 8002858:	10210000 	.word	0x10210000
 800285c:	10120000 	.word	0x10120000
 8002860:	10110000 	.word	0x10110000
 8002864:	40021000 	.word	0x40021000
 8002868:	40010000 	.word	0x40010000
 800286c:	40010800 	.word	0x40010800
 8002870:	40010c00 	.word	0x40010c00
 8002874:	40011000 	.word	0x40011000
 8002878:	40011400 	.word	0x40011400
 800287c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002880:	4b0b      	ldr	r3, [pc, #44]	@ (80028b0 <HAL_GPIO_Init+0x304>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	43db      	mvns	r3, r3
 8002888:	4909      	ldr	r1, [pc, #36]	@ (80028b0 <HAL_GPIO_Init+0x304>)
 800288a:	4013      	ands	r3, r2
 800288c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800288e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002890:	3301      	adds	r3, #1
 8002892:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289a:	fa22 f303 	lsr.w	r3, r2, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f47f ae8e 	bne.w	80025c0 <HAL_GPIO_Init+0x14>
  }
}
 80028a4:	bf00      	nop
 80028a6:	bf00      	nop
 80028a8:	372c      	adds	r7, #44	@ 0x2c
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr
 80028b0:	40010400 	.word	0x40010400

080028b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	887b      	ldrh	r3, [r7, #2]
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d002      	beq.n	80028d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
 80028d0:	e001      	b.n	80028d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028d2:	2300      	movs	r3, #0
 80028d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr

080028e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	460b      	mov	r3, r1
 80028ec:	807b      	strh	r3, [r7, #2]
 80028ee:	4613      	mov	r3, r2
 80028f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028f2:	787b      	ldrb	r3, [r7, #1]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028f8:	887a      	ldrh	r2, [r7, #2]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028fe:	e003      	b.n	8002908 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002900:	887b      	ldrh	r3, [r7, #2]
 8002902:	041a      	lsls	r2, r3, #16
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	611a      	str	r2, [r3, #16]
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr
	...

08002914 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e12b      	b.n	8002b7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff fa04 	bl	8001d48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2224      	movs	r2, #36	@ 0x24
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0201 	bic.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002966:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002976:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002978:	f001 f832 	bl	80039e0 <HAL_RCC_GetPCLK1Freq>
 800297c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	4a81      	ldr	r2, [pc, #516]	@ (8002b88 <HAL_I2C_Init+0x274>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d807      	bhi.n	8002998 <HAL_I2C_Init+0x84>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4a80      	ldr	r2, [pc, #512]	@ (8002b8c <HAL_I2C_Init+0x278>)
 800298c:	4293      	cmp	r3, r2
 800298e:	bf94      	ite	ls
 8002990:	2301      	movls	r3, #1
 8002992:	2300      	movhi	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	e006      	b.n	80029a6 <HAL_I2C_Init+0x92>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4a7d      	ldr	r2, [pc, #500]	@ (8002b90 <HAL_I2C_Init+0x27c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	bf94      	ite	ls
 80029a0:	2301      	movls	r3, #1
 80029a2:	2300      	movhi	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e0e7      	b.n	8002b7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4a78      	ldr	r2, [pc, #480]	@ (8002b94 <HAL_I2C_Init+0x280>)
 80029b2:	fba2 2303 	umull	r2, r3, r2, r3
 80029b6:	0c9b      	lsrs	r3, r3, #18
 80029b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	4a6a      	ldr	r2, [pc, #424]	@ (8002b88 <HAL_I2C_Init+0x274>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d802      	bhi.n	80029e8 <HAL_I2C_Init+0xd4>
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	3301      	adds	r3, #1
 80029e6:	e009      	b.n	80029fc <HAL_I2C_Init+0xe8>
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80029ee:	fb02 f303 	mul.w	r3, r2, r3
 80029f2:	4a69      	ldr	r2, [pc, #420]	@ (8002b98 <HAL_I2C_Init+0x284>)
 80029f4:	fba2 2303 	umull	r2, r3, r2, r3
 80029f8:	099b      	lsrs	r3, r3, #6
 80029fa:	3301      	adds	r3, #1
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	430b      	orrs	r3, r1
 8002a02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a0e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	495c      	ldr	r1, [pc, #368]	@ (8002b88 <HAL_I2C_Init+0x274>)
 8002a18:	428b      	cmp	r3, r1
 8002a1a:	d819      	bhi.n	8002a50 <HAL_I2C_Init+0x13c>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	1e59      	subs	r1, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a2a:	1c59      	adds	r1, r3, #1
 8002a2c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a30:	400b      	ands	r3, r1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <HAL_I2C_Init+0x138>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1e59      	subs	r1, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a44:	3301      	adds	r3, #1
 8002a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a4a:	e051      	b.n	8002af0 <HAL_I2C_Init+0x1dc>
 8002a4c:	2304      	movs	r3, #4
 8002a4e:	e04f      	b.n	8002af0 <HAL_I2C_Init+0x1dc>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d111      	bne.n	8002a7c <HAL_I2C_Init+0x168>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	1e58      	subs	r0, r3, #1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6859      	ldr	r1, [r3, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	440b      	add	r3, r1
 8002a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	bf0c      	ite	eq
 8002a74:	2301      	moveq	r3, #1
 8002a76:	2300      	movne	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	e012      	b.n	8002aa2 <HAL_I2C_Init+0x18e>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	1e58      	subs	r0, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6859      	ldr	r1, [r3, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	0099      	lsls	r1, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a92:	3301      	adds	r3, #1
 8002a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	bf0c      	ite	eq
 8002a9c:	2301      	moveq	r3, #1
 8002a9e:	2300      	movne	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_I2C_Init+0x196>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e022      	b.n	8002af0 <HAL_I2C_Init+0x1dc>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10e      	bne.n	8002ad0 <HAL_I2C_Init+0x1bc>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	1e58      	subs	r0, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6859      	ldr	r1, [r3, #4]
 8002aba:	460b      	mov	r3, r1
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	440b      	add	r3, r1
 8002ac0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ace:	e00f      	b.n	8002af0 <HAL_I2C_Init+0x1dc>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1e58      	subs	r0, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6859      	ldr	r1, [r3, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	0099      	lsls	r1, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	6809      	ldr	r1, [r1, #0]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69da      	ldr	r2, [r3, #28]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b1e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6911      	ldr	r1, [r2, #16]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	68d2      	ldr	r2, [r2, #12]
 8002b2a:	4311      	orrs	r1, r2
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6812      	ldr	r2, [r2, #0]
 8002b30:	430b      	orrs	r3, r1
 8002b32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695a      	ldr	r2, [r3, #20]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	000186a0 	.word	0x000186a0
 8002b8c:	001e847f 	.word	0x001e847f
 8002b90:	003d08ff 	.word	0x003d08ff
 8002b94:	431bde83 	.word	0x431bde83
 8002b98:	10624dd3 	.word	0x10624dd3

08002b9c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af02      	add	r7, sp, #8
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	460b      	mov	r3, r1
 8002baa:	817b      	strh	r3, [r7, #10]
 8002bac:	4613      	mov	r3, r2
 8002bae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bb0:	f7ff fb3c 	bl	800222c <HAL_GetTick>
 8002bb4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b20      	cmp	r3, #32
 8002bc0:	f040 80e0 	bne.w	8002d84 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	2319      	movs	r3, #25
 8002bca:	2201      	movs	r2, #1
 8002bcc:	4970      	ldr	r1, [pc, #448]	@ (8002d90 <HAL_I2C_Master_Transmit+0x1f4>)
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 f964 	bl	8002e9c <I2C_WaitOnFlagUntilTimeout>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	e0d3      	b.n	8002d86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_I2C_Master_Transmit+0x50>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e0cc      	b.n	8002d86 <HAL_I2C_Master_Transmit+0x1ea>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d007      	beq.n	8002c12 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 0201 	orr.w	r2, r2, #1
 8002c10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2221      	movs	r2, #33	@ 0x21
 8002c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2210      	movs	r2, #16
 8002c2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	893a      	ldrh	r2, [r7, #8]
 8002c42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4a50      	ldr	r2, [pc, #320]	@ (8002d94 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c52:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c54:	8979      	ldrh	r1, [r7, #10]
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	6a3a      	ldr	r2, [r7, #32]
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f89c 	bl	8002d98 <I2C_MasterRequestWrite>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e08d      	b.n	8002d86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	613b      	str	r3, [r7, #16]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c80:	e066      	b.n	8002d50 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	6a39      	ldr	r1, [r7, #32]
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 fa22 	bl	80030d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00d      	beq.n	8002cae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d107      	bne.n	8002caa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ca8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e06b      	b.n	8002d86 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb2:	781a      	ldrb	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d11b      	bne.n	8002d24 <HAL_I2C_Master_Transmit+0x188>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d017      	beq.n	8002d24 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf8:	781a      	ldrb	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	6a39      	ldr	r1, [r7, #32]
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 fa19 	bl	8003160 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00d      	beq.n	8002d50 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d107      	bne.n	8002d4c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d4a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e01a      	b.n	8002d86 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d194      	bne.n	8002c82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d80:	2300      	movs	r3, #0
 8002d82:	e000      	b.n	8002d86 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d84:	2302      	movs	r3, #2
  }
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	00100002 	.word	0x00100002
 8002d94:	ffff0000 	.word	0xffff0000

08002d98 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b088      	sub	sp, #32
 8002d9c:	af02      	add	r7, sp, #8
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	607a      	str	r2, [r7, #4]
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	460b      	mov	r3, r1
 8002da6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d006      	beq.n	8002dc2 <I2C_MasterRequestWrite+0x2a>
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d003      	beq.n	8002dc2 <I2C_MasterRequestWrite+0x2a>
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002dc0:	d108      	bne.n	8002dd4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	e00b      	b.n	8002dec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd8:	2b12      	cmp	r3, #18
 8002dda:	d107      	bne.n	8002dec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 f84f 	bl	8002e9c <I2C_WaitOnFlagUntilTimeout>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00d      	beq.n	8002e20 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e12:	d103      	bne.n	8002e1c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e1a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e035      	b.n	8002e8c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e28:	d108      	bne.n	8002e3c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e2a:	897b      	ldrh	r3, [r7, #10]
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e38:	611a      	str	r2, [r3, #16]
 8002e3a:	e01b      	b.n	8002e74 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e3c:	897b      	ldrh	r3, [r7, #10]
 8002e3e:	11db      	asrs	r3, r3, #7
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	f003 0306 	and.w	r3, r3, #6
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	f063 030f 	orn	r3, r3, #15
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	490e      	ldr	r1, [pc, #56]	@ (8002e94 <I2C_MasterRequestWrite+0xfc>)
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 f898 	bl	8002f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e010      	b.n	8002e8c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e6a:	897b      	ldrh	r3, [r7, #10]
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	4907      	ldr	r1, [pc, #28]	@ (8002e98 <I2C_MasterRequestWrite+0x100>)
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f888 	bl	8002f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	00010008 	.word	0x00010008
 8002e98:	00010002 	.word	0x00010002

08002e9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eac:	e048      	b.n	8002f40 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb4:	d044      	beq.n	8002f40 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb6:	f7ff f9b9 	bl	800222c <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d302      	bcc.n	8002ecc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d139      	bne.n	8002f40 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	0c1b      	lsrs	r3, r3, #16
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d10d      	bne.n	8002ef2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	43da      	mvns	r2, r3
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	461a      	mov	r2, r3
 8002ef0:	e00c      	b.n	8002f0c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	43da      	mvns	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	4013      	ands	r3, r2
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	bf0c      	ite	eq
 8002f04:	2301      	moveq	r3, #1
 8002f06:	2300      	movne	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d116      	bne.n	8002f40 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2c:	f043 0220 	orr.w	r2, r3, #32
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e023      	b.n	8002f88 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	0c1b      	lsrs	r3, r3, #16
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d10d      	bne.n	8002f66 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	43da      	mvns	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	4013      	ands	r3, r2
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	461a      	mov	r2, r3
 8002f64:	e00c      	b.n	8002f80 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	43da      	mvns	r2, r3
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	4013      	ands	r3, r2
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	bf0c      	ite	eq
 8002f78:	2301      	moveq	r3, #1
 8002f7a:	2300      	movne	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	461a      	mov	r2, r3
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d093      	beq.n	8002eae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
 8002f9c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f9e:	e071      	b.n	8003084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fae:	d123      	bne.n	8002ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fbe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe4:	f043 0204 	orr.w	r2, r3, #4
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e067      	b.n	80030c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffe:	d041      	beq.n	8003084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003000:	f7ff f914 	bl	800222c <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	429a      	cmp	r2, r3
 800300e:	d302      	bcc.n	8003016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d136      	bne.n	8003084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	0c1b      	lsrs	r3, r3, #16
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b01      	cmp	r3, #1
 800301e:	d10c      	bne.n	800303a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	43da      	mvns	r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4013      	ands	r3, r2
 800302c:	b29b      	uxth	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	bf14      	ite	ne
 8003032:	2301      	movne	r3, #1
 8003034:	2300      	moveq	r3, #0
 8003036:	b2db      	uxtb	r3, r3
 8003038:	e00b      	b.n	8003052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	43da      	mvns	r2, r3
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	4013      	ands	r3, r2
 8003046:	b29b      	uxth	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	bf14      	ite	ne
 800304c:	2301      	movne	r3, #1
 800304e:	2300      	moveq	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d016      	beq.n	8003084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003070:	f043 0220 	orr.w	r2, r3, #32
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e021      	b.n	80030c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	0c1b      	lsrs	r3, r3, #16
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b01      	cmp	r3, #1
 800308c:	d10c      	bne.n	80030a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	43da      	mvns	r2, r3
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	4013      	ands	r3, r2
 800309a:	b29b      	uxth	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	bf14      	ite	ne
 80030a0:	2301      	movne	r3, #1
 80030a2:	2300      	moveq	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	e00b      	b.n	80030c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	43da      	mvns	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	4013      	ands	r3, r2
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	bf14      	ite	ne
 80030ba:	2301      	movne	r3, #1
 80030bc:	2300      	moveq	r3, #0
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f47f af6d 	bne.w	8002fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030dc:	e034      	b.n	8003148 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 f886 	bl	80031f0 <I2C_IsAcknowledgeFailed>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e034      	b.n	8003158 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f4:	d028      	beq.n	8003148 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f6:	f7ff f899 	bl	800222c <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	429a      	cmp	r2, r3
 8003104:	d302      	bcc.n	800310c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d11d      	bne.n	8003148 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003116:	2b80      	cmp	r3, #128	@ 0x80
 8003118:	d016      	beq.n	8003148 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003134:	f043 0220 	orr.w	r2, r3, #32
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e007      	b.n	8003158 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003152:	2b80      	cmp	r3, #128	@ 0x80
 8003154:	d1c3      	bne.n	80030de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800316c:	e034      	b.n	80031d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 f83e 	bl	80031f0 <I2C_IsAcknowledgeFailed>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e034      	b.n	80031e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003184:	d028      	beq.n	80031d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003186:	f7ff f851 	bl	800222c <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	429a      	cmp	r2, r3
 8003194:	d302      	bcc.n	800319c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d11d      	bne.n	80031d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d016      	beq.n	80031d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c4:	f043 0220 	orr.w	r2, r3, #32
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e007      	b.n	80031e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d1c3      	bne.n	800316e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003206:	d11b      	bne.n	8003240 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003210:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322c:	f043 0204 	orr.w	r2, r3, #4
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr

0800324c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e272      	b.n	8003744 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 8087 	beq.w	800337a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800326c:	4b92      	ldr	r3, [pc, #584]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f003 030c 	and.w	r3, r3, #12
 8003274:	2b04      	cmp	r3, #4
 8003276:	d00c      	beq.n	8003292 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003278:	4b8f      	ldr	r3, [pc, #572]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 030c 	and.w	r3, r3, #12
 8003280:	2b08      	cmp	r3, #8
 8003282:	d112      	bne.n	80032aa <HAL_RCC_OscConfig+0x5e>
 8003284:	4b8c      	ldr	r3, [pc, #560]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800328c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003290:	d10b      	bne.n	80032aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003292:	4b89      	ldr	r3, [pc, #548]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d06c      	beq.n	8003378 <HAL_RCC_OscConfig+0x12c>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d168      	bne.n	8003378 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e24c      	b.n	8003744 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032b2:	d106      	bne.n	80032c2 <HAL_RCC_OscConfig+0x76>
 80032b4:	4b80      	ldr	r3, [pc, #512]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a7f      	ldr	r2, [pc, #508]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 80032ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032be:	6013      	str	r3, [r2, #0]
 80032c0:	e02e      	b.n	8003320 <HAL_RCC_OscConfig+0xd4>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10c      	bne.n	80032e4 <HAL_RCC_OscConfig+0x98>
 80032ca:	4b7b      	ldr	r3, [pc, #492]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a7a      	ldr	r2, [pc, #488]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 80032d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	4b78      	ldr	r3, [pc, #480]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a77      	ldr	r2, [pc, #476]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	e01d      	b.n	8003320 <HAL_RCC_OscConfig+0xd4>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032ec:	d10c      	bne.n	8003308 <HAL_RCC_OscConfig+0xbc>
 80032ee:	4b72      	ldr	r3, [pc, #456]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a71      	ldr	r2, [pc, #452]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 80032f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	4b6f      	ldr	r3, [pc, #444]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a6e      	ldr	r2, [pc, #440]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 8003300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	e00b      	b.n	8003320 <HAL_RCC_OscConfig+0xd4>
 8003308:	4b6b      	ldr	r3, [pc, #428]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a6a      	ldr	r2, [pc, #424]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 800330e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003312:	6013      	str	r3, [r2, #0]
 8003314:	4b68      	ldr	r3, [pc, #416]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a67      	ldr	r2, [pc, #412]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 800331a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800331e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d013      	beq.n	8003350 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003328:	f7fe ff80 	bl	800222c <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003330:	f7fe ff7c 	bl	800222c <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b64      	cmp	r3, #100	@ 0x64
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e200      	b.n	8003744 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003342:	4b5d      	ldr	r3, [pc, #372]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f0      	beq.n	8003330 <HAL_RCC_OscConfig+0xe4>
 800334e:	e014      	b.n	800337a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003350:	f7fe ff6c 	bl	800222c <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003358:	f7fe ff68 	bl	800222c <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b64      	cmp	r3, #100	@ 0x64
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e1ec      	b.n	8003744 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800336a:	4b53      	ldr	r3, [pc, #332]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1f0      	bne.n	8003358 <HAL_RCC_OscConfig+0x10c>
 8003376:	e000      	b.n	800337a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d063      	beq.n	800344e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003386:	4b4c      	ldr	r3, [pc, #304]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f003 030c 	and.w	r3, r3, #12
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00b      	beq.n	80033aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003392:	4b49      	ldr	r3, [pc, #292]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 030c 	and.w	r3, r3, #12
 800339a:	2b08      	cmp	r3, #8
 800339c:	d11c      	bne.n	80033d8 <HAL_RCC_OscConfig+0x18c>
 800339e:	4b46      	ldr	r3, [pc, #280]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d116      	bne.n	80033d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033aa:	4b43      	ldr	r3, [pc, #268]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d005      	beq.n	80033c2 <HAL_RCC_OscConfig+0x176>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d001      	beq.n	80033c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e1c0      	b.n	8003744 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c2:	4b3d      	ldr	r3, [pc, #244]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	4939      	ldr	r1, [pc, #228]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033d6:	e03a      	b.n	800344e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d020      	beq.n	8003422 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033e0:	4b36      	ldr	r3, [pc, #216]	@ (80034bc <HAL_RCC_OscConfig+0x270>)
 80033e2:	2201      	movs	r2, #1
 80033e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e6:	f7fe ff21 	bl	800222c <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ee:	f7fe ff1d 	bl	800222c <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e1a1      	b.n	8003744 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003400:	4b2d      	ldr	r3, [pc, #180]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0f0      	beq.n	80033ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800340c:	4b2a      	ldr	r3, [pc, #168]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	4927      	ldr	r1, [pc, #156]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 800341c:	4313      	orrs	r3, r2
 800341e:	600b      	str	r3, [r1, #0]
 8003420:	e015      	b.n	800344e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003422:	4b26      	ldr	r3, [pc, #152]	@ (80034bc <HAL_RCC_OscConfig+0x270>)
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003428:	f7fe ff00 	bl	800222c <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003430:	f7fe fefc 	bl	800222c <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e180      	b.n	8003744 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003442:	4b1d      	ldr	r3, [pc, #116]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f0      	bne.n	8003430 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	2b00      	cmp	r3, #0
 8003458:	d03a      	beq.n	80034d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d019      	beq.n	8003496 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003462:	4b17      	ldr	r3, [pc, #92]	@ (80034c0 <HAL_RCC_OscConfig+0x274>)
 8003464:	2201      	movs	r2, #1
 8003466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003468:	f7fe fee0 	bl	800222c <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003470:	f7fe fedc 	bl	800222c <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e160      	b.n	8003744 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003482:	4b0d      	ldr	r3, [pc, #52]	@ (80034b8 <HAL_RCC_OscConfig+0x26c>)
 8003484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0f0      	beq.n	8003470 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800348e:	2001      	movs	r0, #1
 8003490:	f000 fafe 	bl	8003a90 <RCC_Delay>
 8003494:	e01c      	b.n	80034d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003496:	4b0a      	ldr	r3, [pc, #40]	@ (80034c0 <HAL_RCC_OscConfig+0x274>)
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800349c:	f7fe fec6 	bl	800222c <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a2:	e00f      	b.n	80034c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a4:	f7fe fec2 	bl	800222c <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d908      	bls.n	80034c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e146      	b.n	8003744 <HAL_RCC_OscConfig+0x4f8>
 80034b6:	bf00      	nop
 80034b8:	40021000 	.word	0x40021000
 80034bc:	42420000 	.word	0x42420000
 80034c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c4:	4b92      	ldr	r3, [pc, #584]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 80034c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1e9      	bne.n	80034a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 80a6 	beq.w	800362a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034de:	2300      	movs	r3, #0
 80034e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034e2:	4b8b      	ldr	r3, [pc, #556]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10d      	bne.n	800350a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ee:	4b88      	ldr	r3, [pc, #544]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	4a87      	ldr	r2, [pc, #540]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 80034f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034f8:	61d3      	str	r3, [r2, #28]
 80034fa:	4b85      	ldr	r3, [pc, #532]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003502:	60bb      	str	r3, [r7, #8]
 8003504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003506:	2301      	movs	r3, #1
 8003508:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350a:	4b82      	ldr	r3, [pc, #520]	@ (8003714 <HAL_RCC_OscConfig+0x4c8>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003512:	2b00      	cmp	r3, #0
 8003514:	d118      	bne.n	8003548 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003516:	4b7f      	ldr	r3, [pc, #508]	@ (8003714 <HAL_RCC_OscConfig+0x4c8>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a7e      	ldr	r2, [pc, #504]	@ (8003714 <HAL_RCC_OscConfig+0x4c8>)
 800351c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003522:	f7fe fe83 	bl	800222c <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800352a:	f7fe fe7f 	bl	800222c <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b64      	cmp	r3, #100	@ 0x64
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e103      	b.n	8003744 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353c:	4b75      	ldr	r3, [pc, #468]	@ (8003714 <HAL_RCC_OscConfig+0x4c8>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0f0      	beq.n	800352a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d106      	bne.n	800355e <HAL_RCC_OscConfig+0x312>
 8003550:	4b6f      	ldr	r3, [pc, #444]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	4a6e      	ldr	r2, [pc, #440]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 8003556:	f043 0301 	orr.w	r3, r3, #1
 800355a:	6213      	str	r3, [r2, #32]
 800355c:	e02d      	b.n	80035ba <HAL_RCC_OscConfig+0x36e>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10c      	bne.n	8003580 <HAL_RCC_OscConfig+0x334>
 8003566:	4b6a      	ldr	r3, [pc, #424]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	4a69      	ldr	r2, [pc, #420]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 800356c:	f023 0301 	bic.w	r3, r3, #1
 8003570:	6213      	str	r3, [r2, #32]
 8003572:	4b67      	ldr	r3, [pc, #412]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	4a66      	ldr	r2, [pc, #408]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 8003578:	f023 0304 	bic.w	r3, r3, #4
 800357c:	6213      	str	r3, [r2, #32]
 800357e:	e01c      	b.n	80035ba <HAL_RCC_OscConfig+0x36e>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	2b05      	cmp	r3, #5
 8003586:	d10c      	bne.n	80035a2 <HAL_RCC_OscConfig+0x356>
 8003588:	4b61      	ldr	r3, [pc, #388]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	4a60      	ldr	r2, [pc, #384]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 800358e:	f043 0304 	orr.w	r3, r3, #4
 8003592:	6213      	str	r3, [r2, #32]
 8003594:	4b5e      	ldr	r3, [pc, #376]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	4a5d      	ldr	r2, [pc, #372]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 800359a:	f043 0301 	orr.w	r3, r3, #1
 800359e:	6213      	str	r3, [r2, #32]
 80035a0:	e00b      	b.n	80035ba <HAL_RCC_OscConfig+0x36e>
 80035a2:	4b5b      	ldr	r3, [pc, #364]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	4a5a      	ldr	r2, [pc, #360]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 80035a8:	f023 0301 	bic.w	r3, r3, #1
 80035ac:	6213      	str	r3, [r2, #32]
 80035ae:	4b58      	ldr	r3, [pc, #352]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	4a57      	ldr	r2, [pc, #348]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 80035b4:	f023 0304 	bic.w	r3, r3, #4
 80035b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d015      	beq.n	80035ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c2:	f7fe fe33 	bl	800222c <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c8:	e00a      	b.n	80035e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ca:	f7fe fe2f 	bl	800222c <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035d8:	4293      	cmp	r3, r2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e0b1      	b.n	8003744 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e0:	4b4b      	ldr	r3, [pc, #300]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0ee      	beq.n	80035ca <HAL_RCC_OscConfig+0x37e>
 80035ec:	e014      	b.n	8003618 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ee:	f7fe fe1d 	bl	800222c <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035f4:	e00a      	b.n	800360c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035f6:	f7fe fe19 	bl	800222c <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003604:	4293      	cmp	r3, r2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e09b      	b.n	8003744 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800360c:	4b40      	ldr	r3, [pc, #256]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1ee      	bne.n	80035f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003618:	7dfb      	ldrb	r3, [r7, #23]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d105      	bne.n	800362a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800361e:	4b3c      	ldr	r3, [pc, #240]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	4a3b      	ldr	r2, [pc, #236]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 8003624:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003628:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 8087 	beq.w	8003742 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003634:	4b36      	ldr	r3, [pc, #216]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f003 030c 	and.w	r3, r3, #12
 800363c:	2b08      	cmp	r3, #8
 800363e:	d061      	beq.n	8003704 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	2b02      	cmp	r3, #2
 8003646:	d146      	bne.n	80036d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003648:	4b33      	ldr	r3, [pc, #204]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364e:	f7fe fded 	bl	800222c <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003656:	f7fe fde9 	bl	800222c <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e06d      	b.n	8003744 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003668:	4b29      	ldr	r3, [pc, #164]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1f0      	bne.n	8003656 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800367c:	d108      	bne.n	8003690 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800367e:	4b24      	ldr	r3, [pc, #144]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	4921      	ldr	r1, [pc, #132]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 800368c:	4313      	orrs	r3, r2
 800368e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003690:	4b1f      	ldr	r3, [pc, #124]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a19      	ldr	r1, [r3, #32]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a0:	430b      	orrs	r3, r1
 80036a2:	491b      	ldr	r1, [pc, #108]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 80036aa:	2201      	movs	r2, #1
 80036ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ae:	f7fe fdbd 	bl	800222c <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b6:	f7fe fdb9 	bl	800222c <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e03d      	b.n	8003744 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036c8:	4b11      	ldr	r3, [pc, #68]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0f0      	beq.n	80036b6 <HAL_RCC_OscConfig+0x46a>
 80036d4:	e035      	b.n	8003742 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d6:	4b10      	ldr	r3, [pc, #64]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036dc:	f7fe fda6 	bl	800222c <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e4:	f7fe fda2 	bl	800222c <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e026      	b.n	8003744 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036f6:	4b06      	ldr	r3, [pc, #24]	@ (8003710 <HAL_RCC_OscConfig+0x4c4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f0      	bne.n	80036e4 <HAL_RCC_OscConfig+0x498>
 8003702:	e01e      	b.n	8003742 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d107      	bne.n	800371c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e019      	b.n	8003744 <HAL_RCC_OscConfig+0x4f8>
 8003710:	40021000 	.word	0x40021000
 8003714:	40007000 	.word	0x40007000
 8003718:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800371c:	4b0b      	ldr	r3, [pc, #44]	@ (800374c <HAL_RCC_OscConfig+0x500>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	429a      	cmp	r2, r3
 800372e:	d106      	bne.n	800373e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800373a:	429a      	cmp	r2, r3
 800373c:	d001      	beq.n	8003742 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40021000 	.word	0x40021000

08003750 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e0d0      	b.n	8003906 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003764:	4b6a      	ldr	r3, [pc, #424]	@ (8003910 <HAL_RCC_ClockConfig+0x1c0>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0307 	and.w	r3, r3, #7
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d910      	bls.n	8003794 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003772:	4b67      	ldr	r3, [pc, #412]	@ (8003910 <HAL_RCC_ClockConfig+0x1c0>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f023 0207 	bic.w	r2, r3, #7
 800377a:	4965      	ldr	r1, [pc, #404]	@ (8003910 <HAL_RCC_ClockConfig+0x1c0>)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	4313      	orrs	r3, r2
 8003780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003782:	4b63      	ldr	r3, [pc, #396]	@ (8003910 <HAL_RCC_ClockConfig+0x1c0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d001      	beq.n	8003794 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e0b8      	b.n	8003906 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d020      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037ac:	4b59      	ldr	r3, [pc, #356]	@ (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	4a58      	ldr	r2, [pc, #352]	@ (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 80037b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80037b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d005      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037c4:	4b53      	ldr	r3, [pc, #332]	@ (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	4a52      	ldr	r2, [pc, #328]	@ (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 80037ca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80037ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037d0:	4b50      	ldr	r3, [pc, #320]	@ (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	494d      	ldr	r1, [pc, #308]	@ (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d040      	beq.n	8003870 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d107      	bne.n	8003806 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f6:	4b47      	ldr	r3, [pc, #284]	@ (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d115      	bne.n	800382e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e07f      	b.n	8003906 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d107      	bne.n	800381e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800380e:	4b41      	ldr	r3, [pc, #260]	@ (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d109      	bne.n	800382e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e073      	b.n	8003906 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800381e:	4b3d      	ldr	r3, [pc, #244]	@ (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e06b      	b.n	8003906 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800382e:	4b39      	ldr	r3, [pc, #228]	@ (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f023 0203 	bic.w	r2, r3, #3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	4936      	ldr	r1, [pc, #216]	@ (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 800383c:	4313      	orrs	r3, r2
 800383e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003840:	f7fe fcf4 	bl	800222c <HAL_GetTick>
 8003844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003846:	e00a      	b.n	800385e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003848:	f7fe fcf0 	bl	800222c <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003856:	4293      	cmp	r3, r2
 8003858:	d901      	bls.n	800385e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e053      	b.n	8003906 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385e:	4b2d      	ldr	r3, [pc, #180]	@ (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f003 020c 	and.w	r2, r3, #12
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	429a      	cmp	r2, r3
 800386e:	d1eb      	bne.n	8003848 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003870:	4b27      	ldr	r3, [pc, #156]	@ (8003910 <HAL_RCC_ClockConfig+0x1c0>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	429a      	cmp	r2, r3
 800387c:	d210      	bcs.n	80038a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387e:	4b24      	ldr	r3, [pc, #144]	@ (8003910 <HAL_RCC_ClockConfig+0x1c0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 0207 	bic.w	r2, r3, #7
 8003886:	4922      	ldr	r1, [pc, #136]	@ (8003910 <HAL_RCC_ClockConfig+0x1c0>)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	4313      	orrs	r3, r2
 800388c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800388e:	4b20      	ldr	r3, [pc, #128]	@ (8003910 <HAL_RCC_ClockConfig+0x1c0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	429a      	cmp	r2, r3
 800389a:	d001      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e032      	b.n	8003906 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d008      	beq.n	80038be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038ac:	4b19      	ldr	r3, [pc, #100]	@ (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	4916      	ldr	r1, [pc, #88]	@ (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d009      	beq.n	80038de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038ca:	4b12      	ldr	r3, [pc, #72]	@ (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	490e      	ldr	r1, [pc, #56]	@ (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038de:	f000 f821 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 80038e2:	4602      	mov	r2, r0
 80038e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	091b      	lsrs	r3, r3, #4
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	490a      	ldr	r1, [pc, #40]	@ (8003918 <HAL_RCC_ClockConfig+0x1c8>)
 80038f0:	5ccb      	ldrb	r3, [r1, r3]
 80038f2:	fa22 f303 	lsr.w	r3, r2, r3
 80038f6:	4a09      	ldr	r2, [pc, #36]	@ (800391c <HAL_RCC_ClockConfig+0x1cc>)
 80038f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038fa:	4b09      	ldr	r3, [pc, #36]	@ (8003920 <HAL_RCC_ClockConfig+0x1d0>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fe fad2 	bl	8001ea8 <HAL_InitTick>

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40022000 	.word	0x40022000
 8003914:	40021000 	.word	0x40021000
 8003918:	0800bd9c 	.word	0x0800bd9c
 800391c:	20000000 	.word	0x20000000
 8003920:	20000004 	.word	0x20000004

08003924 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	2300      	movs	r3, #0
 8003930:	60bb      	str	r3, [r7, #8]
 8003932:	2300      	movs	r3, #0
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	2300      	movs	r3, #0
 8003938:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800393e:	4b1e      	ldr	r3, [pc, #120]	@ (80039b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f003 030c 	and.w	r3, r3, #12
 800394a:	2b04      	cmp	r3, #4
 800394c:	d002      	beq.n	8003954 <HAL_RCC_GetSysClockFreq+0x30>
 800394e:	2b08      	cmp	r3, #8
 8003950:	d003      	beq.n	800395a <HAL_RCC_GetSysClockFreq+0x36>
 8003952:	e027      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003954:	4b19      	ldr	r3, [pc, #100]	@ (80039bc <HAL_RCC_GetSysClockFreq+0x98>)
 8003956:	613b      	str	r3, [r7, #16]
      break;
 8003958:	e027      	b.n	80039aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	0c9b      	lsrs	r3, r3, #18
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	4a17      	ldr	r2, [pc, #92]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003964:	5cd3      	ldrb	r3, [r2, r3]
 8003966:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d010      	beq.n	8003994 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003972:	4b11      	ldr	r3, [pc, #68]	@ (80039b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	0c5b      	lsrs	r3, r3, #17
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	4a11      	ldr	r2, [pc, #68]	@ (80039c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800397e:	5cd3      	ldrb	r3, [r2, r3]
 8003980:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a0d      	ldr	r2, [pc, #52]	@ (80039bc <HAL_RCC_GetSysClockFreq+0x98>)
 8003986:	fb03 f202 	mul.w	r2, r3, r2
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	e004      	b.n	800399e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a0c      	ldr	r2, [pc, #48]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003998:	fb02 f303 	mul.w	r3, r2, r3
 800399c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	613b      	str	r3, [r7, #16]
      break;
 80039a2:	e002      	b.n	80039aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039a4:	4b05      	ldr	r3, [pc, #20]	@ (80039bc <HAL_RCC_GetSysClockFreq+0x98>)
 80039a6:	613b      	str	r3, [r7, #16]
      break;
 80039a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039aa:	693b      	ldr	r3, [r7, #16]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	371c      	adds	r7, #28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40021000 	.word	0x40021000
 80039bc:	007a1200 	.word	0x007a1200
 80039c0:	0800bdb4 	.word	0x0800bdb4
 80039c4:	0800bdc4 	.word	0x0800bdc4
 80039c8:	003d0900 	.word	0x003d0900

080039cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039d0:	4b02      	ldr	r3, [pc, #8]	@ (80039dc <HAL_RCC_GetHCLKFreq+0x10>)
 80039d2:	681b      	ldr	r3, [r3, #0]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr
 80039dc:	20000000 	.word	0x20000000

080039e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039e4:	f7ff fff2 	bl	80039cc <HAL_RCC_GetHCLKFreq>
 80039e8:	4602      	mov	r2, r0
 80039ea:	4b05      	ldr	r3, [pc, #20]	@ (8003a00 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	0a1b      	lsrs	r3, r3, #8
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	4903      	ldr	r1, [pc, #12]	@ (8003a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039f6:	5ccb      	ldrb	r3, [r1, r3]
 80039f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40021000 	.word	0x40021000
 8003a04:	0800bdac 	.word	0x0800bdac

08003a08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a0c:	f7ff ffde 	bl	80039cc <HAL_RCC_GetHCLKFreq>
 8003a10:	4602      	mov	r2, r0
 8003a12:	4b05      	ldr	r3, [pc, #20]	@ (8003a28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	0adb      	lsrs	r3, r3, #11
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	4903      	ldr	r1, [pc, #12]	@ (8003a2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a1e:	5ccb      	ldrb	r3, [r1, r3]
 8003a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	0800bdac 	.word	0x0800bdac

08003a30 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	220f      	movs	r2, #15
 8003a3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a40:	4b11      	ldr	r3, [pc, #68]	@ (8003a88 <HAL_RCC_GetClockConfig+0x58>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 0203 	and.w	r2, r3, #3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8003a88 <HAL_RCC_GetClockConfig+0x58>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a58:	4b0b      	ldr	r3, [pc, #44]	@ (8003a88 <HAL_RCC_GetClockConfig+0x58>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003a64:	4b08      	ldr	r3, [pc, #32]	@ (8003a88 <HAL_RCC_GetClockConfig+0x58>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	08db      	lsrs	r3, r3, #3
 8003a6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a72:	4b06      	ldr	r3, [pc, #24]	@ (8003a8c <HAL_RCC_GetClockConfig+0x5c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0207 	and.w	r2, r3, #7
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	40022000 	.word	0x40022000

08003a90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a98:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac4 <RCC_Delay+0x34>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a0a      	ldr	r2, [pc, #40]	@ (8003ac8 <RCC_Delay+0x38>)
 8003a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa2:	0a5b      	lsrs	r3, r3, #9
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	fb02 f303 	mul.w	r3, r2, r3
 8003aaa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003aac:	bf00      	nop
  }
  while (Delay --);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1e5a      	subs	r2, r3, #1
 8003ab2:	60fa      	str	r2, [r7, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1f9      	bne.n	8003aac <RCC_Delay+0x1c>
}
 8003ab8:	bf00      	nop
 8003aba:	bf00      	nop
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr
 8003ac4:	20000000 	.word	0x20000000
 8003ac8:	10624dd3 	.word	0x10624dd3

08003acc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e041      	b.n	8003b62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fe f966 	bl	8001dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3304      	adds	r3, #4
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	f000 faa6 	bl	800405c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d001      	beq.n	8003b84 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e032      	b.n	8003bea <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a18      	ldr	r2, [pc, #96]	@ (8003bf4 <HAL_TIM_Base_Start+0x88>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d00e      	beq.n	8003bb4 <HAL_TIM_Base_Start+0x48>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b9e:	d009      	beq.n	8003bb4 <HAL_TIM_Base_Start+0x48>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a14      	ldr	r2, [pc, #80]	@ (8003bf8 <HAL_TIM_Base_Start+0x8c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d004      	beq.n	8003bb4 <HAL_TIM_Base_Start+0x48>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a13      	ldr	r2, [pc, #76]	@ (8003bfc <HAL_TIM_Base_Start+0x90>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d111      	bne.n	8003bd8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2b06      	cmp	r3, #6
 8003bc4:	d010      	beq.n	8003be8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 0201 	orr.w	r2, r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd6:	e007      	b.n	8003be8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0201 	orr.w	r2, r2, #1
 8003be6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr
 8003bf4:	40012c00 	.word	0x40012c00
 8003bf8:	40000400 	.word	0x40000400
 8003bfc:	40000800 	.word	0x40000800

08003c00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d001      	beq.n	8003c18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e03a      	b.n	8003c8e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68da      	ldr	r2, [r3, #12]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a18      	ldr	r2, [pc, #96]	@ (8003c98 <HAL_TIM_Base_Start_IT+0x98>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00e      	beq.n	8003c58 <HAL_TIM_Base_Start_IT+0x58>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c42:	d009      	beq.n	8003c58 <HAL_TIM_Base_Start_IT+0x58>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a14      	ldr	r2, [pc, #80]	@ (8003c9c <HAL_TIM_Base_Start_IT+0x9c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d004      	beq.n	8003c58 <HAL_TIM_Base_Start_IT+0x58>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a13      	ldr	r2, [pc, #76]	@ (8003ca0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d111      	bne.n	8003c7c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b06      	cmp	r3, #6
 8003c68:	d010      	beq.n	8003c8c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f042 0201 	orr.w	r2, r2, #1
 8003c78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c7a:	e007      	b.n	8003c8c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0201 	orr.w	r2, r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr
 8003c98:	40012c00 	.word	0x40012c00
 8003c9c:	40000400 	.word	0x40000400
 8003ca0:	40000800 	.word	0x40000800

08003ca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d020      	beq.n	8003d08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d01b      	beq.n	8003d08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f06f 0202 	mvn.w	r2, #2
 8003cd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f998 	bl	8004024 <HAL_TIM_IC_CaptureCallback>
 8003cf4:	e005      	b.n	8003d02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f98b 	bl	8004012 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f99a 	bl	8004036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f003 0304 	and.w	r3, r3, #4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d020      	beq.n	8003d54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d01b      	beq.n	8003d54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f06f 0204 	mvn.w	r2, #4
 8003d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2202      	movs	r2, #2
 8003d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f972 	bl	8004024 <HAL_TIM_IC_CaptureCallback>
 8003d40:	e005      	b.n	8003d4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f965 	bl	8004012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f974 	bl	8004036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d020      	beq.n	8003da0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f003 0308 	and.w	r3, r3, #8
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d01b      	beq.n	8003da0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f06f 0208 	mvn.w	r2, #8
 8003d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2204      	movs	r2, #4
 8003d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f94c 	bl	8004024 <HAL_TIM_IC_CaptureCallback>
 8003d8c:	e005      	b.n	8003d9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f93f 	bl	8004012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f94e 	bl	8004036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	f003 0310 	and.w	r3, r3, #16
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d020      	beq.n	8003dec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f003 0310 	and.w	r3, r3, #16
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d01b      	beq.n	8003dec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f06f 0210 	mvn.w	r2, #16
 8003dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2208      	movs	r2, #8
 8003dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f926 	bl	8004024 <HAL_TIM_IC_CaptureCallback>
 8003dd8:	e005      	b.n	8003de6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f919 	bl	8004012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f928 	bl	8004036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00c      	beq.n	8003e10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d007      	beq.n	8003e10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f06f 0201 	mvn.w	r2, #1
 8003e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7fd ff4c 	bl	8001ca8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00c      	beq.n	8003e34 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d007      	beq.n	8003e34 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fa7f 	bl	8004332 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00c      	beq.n	8003e58 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d007      	beq.n	8003e58 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f8f8 	bl	8004048 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f003 0320 	and.w	r3, r3, #32
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00c      	beq.n	8003e7c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f003 0320 	and.w	r3, r3, #32
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d007      	beq.n	8003e7c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f06f 0220 	mvn.w	r2, #32
 8003e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 fa52 	bl	8004320 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e7c:	bf00      	nop
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_TIM_ConfigClockSource+0x1c>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e0b4      	b.n	800400a <HAL_TIM_ConfigClockSource+0x186>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ec6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ed8:	d03e      	beq.n	8003f58 <HAL_TIM_ConfigClockSource+0xd4>
 8003eda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ede:	f200 8087 	bhi.w	8003ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ee6:	f000 8086 	beq.w	8003ff6 <HAL_TIM_ConfigClockSource+0x172>
 8003eea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eee:	d87f      	bhi.n	8003ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef0:	2b70      	cmp	r3, #112	@ 0x70
 8003ef2:	d01a      	beq.n	8003f2a <HAL_TIM_ConfigClockSource+0xa6>
 8003ef4:	2b70      	cmp	r3, #112	@ 0x70
 8003ef6:	d87b      	bhi.n	8003ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef8:	2b60      	cmp	r3, #96	@ 0x60
 8003efa:	d050      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0x11a>
 8003efc:	2b60      	cmp	r3, #96	@ 0x60
 8003efe:	d877      	bhi.n	8003ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8003f00:	2b50      	cmp	r3, #80	@ 0x50
 8003f02:	d03c      	beq.n	8003f7e <HAL_TIM_ConfigClockSource+0xfa>
 8003f04:	2b50      	cmp	r3, #80	@ 0x50
 8003f06:	d873      	bhi.n	8003ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8003f08:	2b40      	cmp	r3, #64	@ 0x40
 8003f0a:	d058      	beq.n	8003fbe <HAL_TIM_ConfigClockSource+0x13a>
 8003f0c:	2b40      	cmp	r3, #64	@ 0x40
 8003f0e:	d86f      	bhi.n	8003ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8003f10:	2b30      	cmp	r3, #48	@ 0x30
 8003f12:	d064      	beq.n	8003fde <HAL_TIM_ConfigClockSource+0x15a>
 8003f14:	2b30      	cmp	r3, #48	@ 0x30
 8003f16:	d86b      	bhi.n	8003ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8003f18:	2b20      	cmp	r3, #32
 8003f1a:	d060      	beq.n	8003fde <HAL_TIM_ConfigClockSource+0x15a>
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d867      	bhi.n	8003ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d05c      	beq.n	8003fde <HAL_TIM_ConfigClockSource+0x15a>
 8003f24:	2b10      	cmp	r3, #16
 8003f26:	d05a      	beq.n	8003fde <HAL_TIM_ConfigClockSource+0x15a>
 8003f28:	e062      	b.n	8003ff0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f3a:	f000 f974 	bl	8004226 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	609a      	str	r2, [r3, #8]
      break;
 8003f56:	e04f      	b.n	8003ff8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f68:	f000 f95d 	bl	8004226 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f7a:	609a      	str	r2, [r3, #8]
      break;
 8003f7c:	e03c      	b.n	8003ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	f000 f8d4 	bl	8004138 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2150      	movs	r1, #80	@ 0x50
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 f92b 	bl	80041f2 <TIM_ITRx_SetConfig>
      break;
 8003f9c:	e02c      	b.n	8003ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003faa:	461a      	mov	r2, r3
 8003fac:	f000 f8f2 	bl	8004194 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2160      	movs	r1, #96	@ 0x60
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 f91b 	bl	80041f2 <TIM_ITRx_SetConfig>
      break;
 8003fbc:	e01c      	b.n	8003ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f000 f8b4 	bl	8004138 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2140      	movs	r1, #64	@ 0x40
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 f90b 	bl	80041f2 <TIM_ITRx_SetConfig>
      break;
 8003fdc:	e00c      	b.n	8003ff8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	4610      	mov	r0, r2
 8003fea:	f000 f902 	bl	80041f2 <TIM_ITRx_SetConfig>
      break;
 8003fee:	e003      	b.n	8003ff8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ff4:	e000      	b.n	8003ff8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ff6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004008:	7bfb      	ldrb	r3, [r7, #15]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	bc80      	pop	{r7}
 8004022:	4770      	bx	lr

08004024 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	bc80      	pop	{r7}
 8004034:	4770      	bx	lr

08004036 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	bc80      	pop	{r7}
 8004046:	4770      	bx	lr

08004048 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	bc80      	pop	{r7}
 8004058:	4770      	bx	lr
	...

0800405c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a2f      	ldr	r2, [pc, #188]	@ (800412c <TIM_Base_SetConfig+0xd0>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d00b      	beq.n	800408c <TIM_Base_SetConfig+0x30>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800407a:	d007      	beq.n	800408c <TIM_Base_SetConfig+0x30>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a2c      	ldr	r2, [pc, #176]	@ (8004130 <TIM_Base_SetConfig+0xd4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d003      	beq.n	800408c <TIM_Base_SetConfig+0x30>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a2b      	ldr	r2, [pc, #172]	@ (8004134 <TIM_Base_SetConfig+0xd8>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d108      	bne.n	800409e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a22      	ldr	r2, [pc, #136]	@ (800412c <TIM_Base_SetConfig+0xd0>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d00b      	beq.n	80040be <TIM_Base_SetConfig+0x62>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ac:	d007      	beq.n	80040be <TIM_Base_SetConfig+0x62>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004130 <TIM_Base_SetConfig+0xd4>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d003      	beq.n	80040be <TIM_Base_SetConfig+0x62>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a1e      	ldr	r2, [pc, #120]	@ (8004134 <TIM_Base_SetConfig+0xd8>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d108      	bne.n	80040d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a0d      	ldr	r2, [pc, #52]	@ (800412c <TIM_Base_SetConfig+0xd0>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d103      	bne.n	8004104 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d005      	beq.n	8004122 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f023 0201 	bic.w	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	611a      	str	r2, [r3, #16]
  }
}
 8004122:	bf00      	nop
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr
 800412c:	40012c00 	.word	0x40012c00
 8004130:	40000400 	.word	0x40000400
 8004134:	40000800 	.word	0x40000800

08004138 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	f023 0201 	bic.w	r2, r3, #1
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004162:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	4313      	orrs	r3, r2
 800416c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f023 030a 	bic.w	r3, r3, #10
 8004174:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4313      	orrs	r3, r2
 800417c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	621a      	str	r2, [r3, #32]
}
 800418a:	bf00      	nop
 800418c:	371c      	adds	r7, #28
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	f023 0210 	bic.w	r2, r3, #16
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	031b      	lsls	r3, r3, #12
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	4313      	orrs	r3, r2
 80041da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	621a      	str	r2, [r3, #32]
}
 80041e8:	bf00      	nop
 80041ea:	371c      	adds	r7, #28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bc80      	pop	{r7}
 80041f0:	4770      	bx	lr

080041f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b085      	sub	sp, #20
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
 80041fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004208:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	f043 0307 	orr.w	r3, r3, #7
 8004214:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	609a      	str	r2, [r3, #8]
}
 800421c:	bf00      	nop
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr

08004226 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004226:	b480      	push	{r7}
 8004228:	b087      	sub	sp, #28
 800422a:	af00      	add	r7, sp, #0
 800422c:	60f8      	str	r0, [r7, #12]
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	607a      	str	r2, [r7, #4]
 8004232:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004240:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	021a      	lsls	r2, r3, #8
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	431a      	orrs	r2, r3
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	4313      	orrs	r3, r2
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	609a      	str	r2, [r3, #8]
}
 800425a:	bf00      	nop
 800425c:	371c      	adds	r7, #28
 800425e:	46bd      	mov	sp, r7
 8004260:	bc80      	pop	{r7}
 8004262:	4770      	bx	lr

08004264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004274:	2b01      	cmp	r3, #1
 8004276:	d101      	bne.n	800427c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004278:	2302      	movs	r3, #2
 800427a:	e046      	b.n	800430a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a16      	ldr	r2, [pc, #88]	@ (8004314 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d00e      	beq.n	80042de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042c8:	d009      	beq.n	80042de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a12      	ldr	r2, [pc, #72]	@ (8004318 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d004      	beq.n	80042de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a10      	ldr	r2, [pc, #64]	@ (800431c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d10c      	bne.n	80042f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr
 8004314:	40012c00 	.word	0x40012c00
 8004318:	40000400 	.word	0x40000400
 800431c:	40000800 	.word	0x40000800

08004320 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	bc80      	pop	{r7}
 8004330:	4770      	bx	lr

08004332 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	bc80      	pop	{r7}
 8004342:	4770      	bx	lr

08004344 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e042      	b.n	80043dc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fd fd48 	bl	8001e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2224      	movs	r2, #36	@ 0x24
 8004374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004386:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 fdb7 	bl	8004efc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	691a      	ldr	r2, [r3, #16]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800439c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695a      	ldr	r2, [r3, #20]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08a      	sub	sp, #40	@ 0x28
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	603b      	str	r3, [r7, #0]
 80043f0:	4613      	mov	r3, r2
 80043f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b20      	cmp	r3, #32
 8004402:	d175      	bne.n	80044f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d002      	beq.n	8004410 <HAL_UART_Transmit+0x2c>
 800440a:	88fb      	ldrh	r3, [r7, #6]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e06e      	b.n	80044f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2221      	movs	r2, #33	@ 0x21
 800441e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004422:	f7fd ff03 	bl	800222c <HAL_GetTick>
 8004426:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	88fa      	ldrh	r2, [r7, #6]
 800442c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	88fa      	ldrh	r2, [r7, #6]
 8004432:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800443c:	d108      	bne.n	8004450 <HAL_UART_Transmit+0x6c>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d104      	bne.n	8004450 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004446:	2300      	movs	r3, #0
 8004448:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	61bb      	str	r3, [r7, #24]
 800444e:	e003      	b.n	8004458 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004454:	2300      	movs	r3, #0
 8004456:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004458:	e02e      	b.n	80044b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2200      	movs	r2, #0
 8004462:	2180      	movs	r1, #128	@ 0x80
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 fb1c 	bl	8004aa2 <UART_WaitOnFlagUntilTimeout>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d005      	beq.n	800447c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2220      	movs	r2, #32
 8004474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e03a      	b.n	80044f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10b      	bne.n	800449a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	461a      	mov	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004490:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	3302      	adds	r3, #2
 8004496:	61bb      	str	r3, [r7, #24]
 8004498:	e007      	b.n	80044aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	781a      	ldrb	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	3301      	adds	r3, #1
 80044a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044bc:	b29b      	uxth	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1cb      	bne.n	800445a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2200      	movs	r2, #0
 80044ca:	2140      	movs	r1, #64	@ 0x40
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 fae8 	bl	8004aa2 <UART_WaitOnFlagUntilTimeout>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d005      	beq.n	80044e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e006      	b.n	80044f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	e000      	b.n	80044f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80044f0:	2302      	movs	r3, #2
  }
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3720      	adds	r7, #32
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b084      	sub	sp, #16
 80044fe:	af00      	add	r7, sp, #0
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	4613      	mov	r3, r2
 8004506:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b20      	cmp	r3, #32
 8004512:	d112      	bne.n	800453a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <HAL_UART_Receive_IT+0x26>
 800451a:	88fb      	ldrh	r3, [r7, #6]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e00b      	b.n	800453c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800452a:	88fb      	ldrh	r3, [r7, #6]
 800452c:	461a      	mov	r2, r3
 800452e:	68b9      	ldr	r1, [r7, #8]
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 fb0f 	bl	8004b54 <UART_Start_Receive_IT>
 8004536:	4603      	mov	r3, r0
 8004538:	e000      	b.n	800453c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800453a:	2302      	movs	r3, #2
  }
}
 800453c:	4618      	mov	r0, r3
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b0ba      	sub	sp, #232	@ 0xe8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800456a:	2300      	movs	r3, #0
 800456c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004570:	2300      	movs	r3, #0
 8004572:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004582:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10f      	bne.n	80045aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800458a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800458e:	f003 0320 	and.w	r3, r3, #32
 8004592:	2b00      	cmp	r3, #0
 8004594:	d009      	beq.n	80045aa <HAL_UART_IRQHandler+0x66>
 8004596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800459a:	f003 0320 	and.w	r3, r3, #32
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fbec 	bl	8004d80 <UART_Receive_IT>
      return;
 80045a8:	e25b      	b.n	8004a62 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80045aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f000 80de 	beq.w	8004770 <HAL_UART_IRQHandler+0x22c>
 80045b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d106      	bne.n	80045ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045c4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 80d1 	beq.w	8004770 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00b      	beq.n	80045f2 <HAL_UART_IRQHandler+0xae>
 80045da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d005      	beq.n	80045f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ea:	f043 0201 	orr.w	r2, r3, #1
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00b      	beq.n	8004616 <HAL_UART_IRQHandler+0xd2>
 80045fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d005      	beq.n	8004616 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800460e:	f043 0202 	orr.w	r2, r3, #2
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00b      	beq.n	800463a <HAL_UART_IRQHandler+0xf6>
 8004622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d005      	beq.n	800463a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004632:	f043 0204 	orr.w	r2, r3, #4
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800463a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b00      	cmp	r3, #0
 8004644:	d011      	beq.n	800466a <HAL_UART_IRQHandler+0x126>
 8004646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800464a:	f003 0320 	and.w	r3, r3, #32
 800464e:	2b00      	cmp	r3, #0
 8004650:	d105      	bne.n	800465e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d005      	beq.n	800466a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004662:	f043 0208 	orr.w	r2, r3, #8
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 81f2 	beq.w	8004a58 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004678:	f003 0320 	and.w	r3, r3, #32
 800467c:	2b00      	cmp	r3, #0
 800467e:	d008      	beq.n	8004692 <HAL_UART_IRQHandler+0x14e>
 8004680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004684:	f003 0320 	and.w	r3, r3, #32
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 fb77 	bl	8004d80 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800469c:	2b00      	cmp	r3, #0
 800469e:	bf14      	ite	ne
 80046a0:	2301      	movne	r3, #1
 80046a2:	2300      	moveq	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ae:	f003 0308 	and.w	r3, r3, #8
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d103      	bne.n	80046be <HAL_UART_IRQHandler+0x17a>
 80046b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d04f      	beq.n	800475e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fa81 	bl	8004bc6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d041      	beq.n	8004756 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	3314      	adds	r3, #20
 80046d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80046e0:	e853 3f00 	ldrex	r3, [r3]
 80046e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80046e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3314      	adds	r3, #20
 80046fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80046fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004702:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004706:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800470a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800470e:	e841 2300 	strex	r3, r2, [r1]
 8004712:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004716:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1d9      	bne.n	80046d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004722:	2b00      	cmp	r3, #0
 8004724:	d013      	beq.n	800474e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800472a:	4a7e      	ldr	r2, [pc, #504]	@ (8004924 <HAL_UART_IRQHandler+0x3e0>)
 800472c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004732:	4618      	mov	r0, r3
 8004734:	f7fd fec2 	bl	80024bc <HAL_DMA_Abort_IT>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d016      	beq.n	800476c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004748:	4610      	mov	r0, r2
 800474a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800474c:	e00e      	b.n	800476c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f993 	bl	8004a7a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004754:	e00a      	b.n	800476c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f98f 	bl	8004a7a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800475c:	e006      	b.n	800476c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f98b 	bl	8004a7a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800476a:	e175      	b.n	8004a58 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800476c:	bf00      	nop
    return;
 800476e:	e173      	b.n	8004a58 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004774:	2b01      	cmp	r3, #1
 8004776:	f040 814f 	bne.w	8004a18 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800477a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800477e:	f003 0310 	and.w	r3, r3, #16
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 8148 	beq.w	8004a18 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 8141 	beq.w	8004a18 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004796:	2300      	movs	r3, #0
 8004798:	60bb      	str	r3, [r7, #8]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	60bb      	str	r3, [r7, #8]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	60bb      	str	r3, [r7, #8]
 80047aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 80b6 	beq.w	8004928 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 8145 	beq.w	8004a5c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80047d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047da:	429a      	cmp	r2, r3
 80047dc:	f080 813e 	bcs.w	8004a5c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	2b20      	cmp	r3, #32
 80047f0:	f000 8088 	beq.w	8004904 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	330c      	adds	r3, #12
 80047fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004802:	e853 3f00 	ldrex	r3, [r3]
 8004806:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800480a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800480e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004812:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	330c      	adds	r3, #12
 800481c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004820:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004824:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004828:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800482c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004830:	e841 2300 	strex	r3, r2, [r1]
 8004834:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004838:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1d9      	bne.n	80047f4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3314      	adds	r3, #20
 8004846:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004848:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800484a:	e853 3f00 	ldrex	r3, [r3]
 800484e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004850:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004852:	f023 0301 	bic.w	r3, r3, #1
 8004856:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3314      	adds	r3, #20
 8004860:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004864:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004868:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800486c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004870:	e841 2300 	strex	r3, r2, [r1]
 8004874:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004876:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1e1      	bne.n	8004840 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3314      	adds	r3, #20
 8004882:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004884:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004886:	e853 3f00 	ldrex	r3, [r3]
 800488a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800488c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800488e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004892:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3314      	adds	r3, #20
 800489c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80048a0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80048a2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80048a6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80048a8:	e841 2300 	strex	r3, r2, [r1]
 80048ac:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80048ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1e3      	bne.n	800487c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	330c      	adds	r3, #12
 80048c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048cc:	e853 3f00 	ldrex	r3, [r3]
 80048d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80048d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048d4:	f023 0310 	bic.w	r3, r3, #16
 80048d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	330c      	adds	r3, #12
 80048e2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80048e6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80048e8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048ee:	e841 2300 	strex	r3, r2, [r1]
 80048f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1e3      	bne.n	80048c2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fd fda1 	bl	8002446 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004912:	b29b      	uxth	r3, r3
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	b29b      	uxth	r3, r3
 8004918:	4619      	mov	r1, r3
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f8b6 	bl	8004a8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004920:	e09c      	b.n	8004a5c <HAL_UART_IRQHandler+0x518>
 8004922:	bf00      	nop
 8004924:	08004c8b 	.word	0x08004c8b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004930:	b29b      	uxth	r3, r3
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800493c:	b29b      	uxth	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 808e 	beq.w	8004a60 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004944:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 8089 	beq.w	8004a60 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	330c      	adds	r3, #12
 8004954:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004958:	e853 3f00 	ldrex	r3, [r3]
 800495c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800495e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004960:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004964:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	330c      	adds	r3, #12
 800496e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004972:	647a      	str	r2, [r7, #68]	@ 0x44
 8004974:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004976:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004978:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800497a:	e841 2300 	strex	r3, r2, [r1]
 800497e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1e3      	bne.n	800494e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	3314      	adds	r3, #20
 800498c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004990:	e853 3f00 	ldrex	r3, [r3]
 8004994:	623b      	str	r3, [r7, #32]
   return(result);
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	f023 0301 	bic.w	r3, r3, #1
 800499c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3314      	adds	r3, #20
 80049a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80049aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80049ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049b2:	e841 2300 	strex	r3, r2, [r1]
 80049b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1e3      	bne.n	8004986 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2220      	movs	r2, #32
 80049c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	330c      	adds	r3, #12
 80049d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	e853 3f00 	ldrex	r3, [r3]
 80049da:	60fb      	str	r3, [r7, #12]
   return(result);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 0310 	bic.w	r3, r3, #16
 80049e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	330c      	adds	r3, #12
 80049ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80049f0:	61fa      	str	r2, [r7, #28]
 80049f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f4:	69b9      	ldr	r1, [r7, #24]
 80049f6:	69fa      	ldr	r2, [r7, #28]
 80049f8:	e841 2300 	strex	r3, r2, [r1]
 80049fc:	617b      	str	r3, [r7, #20]
   return(result);
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1e3      	bne.n	80049cc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a0e:	4619      	mov	r1, r3
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f83b 	bl	8004a8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a16:	e023      	b.n	8004a60 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d009      	beq.n	8004a38 <HAL_UART_IRQHandler+0x4f4>
 8004a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f93e 	bl	8004cb2 <UART_Transmit_IT>
    return;
 8004a36:	e014      	b.n	8004a62 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00e      	beq.n	8004a62 <HAL_UART_IRQHandler+0x51e>
 8004a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d008      	beq.n	8004a62 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f97d 	bl	8004d50 <UART_EndTransmit_IT>
    return;
 8004a56:	e004      	b.n	8004a62 <HAL_UART_IRQHandler+0x51e>
    return;
 8004a58:	bf00      	nop
 8004a5a:	e002      	b.n	8004a62 <HAL_UART_IRQHandler+0x51e>
      return;
 8004a5c:	bf00      	nop
 8004a5e:	e000      	b.n	8004a62 <HAL_UART_IRQHandler+0x51e>
      return;
 8004a60:	bf00      	nop
  }
}
 8004a62:	37e8      	adds	r7, #232	@ 0xe8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bc80      	pop	{r7}
 8004a78:	4770      	bx	lr

08004a7a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bc80      	pop	{r7}
 8004a8a:	4770      	bx	lr

08004a8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	460b      	mov	r3, r1
 8004a96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr

08004aa2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b086      	sub	sp, #24
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	60f8      	str	r0, [r7, #12]
 8004aaa:	60b9      	str	r1, [r7, #8]
 8004aac:	603b      	str	r3, [r7, #0]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ab2:	e03b      	b.n	8004b2c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
 8004ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aba:	d037      	beq.n	8004b2c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004abc:	f7fd fbb6 	bl	800222c <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	6a3a      	ldr	r2, [r7, #32]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d302      	bcc.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004acc:	6a3b      	ldr	r3, [r7, #32]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e03a      	b.n	8004b4c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d023      	beq.n	8004b2c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	2b80      	cmp	r3, #128	@ 0x80
 8004ae8:	d020      	beq.n	8004b2c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2b40      	cmp	r3, #64	@ 0x40
 8004aee:	d01d      	beq.n	8004b2c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	2b08      	cmp	r3, #8
 8004afc:	d116      	bne.n	8004b2c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004afe:	2300      	movs	r3, #0
 8004b00:	617b      	str	r3, [r7, #20]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	617b      	str	r3, [r7, #20]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	617b      	str	r3, [r7, #20]
 8004b12:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 f856 	bl	8004bc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2208      	movs	r2, #8
 8004b1e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e00f      	b.n	8004b4c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	4013      	ands	r3, r2
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	bf0c      	ite	eq
 8004b3c:	2301      	moveq	r3, #1
 8004b3e:	2300      	movne	r3, #0
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	461a      	mov	r2, r3
 8004b44:	79fb      	ldrb	r3, [r7, #7]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d0b4      	beq.n	8004ab4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	88fa      	ldrh	r2, [r7, #6]
 8004b6c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	88fa      	ldrh	r2, [r7, #6]
 8004b72:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2222      	movs	r2, #34	@ 0x22
 8004b7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d007      	beq.n	8004b9a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68da      	ldr	r2, [r3, #12]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b98:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	695a      	ldr	r2, [r3, #20]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f042 0201 	orr.w	r2, r2, #1
 8004ba8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 0220 	orr.w	r2, r2, #32
 8004bb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bc80      	pop	{r7}
 8004bc4:	4770      	bx	lr

08004bc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b095      	sub	sp, #84	@ 0x54
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	330c      	adds	r3, #12
 8004bd4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004be4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	330c      	adds	r3, #12
 8004bec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bee:	643a      	str	r2, [r7, #64]	@ 0x40
 8004bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004bf4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004bf6:	e841 2300 	strex	r3, r2, [r1]
 8004bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1e5      	bne.n	8004bce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3314      	adds	r3, #20
 8004c08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	e853 3f00 	ldrex	r3, [r3]
 8004c10:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	f023 0301 	bic.w	r3, r3, #1
 8004c18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	3314      	adds	r3, #20
 8004c20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c2a:	e841 2300 	strex	r3, r2, [r1]
 8004c2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1e5      	bne.n	8004c02 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d119      	bne.n	8004c72 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	330c      	adds	r3, #12
 8004c44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	e853 3f00 	ldrex	r3, [r3]
 8004c4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	f023 0310 	bic.w	r3, r3, #16
 8004c54:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	330c      	adds	r3, #12
 8004c5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c5e:	61ba      	str	r2, [r7, #24]
 8004c60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c62:	6979      	ldr	r1, [r7, #20]
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	e841 2300 	strex	r3, r2, [r1]
 8004c6a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1e5      	bne.n	8004c3e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004c80:	bf00      	nop
 8004c82:	3754      	adds	r7, #84	@ 0x54
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bc80      	pop	{r7}
 8004c88:	4770      	bx	lr

08004c8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b084      	sub	sp, #16
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f7ff fee8 	bl	8004a7a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004caa:	bf00      	nop
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b085      	sub	sp, #20
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b21      	cmp	r3, #33	@ 0x21
 8004cc4:	d13e      	bne.n	8004d44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cce:	d114      	bne.n	8004cfa <UART_Transmit_IT+0x48>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d110      	bne.n	8004cfa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	881b      	ldrh	r3, [r3, #0]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	1c9a      	adds	r2, r3, #2
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	621a      	str	r2, [r3, #32]
 8004cf8:	e008      	b.n	8004d0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	1c59      	adds	r1, r3, #1
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6211      	str	r1, [r2, #32]
 8004d04:	781a      	ldrb	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	3b01      	subs	r3, #1
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	4619      	mov	r1, r3
 8004d1a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10f      	bne.n	8004d40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d40:	2300      	movs	r3, #0
 8004d42:	e000      	b.n	8004d46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d44:	2302      	movs	r3, #2
  }
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bc80      	pop	{r7}
 8004d4e:	4770      	bx	lr

08004d50 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d66:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7ff fe79 	bl	8004a68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08c      	sub	sp, #48	@ 0x30
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b22      	cmp	r3, #34	@ 0x22
 8004d92:	f040 80ae 	bne.w	8004ef2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d9e:	d117      	bne.n	8004dd0 <UART_Receive_IT+0x50>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d113      	bne.n	8004dd0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004da8:	2300      	movs	r3, #0
 8004daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc8:	1c9a      	adds	r2, r3, #2
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	629a      	str	r2, [r3, #40]	@ 0x28
 8004dce:	e026      	b.n	8004e1e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004de2:	d007      	beq.n	8004df4 <UART_Receive_IT+0x74>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10a      	bne.n	8004e02 <UART_Receive_IT+0x82>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d106      	bne.n	8004e02 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dfe:	701a      	strb	r2, [r3, #0]
 8004e00:	e008      	b.n	8004e14 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e12:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d15d      	bne.n	8004eee <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0220 	bic.w	r2, r2, #32
 8004e40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695a      	ldr	r2, [r3, #20]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0201 	bic.w	r2, r2, #1
 8004e60:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d135      	bne.n	8004ee4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	330c      	adds	r3, #12
 8004e84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	e853 3f00 	ldrex	r3, [r3]
 8004e8c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	f023 0310 	bic.w	r3, r3, #16
 8004e94:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	330c      	adds	r3, #12
 8004e9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e9e:	623a      	str	r2, [r7, #32]
 8004ea0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea2:	69f9      	ldr	r1, [r7, #28]
 8004ea4:	6a3a      	ldr	r2, [r7, #32]
 8004ea6:	e841 2300 	strex	r3, r2, [r1]
 8004eaa:	61bb      	str	r3, [r7, #24]
   return(result);
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1e5      	bne.n	8004e7e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0310 	and.w	r3, r3, #16
 8004ebc:	2b10      	cmp	r3, #16
 8004ebe:	d10a      	bne.n	8004ed6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	60fb      	str	r3, [r7, #12]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004eda:	4619      	mov	r1, r3
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7ff fdd5 	bl	8004a8c <HAL_UARTEx_RxEventCallback>
 8004ee2:	e002      	b.n	8004eea <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f7fc fb37 	bl	8001558 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	e002      	b.n	8004ef4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	e000      	b.n	8004ef4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ef2:	2302      	movs	r3, #2
  }
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3730      	adds	r7, #48	@ 0x30
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68da      	ldr	r2, [r3, #12]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689a      	ldr	r2, [r3, #8]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	431a      	orrs	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004f36:	f023 030c 	bic.w	r3, r3, #12
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	6812      	ldr	r2, [r2, #0]
 8004f3e:	68b9      	ldr	r1, [r7, #8]
 8004f40:	430b      	orrs	r3, r1
 8004f42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	699a      	ldr	r2, [r3, #24]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a2c      	ldr	r2, [pc, #176]	@ (8005010 <UART_SetConfig+0x114>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d103      	bne.n	8004f6c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f64:	f7fe fd50 	bl	8003a08 <HAL_RCC_GetPCLK2Freq>
 8004f68:	60f8      	str	r0, [r7, #12]
 8004f6a:	e002      	b.n	8004f72 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f6c:	f7fe fd38 	bl	80039e0 <HAL_RCC_GetPCLK1Freq>
 8004f70:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	4613      	mov	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	009a      	lsls	r2, r3, #2
 8004f7c:	441a      	add	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f88:	4a22      	ldr	r2, [pc, #136]	@ (8005014 <UART_SetConfig+0x118>)
 8004f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	0119      	lsls	r1, r3, #4
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	4613      	mov	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	009a      	lsls	r2, r3, #2
 8004f9c:	441a      	add	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8005014 <UART_SetConfig+0x118>)
 8004faa:	fba3 0302 	umull	r0, r3, r3, r2
 8004fae:	095b      	lsrs	r3, r3, #5
 8004fb0:	2064      	movs	r0, #100	@ 0x64
 8004fb2:	fb00 f303 	mul.w	r3, r0, r3
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	011b      	lsls	r3, r3, #4
 8004fba:	3332      	adds	r3, #50	@ 0x32
 8004fbc:	4a15      	ldr	r2, [pc, #84]	@ (8005014 <UART_SetConfig+0x118>)
 8004fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc2:	095b      	lsrs	r3, r3, #5
 8004fc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fc8:	4419      	add	r1, r3
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	009a      	lsls	r2, r3, #2
 8004fd4:	441a      	add	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8005014 <UART_SetConfig+0x118>)
 8004fe2:	fba3 0302 	umull	r0, r3, r3, r2
 8004fe6:	095b      	lsrs	r3, r3, #5
 8004fe8:	2064      	movs	r0, #100	@ 0x64
 8004fea:	fb00 f303 	mul.w	r3, r0, r3
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	3332      	adds	r3, #50	@ 0x32
 8004ff4:	4a07      	ldr	r2, [pc, #28]	@ (8005014 <UART_SetConfig+0x118>)
 8004ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffa:	095b      	lsrs	r3, r3, #5
 8004ffc:	f003 020f 	and.w	r2, r3, #15
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	440a      	add	r2, r1
 8005006:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005008:	bf00      	nop
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	40013800 	.word	0x40013800
 8005014:	51eb851f 	.word	0x51eb851f

08005018 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	4603      	mov	r3, r0
 8005020:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005026:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800502a:	2b84      	cmp	r3, #132	@ 0x84
 800502c:	d005      	beq.n	800503a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800502e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	4413      	add	r3, r2
 8005036:	3303      	adds	r3, #3
 8005038:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800503a:	68fb      	ldr	r3, [r7, #12]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	bc80      	pop	{r7}
 8005044:	4770      	bx	lr

08005046 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800504c:	f3ef 8305 	mrs	r3, IPSR
 8005050:	607b      	str	r3, [r7, #4]
  return(result);
 8005052:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005054:	2b00      	cmp	r3, #0
 8005056:	bf14      	ite	ne
 8005058:	2301      	movne	r3, #1
 800505a:	2300      	moveq	r3, #0
 800505c:	b2db      	uxtb	r3, r3
}
 800505e:	4618      	mov	r0, r3
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	bc80      	pop	{r7}
 8005066:	4770      	bx	lr

08005068 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800506a:	b089      	sub	sp, #36	@ 0x24
 800506c:	af04      	add	r7, sp, #16
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d020      	beq.n	80050bc <osThreadCreate+0x54>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d01c      	beq.n	80050bc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685c      	ldr	r4, [r3, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	691e      	ldr	r6, [r3, #16]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005094:	4618      	mov	r0, r3
 8005096:	f7ff ffbf 	bl	8005018 <makeFreeRtosPriority>
 800509a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050a4:	9202      	str	r2, [sp, #8]
 80050a6:	9301      	str	r3, [sp, #4]
 80050a8:	9100      	str	r1, [sp, #0]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	4632      	mov	r2, r6
 80050ae:	4629      	mov	r1, r5
 80050b0:	4620      	mov	r0, r4
 80050b2:	f000 ff5e 	bl	8005f72 <xTaskCreateStatic>
 80050b6:	4603      	mov	r3, r0
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	e01c      	b.n	80050f6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685c      	ldr	r4, [r3, #4]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050c8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff ffa1 	bl	8005018 <makeFreeRtosPriority>
 80050d6:	4602      	mov	r2, r0
 80050d8:	f107 030c 	add.w	r3, r7, #12
 80050dc:	9301      	str	r3, [sp, #4]
 80050de:	9200      	str	r2, [sp, #0]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	4632      	mov	r2, r6
 80050e4:	4629      	mov	r1, r5
 80050e6:	4620      	mov	r0, r4
 80050e8:	f000 ffa3 	bl	8006032 <xTaskCreate>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d001      	beq.n	80050f6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80050f2:	2300      	movs	r3, #0
 80050f4:	e000      	b.n	80050f8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80050f6:	68fb      	ldr	r3, [r7, #12]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005100 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <osDelay+0x16>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	e000      	b.n	8005118 <osDelay+0x18>
 8005116:	2301      	movs	r3, #1
 8005118:	4618      	mov	r0, r3
 800511a:	f001 f8d9 	bl	80062d0 <vTaskDelay>
  
  return osOK;
 800511e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d007      	beq.n	8005148 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	4619      	mov	r1, r3
 800513e:	2001      	movs	r0, #1
 8005140:	f000 fab1 	bl	80056a6 <xQueueCreateMutexStatic>
 8005144:	4603      	mov	r3, r0
 8005146:	e003      	b.n	8005150 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005148:	2001      	movs	r0, #1
 800514a:	f000 fa94 	bl	8005676 <xQueueCreateMutex>
 800514e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005150:	4618      	mov	r0, r3
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005162:	2300      	movs	r3, #0
 8005164:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <osMutexWait+0x18>
    return osErrorParameter;
 800516c:	2380      	movs	r3, #128	@ 0x80
 800516e:	e03a      	b.n	80051e6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005170:	2300      	movs	r3, #0
 8005172:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517a:	d103      	bne.n	8005184 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800517c:	f04f 33ff 	mov.w	r3, #4294967295
 8005180:	60fb      	str	r3, [r7, #12]
 8005182:	e009      	b.n	8005198 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d006      	beq.n	8005198 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <osMutexWait+0x40>
      ticks = 1;
 8005194:	2301      	movs	r3, #1
 8005196:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005198:	f7ff ff55 	bl	8005046 <inHandlerMode>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d017      	beq.n	80051d2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80051a2:	f107 0308 	add.w	r3, r7, #8
 80051a6:	461a      	mov	r2, r3
 80051a8:	2100      	movs	r1, #0
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fd38 	bl	8005c20 <xQueueReceiveFromISR>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d001      	beq.n	80051ba <osMutexWait+0x62>
      return osErrorOS;
 80051b6:	23ff      	movs	r3, #255	@ 0xff
 80051b8:	e015      	b.n	80051e6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d011      	beq.n	80051e4 <osMutexWait+0x8c>
 80051c0:	4b0b      	ldr	r3, [pc, #44]	@ (80051f0 <osMutexWait+0x98>)
 80051c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	e008      	b.n	80051e4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80051d2:	68f9      	ldr	r1, [r7, #12]
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fc13 	bl	8005a00 <xQueueSemaphoreTake>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d001      	beq.n	80051e4 <osMutexWait+0x8c>
    return osErrorOS;
 80051e0:	23ff      	movs	r3, #255	@ 0xff
 80051e2:	e000      	b.n	80051e6 <osMutexWait+0x8e>
  }
  
  return osOK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	e000ed04 	.word	0xe000ed04

080051f4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80051fc:	2300      	movs	r3, #0
 80051fe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005200:	2300      	movs	r3, #0
 8005202:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005204:	f7ff ff1f 	bl	8005046 <inHandlerMode>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d016      	beq.n	800523c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800520e:	f107 0308 	add.w	r3, r7, #8
 8005212:	4619      	mov	r1, r3
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 fb63 	bl	80058e0 <xQueueGiveFromISR>
 800521a:	4603      	mov	r3, r0
 800521c:	2b01      	cmp	r3, #1
 800521e:	d001      	beq.n	8005224 <osMutexRelease+0x30>
      return osErrorOS;
 8005220:	23ff      	movs	r3, #255	@ 0xff
 8005222:	e017      	b.n	8005254 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d013      	beq.n	8005252 <osMutexRelease+0x5e>
 800522a:	4b0c      	ldr	r3, [pc, #48]	@ (800525c <osMutexRelease+0x68>)
 800522c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	e00a      	b.n	8005252 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800523c:	2300      	movs	r3, #0
 800523e:	2200      	movs	r2, #0
 8005240:	2100      	movs	r1, #0
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 fa4a 	bl	80056dc <xQueueGenericSend>
 8005248:	4603      	mov	r3, r0
 800524a:	2b01      	cmp	r3, #1
 800524c:	d001      	beq.n	8005252 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800524e:	23ff      	movs	r3, #255	@ 0xff
 8005250:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005252:	68fb      	ldr	r3, [r7, #12]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	e000ed04 	.word	0xe000ed04

08005260 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f103 0208 	add.w	r2, r3, #8
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f04f 32ff 	mov.w	r2, #4294967295
 8005278:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f103 0208 	add.w	r2, r3, #8
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f103 0208 	add.w	r2, r3, #8
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	bc80      	pop	{r7}
 800529c:	4770      	bx	lr

0800529e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800529e:	b480      	push	{r7}
 80052a0:	b083      	sub	sp, #12
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bc80      	pop	{r7}
 80052b4:	4770      	bx	lr

080052b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052b6:	b480      	push	{r7}
 80052b8:	b085      	sub	sp, #20
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	1c5a      	adds	r2, r3, #1
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	601a      	str	r2, [r3, #0]
}
 80052f2:	bf00      	nop
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bc80      	pop	{r7}
 80052fa:	4770      	bx	lr

080052fc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005312:	d103      	bne.n	800531c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	60fb      	str	r3, [r7, #12]
 800531a:	e00c      	b.n	8005336 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3308      	adds	r3, #8
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	e002      	b.n	800532a <vListInsert+0x2e>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	429a      	cmp	r2, r3
 8005334:	d2f6      	bcs.n	8005324 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	601a      	str	r2, [r3, #0]
}
 8005362:	bf00      	nop
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	bc80      	pop	{r7}
 800536a:	4770      	bx	lr

0800536c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	6892      	ldr	r2, [r2, #8]
 8005382:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	6852      	ldr	r2, [r2, #4]
 800538c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	429a      	cmp	r2, r3
 8005396:	d103      	bne.n	80053a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	1e5a      	subs	r2, r3, #1
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bc80      	pop	{r7}
 80053bc:	4770      	bx	lr
	...

080053c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10b      	bne.n	80053ec <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80053e6:	bf00      	nop
 80053e8:	bf00      	nop
 80053ea:	e7fd      	b.n	80053e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80053ec:	f001 fd74 	bl	8006ed8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f8:	68f9      	ldr	r1, [r7, #12]
 80053fa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80053fc:	fb01 f303 	mul.w	r3, r1, r3
 8005400:	441a      	add	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800541c:	3b01      	subs	r3, #1
 800541e:	68f9      	ldr	r1, [r7, #12]
 8005420:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005422:	fb01 f303 	mul.w	r3, r1, r3
 8005426:	441a      	add	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	22ff      	movs	r2, #255	@ 0xff
 8005430:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	22ff      	movs	r2, #255	@ 0xff
 8005438:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d114      	bne.n	800546c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d01a      	beq.n	8005480 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	3310      	adds	r3, #16
 800544e:	4618      	mov	r0, r3
 8005450:	f001 f962 	bl	8006718 <xTaskRemoveFromEventList>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d012      	beq.n	8005480 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800545a:	4b0d      	ldr	r3, [pc, #52]	@ (8005490 <xQueueGenericReset+0xd0>)
 800545c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	f3bf 8f4f 	dsb	sy
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	e009      	b.n	8005480 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	3310      	adds	r3, #16
 8005470:	4618      	mov	r0, r3
 8005472:	f7ff fef5 	bl	8005260 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	3324      	adds	r3, #36	@ 0x24
 800547a:	4618      	mov	r0, r3
 800547c:	f7ff fef0 	bl	8005260 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005480:	f001 fd5a 	bl	8006f38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005484:	2301      	movs	r3, #1
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	e000ed04 	.word	0xe000ed04

08005494 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005494:	b580      	push	{r7, lr}
 8005496:	b08e      	sub	sp, #56	@ 0x38
 8005498:	af02      	add	r7, sp, #8
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10b      	bne.n	80054c0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80054a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ac:	f383 8811 	msr	BASEPRI, r3
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80054ba:	bf00      	nop
 80054bc:	bf00      	nop
 80054be:	e7fd      	b.n	80054bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10b      	bne.n	80054de <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80054c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80054d8:	bf00      	nop
 80054da:	bf00      	nop
 80054dc:	e7fd      	b.n	80054da <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <xQueueGenericCreateStatic+0x56>
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <xQueueGenericCreateStatic+0x5a>
 80054ea:	2301      	movs	r3, #1
 80054ec:	e000      	b.n	80054f0 <xQueueGenericCreateStatic+0x5c>
 80054ee:	2300      	movs	r3, #0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10b      	bne.n	800550c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80054f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f8:	f383 8811 	msr	BASEPRI, r3
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	623b      	str	r3, [r7, #32]
}
 8005506:	bf00      	nop
 8005508:	bf00      	nop
 800550a:	e7fd      	b.n	8005508 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d102      	bne.n	8005518 <xQueueGenericCreateStatic+0x84>
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <xQueueGenericCreateStatic+0x88>
 8005518:	2301      	movs	r3, #1
 800551a:	e000      	b.n	800551e <xQueueGenericCreateStatic+0x8a>
 800551c:	2300      	movs	r3, #0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10b      	bne.n	800553a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005526:	f383 8811 	msr	BASEPRI, r3
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	61fb      	str	r3, [r7, #28]
}
 8005534:	bf00      	nop
 8005536:	bf00      	nop
 8005538:	e7fd      	b.n	8005536 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800553a:	2348      	movs	r3, #72	@ 0x48
 800553c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	2b48      	cmp	r3, #72	@ 0x48
 8005542:	d00b      	beq.n	800555c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	61bb      	str	r3, [r7, #24]
}
 8005556:	bf00      	nop
 8005558:	bf00      	nop
 800555a:	e7fd      	b.n	8005558 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800555c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00d      	beq.n	8005584 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005570:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	4613      	mov	r3, r2
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	68b9      	ldr	r1, [r7, #8]
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f000 f840 	bl	8005604 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005586:	4618      	mov	r0, r3
 8005588:	3730      	adds	r7, #48	@ 0x30
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800558e:	b580      	push	{r7, lr}
 8005590:	b08a      	sub	sp, #40	@ 0x28
 8005592:	af02      	add	r7, sp, #8
 8005594:	60f8      	str	r0, [r7, #12]
 8005596:	60b9      	str	r1, [r7, #8]
 8005598:	4613      	mov	r3, r2
 800559a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10b      	bne.n	80055ba <xQueueGenericCreate+0x2c>
	__asm volatile
 80055a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a6:	f383 8811 	msr	BASEPRI, r3
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	f3bf 8f4f 	dsb	sy
 80055b2:	613b      	str	r3, [r7, #16]
}
 80055b4:	bf00      	nop
 80055b6:	bf00      	nop
 80055b8:	e7fd      	b.n	80055b6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	fb02 f303 	mul.w	r3, r2, r3
 80055c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	3348      	adds	r3, #72	@ 0x48
 80055c8:	4618      	mov	r0, r3
 80055ca:	f001 fd67 	bl	800709c <pvPortMalloc>
 80055ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d011      	beq.n	80055fa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	3348      	adds	r3, #72	@ 0x48
 80055de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055e8:	79fa      	ldrb	r2, [r7, #7]
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	4613      	mov	r3, r2
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	68b9      	ldr	r1, [r7, #8]
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f000 f805 	bl	8005604 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055fa:	69bb      	ldr	r3, [r7, #24]
	}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3720      	adds	r7, #32
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
 8005610:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d103      	bne.n	8005620 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	e002      	b.n	8005626 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005632:	2101      	movs	r1, #1
 8005634:	69b8      	ldr	r0, [r7, #24]
 8005636:	f7ff fec3 	bl	80053c0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800563a:	bf00      	nop
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005642:	b580      	push	{r7, lr}
 8005644:	b082      	sub	sp, #8
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00e      	beq.n	800566e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005662:	2300      	movs	r3, #0
 8005664:	2200      	movs	r2, #0
 8005666:	2100      	movs	r1, #0
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f837 	bl	80056dc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800566e:	bf00      	nop
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005676:	b580      	push	{r7, lr}
 8005678:	b086      	sub	sp, #24
 800567a:	af00      	add	r7, sp, #0
 800567c:	4603      	mov	r3, r0
 800567e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005680:	2301      	movs	r3, #1
 8005682:	617b      	str	r3, [r7, #20]
 8005684:	2300      	movs	r3, #0
 8005686:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005688:	79fb      	ldrb	r3, [r7, #7]
 800568a:	461a      	mov	r2, r3
 800568c:	6939      	ldr	r1, [r7, #16]
 800568e:	6978      	ldr	r0, [r7, #20]
 8005690:	f7ff ff7d 	bl	800558e <xQueueGenericCreate>
 8005694:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f7ff ffd3 	bl	8005642 <prvInitialiseMutex>

		return xNewQueue;
 800569c:	68fb      	ldr	r3, [r7, #12]
	}
 800569e:	4618      	mov	r0, r3
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b088      	sub	sp, #32
 80056aa:	af02      	add	r7, sp, #8
 80056ac:	4603      	mov	r3, r0
 80056ae:	6039      	str	r1, [r7, #0]
 80056b0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80056b2:	2301      	movs	r3, #1
 80056b4:	617b      	str	r3, [r7, #20]
 80056b6:	2300      	movs	r3, #0
 80056b8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80056ba:	79fb      	ldrb	r3, [r7, #7]
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2200      	movs	r2, #0
 80056c2:	6939      	ldr	r1, [r7, #16]
 80056c4:	6978      	ldr	r0, [r7, #20]
 80056c6:	f7ff fee5 	bl	8005494 <xQueueGenericCreateStatic>
 80056ca:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f7ff ffb8 	bl	8005642 <prvInitialiseMutex>

		return xNewQueue;
 80056d2:	68fb      	ldr	r3, [r7, #12]
	}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3718      	adds	r7, #24
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b08e      	sub	sp, #56	@ 0x38
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
 80056e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80056ea:	2300      	movs	r3, #0
 80056ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80056f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10b      	bne.n	8005710 <xQueueGenericSend+0x34>
	__asm volatile
 80056f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800570a:	bf00      	nop
 800570c:	bf00      	nop
 800570e:	e7fd      	b.n	800570c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d103      	bne.n	800571e <xQueueGenericSend+0x42>
 8005716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <xQueueGenericSend+0x46>
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <xQueueGenericSend+0x48>
 8005722:	2300      	movs	r3, #0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10b      	bne.n	8005740 <xQueueGenericSend+0x64>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800573a:	bf00      	nop
 800573c:	bf00      	nop
 800573e:	e7fd      	b.n	800573c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	2b02      	cmp	r3, #2
 8005744:	d103      	bne.n	800574e <xQueueGenericSend+0x72>
 8005746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800574a:	2b01      	cmp	r3, #1
 800574c:	d101      	bne.n	8005752 <xQueueGenericSend+0x76>
 800574e:	2301      	movs	r3, #1
 8005750:	e000      	b.n	8005754 <xQueueGenericSend+0x78>
 8005752:	2300      	movs	r3, #0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10b      	bne.n	8005770 <xQueueGenericSend+0x94>
	__asm volatile
 8005758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	623b      	str	r3, [r7, #32]
}
 800576a:	bf00      	nop
 800576c:	bf00      	nop
 800576e:	e7fd      	b.n	800576c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005770:	f001 f91c 	bl	80069ac <xTaskGetSchedulerState>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d102      	bne.n	8005780 <xQueueGenericSend+0xa4>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <xQueueGenericSend+0xa8>
 8005780:	2301      	movs	r3, #1
 8005782:	e000      	b.n	8005786 <xQueueGenericSend+0xaa>
 8005784:	2300      	movs	r3, #0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10b      	bne.n	80057a2 <xQueueGenericSend+0xc6>
	__asm volatile
 800578a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	61fb      	str	r3, [r7, #28]
}
 800579c:	bf00      	nop
 800579e:	bf00      	nop
 80057a0:	e7fd      	b.n	800579e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057a2:	f001 fb99 	bl	8006ed8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d302      	bcc.n	80057b8 <xQueueGenericSend+0xdc>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d129      	bne.n	800580c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	68b9      	ldr	r1, [r7, #8]
 80057bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057be:	f000 fac8 	bl	8005d52 <prvCopyDataToQueue>
 80057c2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d010      	beq.n	80057ee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ce:	3324      	adds	r3, #36	@ 0x24
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 ffa1 	bl	8006718 <xTaskRemoveFromEventList>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d013      	beq.n	8005804 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057dc:	4b3f      	ldr	r3, [pc, #252]	@ (80058dc <xQueueGenericSend+0x200>)
 80057de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	e00a      	b.n	8005804 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d007      	beq.n	8005804 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057f4:	4b39      	ldr	r3, [pc, #228]	@ (80058dc <xQueueGenericSend+0x200>)
 80057f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005804:	f001 fb98 	bl	8006f38 <vPortExitCritical>
				return pdPASS;
 8005808:	2301      	movs	r3, #1
 800580a:	e063      	b.n	80058d4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d103      	bne.n	800581a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005812:	f001 fb91 	bl	8006f38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005816:	2300      	movs	r3, #0
 8005818:	e05c      	b.n	80058d4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800581a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800581c:	2b00      	cmp	r3, #0
 800581e:	d106      	bne.n	800582e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005820:	f107 0314 	add.w	r3, r7, #20
 8005824:	4618      	mov	r0, r3
 8005826:	f000 ffdb 	bl	80067e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800582a:	2301      	movs	r3, #1
 800582c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800582e:	f001 fb83 	bl	8006f38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005832:	f000 fd83 	bl	800633c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005836:	f001 fb4f 	bl	8006ed8 <vPortEnterCritical>
 800583a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005840:	b25b      	sxtb	r3, r3
 8005842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005846:	d103      	bne.n	8005850 <xQueueGenericSend+0x174>
 8005848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005852:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005856:	b25b      	sxtb	r3, r3
 8005858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585c:	d103      	bne.n	8005866 <xQueueGenericSend+0x18a>
 800585e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005866:	f001 fb67 	bl	8006f38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800586a:	1d3a      	adds	r2, r7, #4
 800586c:	f107 0314 	add.w	r3, r7, #20
 8005870:	4611      	mov	r1, r2
 8005872:	4618      	mov	r0, r3
 8005874:	f000 ffca 	bl	800680c <xTaskCheckForTimeOut>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d124      	bne.n	80058c8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800587e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005880:	f000 fb5f 	bl	8005f42 <prvIsQueueFull>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d018      	beq.n	80058bc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800588a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588c:	3310      	adds	r3, #16
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	4611      	mov	r1, r2
 8005892:	4618      	mov	r0, r3
 8005894:	f000 ff1a 	bl	80066cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005898:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800589a:	f000 faea 	bl	8005e72 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800589e:	f000 fd5b 	bl	8006358 <xTaskResumeAll>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f47f af7c 	bne.w	80057a2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80058aa:	4b0c      	ldr	r3, [pc, #48]	@ (80058dc <xQueueGenericSend+0x200>)
 80058ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058b0:	601a      	str	r2, [r3, #0]
 80058b2:	f3bf 8f4f 	dsb	sy
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	e772      	b.n	80057a2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80058bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058be:	f000 fad8 	bl	8005e72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058c2:	f000 fd49 	bl	8006358 <xTaskResumeAll>
 80058c6:	e76c      	b.n	80057a2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058ca:	f000 fad2 	bl	8005e72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058ce:	f000 fd43 	bl	8006358 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3738      	adds	r7, #56	@ 0x38
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	e000ed04 	.word	0xe000ed04

080058e0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08e      	sub	sp, #56	@ 0x38
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80058ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10b      	bne.n	800590c <xQueueGiveFromISR+0x2c>
	__asm volatile
 80058f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	623b      	str	r3, [r7, #32]
}
 8005906:	bf00      	nop
 8005908:	bf00      	nop
 800590a:	e7fd      	b.n	8005908 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800590c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00b      	beq.n	800592c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	61fb      	str	r3, [r7, #28]
}
 8005926:	bf00      	nop
 8005928:	bf00      	nop
 800592a:	e7fd      	b.n	8005928 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800592c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d103      	bne.n	800593c <xQueueGiveFromISR+0x5c>
 8005934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d101      	bne.n	8005940 <xQueueGiveFromISR+0x60>
 800593c:	2301      	movs	r3, #1
 800593e:	e000      	b.n	8005942 <xQueueGiveFromISR+0x62>
 8005940:	2300      	movs	r3, #0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10b      	bne.n	800595e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800594a:	f383 8811 	msr	BASEPRI, r3
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	61bb      	str	r3, [r7, #24]
}
 8005958:	bf00      	nop
 800595a:	bf00      	nop
 800595c:	e7fd      	b.n	800595a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800595e:	f001 fb5d 	bl	800701c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005962:	f3ef 8211 	mrs	r2, BASEPRI
 8005966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800596a:	f383 8811 	msr	BASEPRI, r3
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f3bf 8f4f 	dsb	sy
 8005976:	617a      	str	r2, [r7, #20]
 8005978:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800597a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800597c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800597e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005982:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005988:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800598a:	429a      	cmp	r2, r3
 800598c:	d22b      	bcs.n	80059e6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800598e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005990:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005994:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800599a:	1c5a      	adds	r2, r3, #1
 800599c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80059a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80059a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a8:	d112      	bne.n	80059d0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d016      	beq.n	80059e0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b4:	3324      	adds	r3, #36	@ 0x24
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 feae 	bl	8006718 <xTaskRemoveFromEventList>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00e      	beq.n	80059e0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00b      	beq.n	80059e0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	2201      	movs	r2, #1
 80059cc:	601a      	str	r2, [r3, #0]
 80059ce:	e007      	b.n	80059e0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059d4:	3301      	adds	r3, #1
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	b25a      	sxtb	r2, r3
 80059da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80059e0:	2301      	movs	r3, #1
 80059e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80059e4:	e001      	b.n	80059ea <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059e6:	2300      	movs	r3, #0
 80059e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80059ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ec:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80059f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3738      	adds	r7, #56	@ 0x38
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b08e      	sub	sp, #56	@ 0x38
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005a12:	2300      	movs	r3, #0
 8005a14:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10b      	bne.n	8005a34 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a20:	f383 8811 	msr	BASEPRI, r3
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	623b      	str	r3, [r7, #32]
}
 8005a2e:	bf00      	nop
 8005a30:	bf00      	nop
 8005a32:	e7fd      	b.n	8005a30 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00b      	beq.n	8005a54 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	61fb      	str	r3, [r7, #28]
}
 8005a4e:	bf00      	nop
 8005a50:	bf00      	nop
 8005a52:	e7fd      	b.n	8005a50 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a54:	f000 ffaa 	bl	80069ac <xTaskGetSchedulerState>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d102      	bne.n	8005a64 <xQueueSemaphoreTake+0x64>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <xQueueSemaphoreTake+0x68>
 8005a64:	2301      	movs	r3, #1
 8005a66:	e000      	b.n	8005a6a <xQueueSemaphoreTake+0x6a>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10b      	bne.n	8005a86 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	61bb      	str	r3, [r7, #24]
}
 8005a80:	bf00      	nop
 8005a82:	bf00      	nop
 8005a84:	e7fd      	b.n	8005a82 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a86:	f001 fa27 	bl	8006ed8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a8e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d024      	beq.n	8005ae0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a98:	1e5a      	subs	r2, r3, #1
 8005a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a9c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d104      	bne.n	8005ab0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005aa6:	f001 f92d 	bl	8006d04 <pvTaskIncrementMutexHeldCount>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aae:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00f      	beq.n	8005ad8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aba:	3310      	adds	r3, #16
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 fe2b 	bl	8006718 <xTaskRemoveFromEventList>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d007      	beq.n	8005ad8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ac8:	4b54      	ldr	r3, [pc, #336]	@ (8005c1c <xQueueSemaphoreTake+0x21c>)
 8005aca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ad8:	f001 fa2e 	bl	8006f38 <vPortExitCritical>
				return pdPASS;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e098      	b.n	8005c12 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d112      	bne.n	8005b0c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00b      	beq.n	8005b04 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af0:	f383 8811 	msr	BASEPRI, r3
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	f3bf 8f4f 	dsb	sy
 8005afc:	617b      	str	r3, [r7, #20]
}
 8005afe:	bf00      	nop
 8005b00:	bf00      	nop
 8005b02:	e7fd      	b.n	8005b00 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005b04:	f001 fa18 	bl	8006f38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	e082      	b.n	8005c12 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d106      	bne.n	8005b20 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b12:	f107 030c 	add.w	r3, r7, #12
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 fe62 	bl	80067e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b20:	f001 fa0a 	bl	8006f38 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b24:	f000 fc0a 	bl	800633c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b28:	f001 f9d6 	bl	8006ed8 <vPortEnterCritical>
 8005b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b2e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b32:	b25b      	sxtb	r3, r3
 8005b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b38:	d103      	bne.n	8005b42 <xQueueSemaphoreTake+0x142>
 8005b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b48:	b25b      	sxtb	r3, r3
 8005b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4e:	d103      	bne.n	8005b58 <xQueueSemaphoreTake+0x158>
 8005b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b58:	f001 f9ee 	bl	8006f38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b5c:	463a      	mov	r2, r7
 8005b5e:	f107 030c 	add.w	r3, r7, #12
 8005b62:	4611      	mov	r1, r2
 8005b64:	4618      	mov	r0, r3
 8005b66:	f000 fe51 	bl	800680c <xTaskCheckForTimeOut>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d132      	bne.n	8005bd6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b72:	f000 f9d0 	bl	8005f16 <prvIsQueueEmpty>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d026      	beq.n	8005bca <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d109      	bne.n	8005b98 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005b84:	f001 f9a8 	bl	8006ed8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f000 ff2b 	bl	80069e8 <xTaskPriorityInherit>
 8005b92:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005b94:	f001 f9d0 	bl	8006f38 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b9a:	3324      	adds	r3, #36	@ 0x24
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f000 fd93 	bl	80066cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ba6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005ba8:	f000 f963 	bl	8005e72 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005bac:	f000 fbd4 	bl	8006358 <xTaskResumeAll>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f47f af67 	bne.w	8005a86 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005bb8:	4b18      	ldr	r3, [pc, #96]	@ (8005c1c <xQueueSemaphoreTake+0x21c>)
 8005bba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bbe:	601a      	str	r2, [r3, #0]
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	e75d      	b.n	8005a86 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005bca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005bcc:	f000 f951 	bl	8005e72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bd0:	f000 fbc2 	bl	8006358 <xTaskResumeAll>
 8005bd4:	e757      	b.n	8005a86 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005bd6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005bd8:	f000 f94b 	bl	8005e72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bdc:	f000 fbbc 	bl	8006358 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005be0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005be2:	f000 f998 	bl	8005f16 <prvIsQueueEmpty>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f43f af4c 	beq.w	8005a86 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00d      	beq.n	8005c10 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005bf4:	f001 f970 	bl	8006ed8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005bf8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005bfa:	f000 f893 	bl	8005d24 <prvGetDisinheritPriorityAfterTimeout>
 8005bfe:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 ffec 	bl	8006be4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005c0c:	f001 f994 	bl	8006f38 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3738      	adds	r7, #56	@ 0x38
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	e000ed04 	.word	0xe000ed04

08005c20 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08e      	sub	sp, #56	@ 0x38
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10b      	bne.n	8005c4e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c3a:	f383 8811 	msr	BASEPRI, r3
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	623b      	str	r3, [r7, #32]
}
 8005c48:	bf00      	nop
 8005c4a:	bf00      	nop
 8005c4c:	e7fd      	b.n	8005c4a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d103      	bne.n	8005c5c <xQueueReceiveFromISR+0x3c>
 8005c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <xQueueReceiveFromISR+0x40>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e000      	b.n	8005c62 <xQueueReceiveFromISR+0x42>
 8005c60:	2300      	movs	r3, #0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10b      	bne.n	8005c7e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	61fb      	str	r3, [r7, #28]
}
 8005c78:	bf00      	nop
 8005c7a:	bf00      	nop
 8005c7c:	e7fd      	b.n	8005c7a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c7e:	f001 f9cd 	bl	800701c <vPortValidateInterruptPriority>
	__asm volatile
 8005c82:	f3ef 8211 	mrs	r2, BASEPRI
 8005c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8a:	f383 8811 	msr	BASEPRI, r3
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	f3bf 8f4f 	dsb	sy
 8005c96:	61ba      	str	r2, [r7, #24]
 8005c98:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005c9a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d02f      	beq.n	8005d0a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005cb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cb4:	68b9      	ldr	r1, [r7, #8]
 8005cb6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005cb8:	f000 f8b5 	bl	8005e26 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cbe:	1e5a      	subs	r2, r3, #1
 8005cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005cc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ccc:	d112      	bne.n	8005cf4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d016      	beq.n	8005d04 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd8:	3310      	adds	r3, #16
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 fd1c 	bl	8006718 <xTaskRemoveFromEventList>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00e      	beq.n	8005d04 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00b      	beq.n	8005d04 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	601a      	str	r2, [r3, #0]
 8005cf2:	e007      	b.n	8005d04 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	b25a      	sxtb	r2, r3
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005d04:	2301      	movs	r3, #1
 8005d06:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d08:	e001      	b.n	8005d0e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d10:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	f383 8811 	msr	BASEPRI, r3
}
 8005d18:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3738      	adds	r7, #56	@ 0x38
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d006      	beq.n	8005d42 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f1c3 0307 	rsb	r3, r3, #7
 8005d3e:	60fb      	str	r3, [r7, #12]
 8005d40:	e001      	b.n	8005d46 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005d46:	68fb      	ldr	r3, [r7, #12]
	}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bc80      	pop	{r7}
 8005d50:	4770      	bx	lr

08005d52 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b086      	sub	sp, #24
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	60f8      	str	r0, [r7, #12]
 8005d5a:	60b9      	str	r1, [r7, #8]
 8005d5c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d66:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10d      	bne.n	8005d8c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d14d      	bne.n	8005e14 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 fea9 	bl	8006ad4 <xTaskPriorityDisinherit>
 8005d82:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	609a      	str	r2, [r3, #8]
 8005d8a:	e043      	b.n	8005e14 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d119      	bne.n	8005dc6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6858      	ldr	r0, [r3, #4]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	68b9      	ldr	r1, [r7, #8]
 8005d9e:	f002 fc9c 	bl	80086da <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	685a      	ldr	r2, [r3, #4]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005daa:	441a      	add	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d32b      	bcc.n	8005e14 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	605a      	str	r2, [r3, #4]
 8005dc4:	e026      	b.n	8005e14 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	68d8      	ldr	r0, [r3, #12]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dce:	461a      	mov	r2, r3
 8005dd0:	68b9      	ldr	r1, [r7, #8]
 8005dd2:	f002 fc82 	bl	80086da <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dde:	425b      	negs	r3, r3
 8005de0:	441a      	add	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	68da      	ldr	r2, [r3, #12]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d207      	bcs.n	8005e02 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	689a      	ldr	r2, [r3, #8]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfa:	425b      	negs	r3, r3
 8005dfc:	441a      	add	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d105      	bne.n	8005e14 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d002      	beq.n	8005e14 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	3b01      	subs	r3, #1
 8005e12:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005e1c:	697b      	ldr	r3, [r7, #20]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3718      	adds	r7, #24
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b082      	sub	sp, #8
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d018      	beq.n	8005e6a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e40:	441a      	add	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68da      	ldr	r2, [r3, #12]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d303      	bcc.n	8005e5a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68d9      	ldr	r1, [r3, #12]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e62:	461a      	mov	r2, r3
 8005e64:	6838      	ldr	r0, [r7, #0]
 8005e66:	f002 fc38 	bl	80086da <memcpy>
	}
}
 8005e6a:	bf00      	nop
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b084      	sub	sp, #16
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005e7a:	f001 f82d 	bl	8006ed8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e84:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e86:	e011      	b.n	8005eac <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d012      	beq.n	8005eb6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	3324      	adds	r3, #36	@ 0x24
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 fc3f 	bl	8006718 <xTaskRemoveFromEventList>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d001      	beq.n	8005ea4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ea0:	f000 fd18 	bl	80068d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ea4:	7bfb      	ldrb	r3, [r7, #15]
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	dce9      	bgt.n	8005e88 <prvUnlockQueue+0x16>
 8005eb4:	e000      	b.n	8005eb8 <prvUnlockQueue+0x46>
					break;
 8005eb6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	22ff      	movs	r2, #255	@ 0xff
 8005ebc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005ec0:	f001 f83a 	bl	8006f38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005ec4:	f001 f808 	bl	8006ed8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ece:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ed0:	e011      	b.n	8005ef6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d012      	beq.n	8005f00 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	3310      	adds	r3, #16
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 fc1a 	bl	8006718 <xTaskRemoveFromEventList>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005eea:	f000 fcf3 	bl	80068d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005eee:	7bbb      	ldrb	r3, [r7, #14]
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ef6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	dce9      	bgt.n	8005ed2 <prvUnlockQueue+0x60>
 8005efe:	e000      	b.n	8005f02 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f00:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	22ff      	movs	r2, #255	@ 0xff
 8005f06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005f0a:	f001 f815 	bl	8006f38 <vPortExitCritical>
}
 8005f0e:	bf00      	nop
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b084      	sub	sp, #16
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f1e:	f000 ffdb 	bl	8006ed8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d102      	bne.n	8005f30 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	60fb      	str	r3, [r7, #12]
 8005f2e:	e001      	b.n	8005f34 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f30:	2300      	movs	r3, #0
 8005f32:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f34:	f001 f800 	bl	8006f38 <vPortExitCritical>

	return xReturn;
 8005f38:	68fb      	ldr	r3, [r7, #12]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b084      	sub	sp, #16
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f4a:	f000 ffc5 	bl	8006ed8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d102      	bne.n	8005f60 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	60fb      	str	r3, [r7, #12]
 8005f5e:	e001      	b.n	8005f64 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f64:	f000 ffe8 	bl	8006f38 <vPortExitCritical>

	return xReturn;
 8005f68:	68fb      	ldr	r3, [r7, #12]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b08e      	sub	sp, #56	@ 0x38
 8005f76:	af04      	add	r7, sp, #16
 8005f78:	60f8      	str	r0, [r7, #12]
 8005f7a:	60b9      	str	r1, [r7, #8]
 8005f7c:	607a      	str	r2, [r7, #4]
 8005f7e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10b      	bne.n	8005f9e <xTaskCreateStatic+0x2c>
	__asm volatile
 8005f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8a:	f383 8811 	msr	BASEPRI, r3
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	f3bf 8f4f 	dsb	sy
 8005f96:	623b      	str	r3, [r7, #32]
}
 8005f98:	bf00      	nop
 8005f9a:	bf00      	nop
 8005f9c:	e7fd      	b.n	8005f9a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10b      	bne.n	8005fbc <xTaskCreateStatic+0x4a>
	__asm volatile
 8005fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa8:	f383 8811 	msr	BASEPRI, r3
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	61fb      	str	r3, [r7, #28]
}
 8005fb6:	bf00      	nop
 8005fb8:	bf00      	nop
 8005fba:	e7fd      	b.n	8005fb8 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005fbc:	23a0      	movs	r3, #160	@ 0xa0
 8005fbe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	2ba0      	cmp	r3, #160	@ 0xa0
 8005fc4:	d00b      	beq.n	8005fde <xTaskCreateStatic+0x6c>
	__asm volatile
 8005fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fca:	f383 8811 	msr	BASEPRI, r3
 8005fce:	f3bf 8f6f 	isb	sy
 8005fd2:	f3bf 8f4f 	dsb	sy
 8005fd6:	61bb      	str	r3, [r7, #24]
}
 8005fd8:	bf00      	nop
 8005fda:	bf00      	nop
 8005fdc:	e7fd      	b.n	8005fda <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005fde:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d01e      	beq.n	8006024 <xTaskCreateStatic+0xb2>
 8005fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d01b      	beq.n	8006024 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fee:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ff4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ffe:	2300      	movs	r3, #0
 8006000:	9303      	str	r3, [sp, #12]
 8006002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006004:	9302      	str	r3, [sp, #8]
 8006006:	f107 0314 	add.w	r3, r7, #20
 800600a:	9301      	str	r3, [sp, #4]
 800600c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	68b9      	ldr	r1, [r7, #8]
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f000 f850 	bl	80060bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800601c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800601e:	f000 f8ed 	bl	80061fc <prvAddNewTaskToReadyList>
 8006022:	e001      	b.n	8006028 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006024:	2300      	movs	r3, #0
 8006026:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006028:	697b      	ldr	r3, [r7, #20]
	}
 800602a:	4618      	mov	r0, r3
 800602c:	3728      	adds	r7, #40	@ 0x28
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006032:	b580      	push	{r7, lr}
 8006034:	b08c      	sub	sp, #48	@ 0x30
 8006036:	af04      	add	r7, sp, #16
 8006038:	60f8      	str	r0, [r7, #12]
 800603a:	60b9      	str	r1, [r7, #8]
 800603c:	603b      	str	r3, [r7, #0]
 800603e:	4613      	mov	r3, r2
 8006040:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006042:	88fb      	ldrh	r3, [r7, #6]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4618      	mov	r0, r3
 8006048:	f001 f828 	bl	800709c <pvPortMalloc>
 800604c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00e      	beq.n	8006072 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006054:	20a0      	movs	r0, #160	@ 0xa0
 8006056:	f001 f821 	bl	800709c <pvPortMalloc>
 800605a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	631a      	str	r2, [r3, #48]	@ 0x30
 8006068:	e005      	b.n	8006076 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800606a:	6978      	ldr	r0, [r7, #20]
 800606c:	f001 f8e4 	bl	8007238 <vPortFree>
 8006070:	e001      	b.n	8006076 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006072:	2300      	movs	r3, #0
 8006074:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d017      	beq.n	80060ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006084:	88fa      	ldrh	r2, [r7, #6]
 8006086:	2300      	movs	r3, #0
 8006088:	9303      	str	r3, [sp, #12]
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	9302      	str	r3, [sp, #8]
 800608e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006090:	9301      	str	r3, [sp, #4]
 8006092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	68b9      	ldr	r1, [r7, #8]
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 f80e 	bl	80060bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060a0:	69f8      	ldr	r0, [r7, #28]
 80060a2:	f000 f8ab 	bl	80061fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80060a6:	2301      	movs	r3, #1
 80060a8:	61bb      	str	r3, [r7, #24]
 80060aa:	e002      	b.n	80060b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80060ac:	f04f 33ff 	mov.w	r3, #4294967295
 80060b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80060b2:	69bb      	ldr	r3, [r7, #24]
	}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3720      	adds	r7, #32
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b088      	sub	sp, #32
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
 80060c8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80060ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060d4:	3b01      	subs	r3, #1
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4413      	add	r3, r2
 80060da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	f023 0307 	bic.w	r3, r3, #7
 80060e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00b      	beq.n	8006106 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	617b      	str	r3, [r7, #20]
}
 8006100:	bf00      	nop
 8006102:	bf00      	nop
 8006104:	e7fd      	b.n	8006102 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d01f      	beq.n	800614c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800610c:	2300      	movs	r3, #0
 800610e:	61fb      	str	r3, [r7, #28]
 8006110:	e012      	b.n	8006138 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	4413      	add	r3, r2
 8006118:	7819      	ldrb	r1, [r3, #0]
 800611a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	4413      	add	r3, r2
 8006120:	3334      	adds	r3, #52	@ 0x34
 8006122:	460a      	mov	r2, r1
 8006124:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	4413      	add	r3, r2
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d006      	beq.n	8006140 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	3301      	adds	r3, #1
 8006136:	61fb      	str	r3, [r7, #28]
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	2b0f      	cmp	r3, #15
 800613c:	d9e9      	bls.n	8006112 <prvInitialiseNewTask+0x56>
 800613e:	e000      	b.n	8006142 <prvInitialiseNewTask+0x86>
			{
				break;
 8006140:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800614a:	e003      	b.n	8006154 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800614c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006156:	2b06      	cmp	r3, #6
 8006158:	d901      	bls.n	800615e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800615a:	2306      	movs	r3, #6
 800615c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800615e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006160:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006162:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006166:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006168:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800616a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616c:	2200      	movs	r2, #0
 800616e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006172:	3304      	adds	r3, #4
 8006174:	4618      	mov	r0, r3
 8006176:	f7ff f892 	bl	800529e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800617a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617c:	3318      	adds	r3, #24
 800617e:	4618      	mov	r0, r3
 8006180:	f7ff f88d 	bl	800529e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006186:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006188:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800618a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618c:	f1c3 0207 	rsb	r2, r3, #7
 8006190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006192:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006198:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800619a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619c:	2200      	movs	r2, #0
 800619e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80061aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ac:	334c      	adds	r3, #76	@ 0x4c
 80061ae:	224c      	movs	r2, #76	@ 0x4c
 80061b0:	2100      	movs	r1, #0
 80061b2:	4618      	mov	r0, r3
 80061b4:	f002 f9fc 	bl	80085b0 <memset>
 80061b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ba:	4a0d      	ldr	r2, [pc, #52]	@ (80061f0 <prvInitialiseNewTask+0x134>)
 80061bc:	651a      	str	r2, [r3, #80]	@ 0x50
 80061be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c0:	4a0c      	ldr	r2, [pc, #48]	@ (80061f4 <prvInitialiseNewTask+0x138>)
 80061c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80061c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c6:	4a0c      	ldr	r2, [pc, #48]	@ (80061f8 <prvInitialiseNewTask+0x13c>)
 80061c8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	68f9      	ldr	r1, [r7, #12]
 80061ce:	69b8      	ldr	r0, [r7, #24]
 80061d0:	f000 fe12 	bl	8006df8 <pxPortInitialiseStack>
 80061d4:	4602      	mov	r2, r0
 80061d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80061da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d002      	beq.n	80061e6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80061e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061e6:	bf00      	nop
 80061e8:	3720      	adds	r7, #32
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	20002530 	.word	0x20002530
 80061f4:	20002598 	.word	0x20002598
 80061f8:	20002600 	.word	0x20002600

080061fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006204:	f000 fe68 	bl	8006ed8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006208:	4b2a      	ldr	r3, [pc, #168]	@ (80062b4 <prvAddNewTaskToReadyList+0xb8>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3301      	adds	r3, #1
 800620e:	4a29      	ldr	r2, [pc, #164]	@ (80062b4 <prvAddNewTaskToReadyList+0xb8>)
 8006210:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006212:	4b29      	ldr	r3, [pc, #164]	@ (80062b8 <prvAddNewTaskToReadyList+0xbc>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d109      	bne.n	800622e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800621a:	4a27      	ldr	r2, [pc, #156]	@ (80062b8 <prvAddNewTaskToReadyList+0xbc>)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006220:	4b24      	ldr	r3, [pc, #144]	@ (80062b4 <prvAddNewTaskToReadyList+0xb8>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d110      	bne.n	800624a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006228:	f000 fb60 	bl	80068ec <prvInitialiseTaskLists>
 800622c:	e00d      	b.n	800624a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800622e:	4b23      	ldr	r3, [pc, #140]	@ (80062bc <prvAddNewTaskToReadyList+0xc0>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d109      	bne.n	800624a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006236:	4b20      	ldr	r3, [pc, #128]	@ (80062b8 <prvAddNewTaskToReadyList+0xbc>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006240:	429a      	cmp	r2, r3
 8006242:	d802      	bhi.n	800624a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006244:	4a1c      	ldr	r2, [pc, #112]	@ (80062b8 <prvAddNewTaskToReadyList+0xbc>)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800624a:	4b1d      	ldr	r3, [pc, #116]	@ (80062c0 <prvAddNewTaskToReadyList+0xc4>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3301      	adds	r3, #1
 8006250:	4a1b      	ldr	r2, [pc, #108]	@ (80062c0 <prvAddNewTaskToReadyList+0xc4>)
 8006252:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006258:	2201      	movs	r2, #1
 800625a:	409a      	lsls	r2, r3
 800625c:	4b19      	ldr	r3, [pc, #100]	@ (80062c4 <prvAddNewTaskToReadyList+0xc8>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4313      	orrs	r3, r2
 8006262:	4a18      	ldr	r2, [pc, #96]	@ (80062c4 <prvAddNewTaskToReadyList+0xc8>)
 8006264:	6013      	str	r3, [r2, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800626a:	4613      	mov	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4413      	add	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4a15      	ldr	r2, [pc, #84]	@ (80062c8 <prvAddNewTaskToReadyList+0xcc>)
 8006274:	441a      	add	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	3304      	adds	r3, #4
 800627a:	4619      	mov	r1, r3
 800627c:	4610      	mov	r0, r2
 800627e:	f7ff f81a 	bl	80052b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006282:	f000 fe59 	bl	8006f38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006286:	4b0d      	ldr	r3, [pc, #52]	@ (80062bc <prvAddNewTaskToReadyList+0xc0>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00e      	beq.n	80062ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800628e:	4b0a      	ldr	r3, [pc, #40]	@ (80062b8 <prvAddNewTaskToReadyList+0xbc>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006298:	429a      	cmp	r2, r3
 800629a:	d207      	bcs.n	80062ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800629c:	4b0b      	ldr	r3, [pc, #44]	@ (80062cc <prvAddNewTaskToReadyList+0xd0>)
 800629e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062a2:	601a      	str	r2, [r3, #0]
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062ac:	bf00      	nop
 80062ae:	3708      	adds	r7, #8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	200004e0 	.word	0x200004e0
 80062b8:	200003e4 	.word	0x200003e4
 80062bc:	200004ec 	.word	0x200004ec
 80062c0:	200004fc 	.word	0x200004fc
 80062c4:	200004e8 	.word	0x200004e8
 80062c8:	200003e8 	.word	0x200003e8
 80062cc:	e000ed04 	.word	0xe000ed04

080062d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80062d8:	2300      	movs	r3, #0
 80062da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d018      	beq.n	8006314 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80062e2:	4b14      	ldr	r3, [pc, #80]	@ (8006334 <vTaskDelay+0x64>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00b      	beq.n	8006302 <vTaskDelay+0x32>
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	60bb      	str	r3, [r7, #8]
}
 80062fc:	bf00      	nop
 80062fe:	bf00      	nop
 8006300:	e7fd      	b.n	80062fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006302:	f000 f81b 	bl	800633c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006306:	2100      	movs	r1, #0
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fd0f 	bl	8006d2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800630e:	f000 f823 	bl	8006358 <xTaskResumeAll>
 8006312:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d107      	bne.n	800632a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800631a:	4b07      	ldr	r3, [pc, #28]	@ (8006338 <vTaskDelay+0x68>)
 800631c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800632a:	bf00      	nop
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	20000504 	.word	0x20000504
 8006338:	e000ed04 	.word	0xe000ed04

0800633c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800633c:	b480      	push	{r7}
 800633e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006340:	4b04      	ldr	r3, [pc, #16]	@ (8006354 <vTaskSuspendAll+0x18>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	3301      	adds	r3, #1
 8006346:	4a03      	ldr	r2, [pc, #12]	@ (8006354 <vTaskSuspendAll+0x18>)
 8006348:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800634a:	bf00      	nop
 800634c:	46bd      	mov	sp, r7
 800634e:	bc80      	pop	{r7}
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	20000504 	.word	0x20000504

08006358 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800635e:	2300      	movs	r3, #0
 8006360:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006362:	2300      	movs	r3, #0
 8006364:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006366:	4b42      	ldr	r3, [pc, #264]	@ (8006470 <xTaskResumeAll+0x118>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10b      	bne.n	8006386 <xTaskResumeAll+0x2e>
	__asm volatile
 800636e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	603b      	str	r3, [r7, #0]
}
 8006380:	bf00      	nop
 8006382:	bf00      	nop
 8006384:	e7fd      	b.n	8006382 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006386:	f000 fda7 	bl	8006ed8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800638a:	4b39      	ldr	r3, [pc, #228]	@ (8006470 <xTaskResumeAll+0x118>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3b01      	subs	r3, #1
 8006390:	4a37      	ldr	r2, [pc, #220]	@ (8006470 <xTaskResumeAll+0x118>)
 8006392:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006394:	4b36      	ldr	r3, [pc, #216]	@ (8006470 <xTaskResumeAll+0x118>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d161      	bne.n	8006460 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800639c:	4b35      	ldr	r3, [pc, #212]	@ (8006474 <xTaskResumeAll+0x11c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d05d      	beq.n	8006460 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063a4:	e02e      	b.n	8006404 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063a6:	4b34      	ldr	r3, [pc, #208]	@ (8006478 <xTaskResumeAll+0x120>)
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	3318      	adds	r3, #24
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fe ffda 	bl	800536c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	3304      	adds	r3, #4
 80063bc:	4618      	mov	r0, r3
 80063be:	f7fe ffd5 	bl	800536c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c6:	2201      	movs	r2, #1
 80063c8:	409a      	lsls	r2, r3
 80063ca:	4b2c      	ldr	r3, [pc, #176]	@ (800647c <xTaskResumeAll+0x124>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	4a2a      	ldr	r2, [pc, #168]	@ (800647c <xTaskResumeAll+0x124>)
 80063d2:	6013      	str	r3, [r2, #0]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063d8:	4613      	mov	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	4413      	add	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4a27      	ldr	r2, [pc, #156]	@ (8006480 <xTaskResumeAll+0x128>)
 80063e2:	441a      	add	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	3304      	adds	r3, #4
 80063e8:	4619      	mov	r1, r3
 80063ea:	4610      	mov	r0, r2
 80063ec:	f7fe ff63 	bl	80052b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063f4:	4b23      	ldr	r3, [pc, #140]	@ (8006484 <xTaskResumeAll+0x12c>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d302      	bcc.n	8006404 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80063fe:	4b22      	ldr	r3, [pc, #136]	@ (8006488 <xTaskResumeAll+0x130>)
 8006400:	2201      	movs	r2, #1
 8006402:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006404:	4b1c      	ldr	r3, [pc, #112]	@ (8006478 <xTaskResumeAll+0x120>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1cc      	bne.n	80063a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006412:	f000 faab 	bl	800696c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006416:	4b1d      	ldr	r3, [pc, #116]	@ (800648c <xTaskResumeAll+0x134>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d010      	beq.n	8006444 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006422:	f000 f837 	bl	8006494 <xTaskIncrementTick>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d002      	beq.n	8006432 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800642c:	4b16      	ldr	r3, [pc, #88]	@ (8006488 <xTaskResumeAll+0x130>)
 800642e:	2201      	movs	r2, #1
 8006430:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	3b01      	subs	r3, #1
 8006436:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1f1      	bne.n	8006422 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800643e:	4b13      	ldr	r3, [pc, #76]	@ (800648c <xTaskResumeAll+0x134>)
 8006440:	2200      	movs	r2, #0
 8006442:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006444:	4b10      	ldr	r3, [pc, #64]	@ (8006488 <xTaskResumeAll+0x130>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d009      	beq.n	8006460 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800644c:	2301      	movs	r3, #1
 800644e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006450:	4b0f      	ldr	r3, [pc, #60]	@ (8006490 <xTaskResumeAll+0x138>)
 8006452:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006456:	601a      	str	r2, [r3, #0]
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006460:	f000 fd6a 	bl	8006f38 <vPortExitCritical>

	return xAlreadyYielded;
 8006464:	68bb      	ldr	r3, [r7, #8]
}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	20000504 	.word	0x20000504
 8006474:	200004e0 	.word	0x200004e0
 8006478:	200004a4 	.word	0x200004a4
 800647c:	200004e8 	.word	0x200004e8
 8006480:	200003e8 	.word	0x200003e8
 8006484:	200003e4 	.word	0x200003e4
 8006488:	200004f4 	.word	0x200004f4
 800648c:	200004f0 	.word	0x200004f0
 8006490:	e000ed04 	.word	0xe000ed04

08006494 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800649a:	2300      	movs	r3, #0
 800649c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800649e:	4b4f      	ldr	r3, [pc, #316]	@ (80065dc <xTaskIncrementTick+0x148>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f040 808f 	bne.w	80065c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80064a8:	4b4d      	ldr	r3, [pc, #308]	@ (80065e0 <xTaskIncrementTick+0x14c>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3301      	adds	r3, #1
 80064ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80064b0:	4a4b      	ldr	r2, [pc, #300]	@ (80065e0 <xTaskIncrementTick+0x14c>)
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d121      	bne.n	8006500 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80064bc:	4b49      	ldr	r3, [pc, #292]	@ (80065e4 <xTaskIncrementTick+0x150>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00b      	beq.n	80064de <xTaskIncrementTick+0x4a>
	__asm volatile
 80064c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	603b      	str	r3, [r7, #0]
}
 80064d8:	bf00      	nop
 80064da:	bf00      	nop
 80064dc:	e7fd      	b.n	80064da <xTaskIncrementTick+0x46>
 80064de:	4b41      	ldr	r3, [pc, #260]	@ (80065e4 <xTaskIncrementTick+0x150>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	60fb      	str	r3, [r7, #12]
 80064e4:	4b40      	ldr	r3, [pc, #256]	@ (80065e8 <xTaskIncrementTick+0x154>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a3e      	ldr	r2, [pc, #248]	@ (80065e4 <xTaskIncrementTick+0x150>)
 80064ea:	6013      	str	r3, [r2, #0]
 80064ec:	4a3e      	ldr	r2, [pc, #248]	@ (80065e8 <xTaskIncrementTick+0x154>)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6013      	str	r3, [r2, #0]
 80064f2:	4b3e      	ldr	r3, [pc, #248]	@ (80065ec <xTaskIncrementTick+0x158>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3301      	adds	r3, #1
 80064f8:	4a3c      	ldr	r2, [pc, #240]	@ (80065ec <xTaskIncrementTick+0x158>)
 80064fa:	6013      	str	r3, [r2, #0]
 80064fc:	f000 fa36 	bl	800696c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006500:	4b3b      	ldr	r3, [pc, #236]	@ (80065f0 <xTaskIncrementTick+0x15c>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	429a      	cmp	r2, r3
 8006508:	d348      	bcc.n	800659c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800650a:	4b36      	ldr	r3, [pc, #216]	@ (80065e4 <xTaskIncrementTick+0x150>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d104      	bne.n	800651e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006514:	4b36      	ldr	r3, [pc, #216]	@ (80065f0 <xTaskIncrementTick+0x15c>)
 8006516:	f04f 32ff 	mov.w	r2, #4294967295
 800651a:	601a      	str	r2, [r3, #0]
					break;
 800651c:	e03e      	b.n	800659c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800651e:	4b31      	ldr	r3, [pc, #196]	@ (80065e4 <xTaskIncrementTick+0x150>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	429a      	cmp	r2, r3
 8006534:	d203      	bcs.n	800653e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006536:	4a2e      	ldr	r2, [pc, #184]	@ (80065f0 <xTaskIncrementTick+0x15c>)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800653c:	e02e      	b.n	800659c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	3304      	adds	r3, #4
 8006542:	4618      	mov	r0, r3
 8006544:	f7fe ff12 	bl	800536c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654c:	2b00      	cmp	r3, #0
 800654e:	d004      	beq.n	800655a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	3318      	adds	r3, #24
 8006554:	4618      	mov	r0, r3
 8006556:	f7fe ff09 	bl	800536c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800655e:	2201      	movs	r2, #1
 8006560:	409a      	lsls	r2, r3
 8006562:	4b24      	ldr	r3, [pc, #144]	@ (80065f4 <xTaskIncrementTick+0x160>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4313      	orrs	r3, r2
 8006568:	4a22      	ldr	r2, [pc, #136]	@ (80065f4 <xTaskIncrementTick+0x160>)
 800656a:	6013      	str	r3, [r2, #0]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006570:	4613      	mov	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4a1f      	ldr	r2, [pc, #124]	@ (80065f8 <xTaskIncrementTick+0x164>)
 800657a:	441a      	add	r2, r3
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	3304      	adds	r3, #4
 8006580:	4619      	mov	r1, r3
 8006582:	4610      	mov	r0, r2
 8006584:	f7fe fe97 	bl	80052b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800658c:	4b1b      	ldr	r3, [pc, #108]	@ (80065fc <xTaskIncrementTick+0x168>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006592:	429a      	cmp	r2, r3
 8006594:	d3b9      	bcc.n	800650a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006596:	2301      	movs	r3, #1
 8006598:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800659a:	e7b6      	b.n	800650a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800659c:	4b17      	ldr	r3, [pc, #92]	@ (80065fc <xTaskIncrementTick+0x168>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065a2:	4915      	ldr	r1, [pc, #84]	@ (80065f8 <xTaskIncrementTick+0x164>)
 80065a4:	4613      	mov	r3, r2
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	4413      	add	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	440b      	add	r3, r1
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d901      	bls.n	80065b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80065b4:	2301      	movs	r3, #1
 80065b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80065b8:	4b11      	ldr	r3, [pc, #68]	@ (8006600 <xTaskIncrementTick+0x16c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d007      	beq.n	80065d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80065c0:	2301      	movs	r3, #1
 80065c2:	617b      	str	r3, [r7, #20]
 80065c4:	e004      	b.n	80065d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80065c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006604 <xTaskIncrementTick+0x170>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3301      	adds	r3, #1
 80065cc:	4a0d      	ldr	r2, [pc, #52]	@ (8006604 <xTaskIncrementTick+0x170>)
 80065ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80065d0:	697b      	ldr	r3, [r7, #20]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3718      	adds	r7, #24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	20000504 	.word	0x20000504
 80065e0:	200004e4 	.word	0x200004e4
 80065e4:	2000049c 	.word	0x2000049c
 80065e8:	200004a0 	.word	0x200004a0
 80065ec:	200004f8 	.word	0x200004f8
 80065f0:	20000500 	.word	0x20000500
 80065f4:	200004e8 	.word	0x200004e8
 80065f8:	200003e8 	.word	0x200003e8
 80065fc:	200003e4 	.word	0x200003e4
 8006600:	200004f4 	.word	0x200004f4
 8006604:	200004f0 	.word	0x200004f0

08006608 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006608:	b480      	push	{r7}
 800660a:	b087      	sub	sp, #28
 800660c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800660e:	4b29      	ldr	r3, [pc, #164]	@ (80066b4 <vTaskSwitchContext+0xac>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006616:	4b28      	ldr	r3, [pc, #160]	@ (80066b8 <vTaskSwitchContext+0xb0>)
 8006618:	2201      	movs	r2, #1
 800661a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800661c:	e045      	b.n	80066aa <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800661e:	4b26      	ldr	r3, [pc, #152]	@ (80066b8 <vTaskSwitchContext+0xb0>)
 8006620:	2200      	movs	r2, #0
 8006622:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006624:	4b25      	ldr	r3, [pc, #148]	@ (80066bc <vTaskSwitchContext+0xb4>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	fab3 f383 	clz	r3, r3
 8006630:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006632:	7afb      	ldrb	r3, [r7, #11]
 8006634:	f1c3 031f 	rsb	r3, r3, #31
 8006638:	617b      	str	r3, [r7, #20]
 800663a:	4921      	ldr	r1, [pc, #132]	@ (80066c0 <vTaskSwitchContext+0xb8>)
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	4613      	mov	r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4413      	add	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	440b      	add	r3, r1
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10b      	bne.n	8006666 <vTaskSwitchContext+0x5e>
	__asm volatile
 800664e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	607b      	str	r3, [r7, #4]
}
 8006660:	bf00      	nop
 8006662:	bf00      	nop
 8006664:	e7fd      	b.n	8006662 <vTaskSwitchContext+0x5a>
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	4613      	mov	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4413      	add	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4a13      	ldr	r2, [pc, #76]	@ (80066c0 <vTaskSwitchContext+0xb8>)
 8006672:	4413      	add	r3, r2
 8006674:	613b      	str	r3, [r7, #16]
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	605a      	str	r2, [r3, #4]
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	3308      	adds	r3, #8
 8006688:	429a      	cmp	r2, r3
 800668a:	d104      	bne.n	8006696 <vTaskSwitchContext+0x8e>
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	605a      	str	r2, [r3, #4]
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	4a09      	ldr	r2, [pc, #36]	@ (80066c4 <vTaskSwitchContext+0xbc>)
 800669e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80066a0:	4b08      	ldr	r3, [pc, #32]	@ (80066c4 <vTaskSwitchContext+0xbc>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	334c      	adds	r3, #76	@ 0x4c
 80066a6:	4a08      	ldr	r2, [pc, #32]	@ (80066c8 <vTaskSwitchContext+0xc0>)
 80066a8:	6013      	str	r3, [r2, #0]
}
 80066aa:	bf00      	nop
 80066ac:	371c      	adds	r7, #28
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bc80      	pop	{r7}
 80066b2:	4770      	bx	lr
 80066b4:	20000504 	.word	0x20000504
 80066b8:	200004f4 	.word	0x200004f4
 80066bc:	200004e8 	.word	0x200004e8
 80066c0:	200003e8 	.word	0x200003e8
 80066c4:	200003e4 	.word	0x200003e4
 80066c8:	2000001c 	.word	0x2000001c

080066cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10b      	bne.n	80066f4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80066dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e0:	f383 8811 	msr	BASEPRI, r3
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	60fb      	str	r3, [r7, #12]
}
 80066ee:	bf00      	nop
 80066f0:	bf00      	nop
 80066f2:	e7fd      	b.n	80066f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066f4:	4b07      	ldr	r3, [pc, #28]	@ (8006714 <vTaskPlaceOnEventList+0x48>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	3318      	adds	r3, #24
 80066fa:	4619      	mov	r1, r3
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f7fe fdfd 	bl	80052fc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006702:	2101      	movs	r1, #1
 8006704:	6838      	ldr	r0, [r7, #0]
 8006706:	f000 fb11 	bl	8006d2c <prvAddCurrentTaskToDelayedList>
}
 800670a:	bf00      	nop
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	200003e4 	.word	0x200003e4

08006718 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10b      	bne.n	8006746 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	60fb      	str	r3, [r7, #12]
}
 8006740:	bf00      	nop
 8006742:	bf00      	nop
 8006744:	e7fd      	b.n	8006742 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	3318      	adds	r3, #24
 800674a:	4618      	mov	r0, r3
 800674c:	f7fe fe0e 	bl	800536c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006750:	4b1d      	ldr	r3, [pc, #116]	@ (80067c8 <xTaskRemoveFromEventList+0xb0>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d11c      	bne.n	8006792 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	3304      	adds	r3, #4
 800675c:	4618      	mov	r0, r3
 800675e:	f7fe fe05 	bl	800536c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006766:	2201      	movs	r2, #1
 8006768:	409a      	lsls	r2, r3
 800676a:	4b18      	ldr	r3, [pc, #96]	@ (80067cc <xTaskRemoveFromEventList+0xb4>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4313      	orrs	r3, r2
 8006770:	4a16      	ldr	r2, [pc, #88]	@ (80067cc <xTaskRemoveFromEventList+0xb4>)
 8006772:	6013      	str	r3, [r2, #0]
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006778:	4613      	mov	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4a13      	ldr	r2, [pc, #76]	@ (80067d0 <xTaskRemoveFromEventList+0xb8>)
 8006782:	441a      	add	r2, r3
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	3304      	adds	r3, #4
 8006788:	4619      	mov	r1, r3
 800678a:	4610      	mov	r0, r2
 800678c:	f7fe fd93 	bl	80052b6 <vListInsertEnd>
 8006790:	e005      	b.n	800679e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	3318      	adds	r3, #24
 8006796:	4619      	mov	r1, r3
 8006798:	480e      	ldr	r0, [pc, #56]	@ (80067d4 <xTaskRemoveFromEventList+0xbc>)
 800679a:	f7fe fd8c 	bl	80052b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067a2:	4b0d      	ldr	r3, [pc, #52]	@ (80067d8 <xTaskRemoveFromEventList+0xc0>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d905      	bls.n	80067b8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80067ac:	2301      	movs	r3, #1
 80067ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80067b0:	4b0a      	ldr	r3, [pc, #40]	@ (80067dc <xTaskRemoveFromEventList+0xc4>)
 80067b2:	2201      	movs	r2, #1
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	e001      	b.n	80067bc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80067b8:	2300      	movs	r3, #0
 80067ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80067bc:	697b      	ldr	r3, [r7, #20]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3718      	adds	r7, #24
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	20000504 	.word	0x20000504
 80067cc:	200004e8 	.word	0x200004e8
 80067d0:	200003e8 	.word	0x200003e8
 80067d4:	200004a4 	.word	0x200004a4
 80067d8:	200003e4 	.word	0x200003e4
 80067dc:	200004f4 	.word	0x200004f4

080067e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067e8:	4b06      	ldr	r3, [pc, #24]	@ (8006804 <vTaskInternalSetTimeOutState+0x24>)
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80067f0:	4b05      	ldr	r3, [pc, #20]	@ (8006808 <vTaskInternalSetTimeOutState+0x28>)
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	605a      	str	r2, [r3, #4]
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bc80      	pop	{r7}
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	200004f8 	.word	0x200004f8
 8006808:	200004e4 	.word	0x200004e4

0800680c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b088      	sub	sp, #32
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10b      	bne.n	8006834 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800681c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	613b      	str	r3, [r7, #16]
}
 800682e:	bf00      	nop
 8006830:	bf00      	nop
 8006832:	e7fd      	b.n	8006830 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10b      	bne.n	8006852 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800683a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	60fb      	str	r3, [r7, #12]
}
 800684c:	bf00      	nop
 800684e:	bf00      	nop
 8006850:	e7fd      	b.n	800684e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006852:	f000 fb41 	bl	8006ed8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006856:	4b1d      	ldr	r3, [pc, #116]	@ (80068cc <xTaskCheckForTimeOut+0xc0>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	69ba      	ldr	r2, [r7, #24]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686e:	d102      	bne.n	8006876 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006870:	2300      	movs	r3, #0
 8006872:	61fb      	str	r3, [r7, #28]
 8006874:	e023      	b.n	80068be <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	4b15      	ldr	r3, [pc, #84]	@ (80068d0 <xTaskCheckForTimeOut+0xc4>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	429a      	cmp	r2, r3
 8006880:	d007      	beq.n	8006892 <xTaskCheckForTimeOut+0x86>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	69ba      	ldr	r2, [r7, #24]
 8006888:	429a      	cmp	r2, r3
 800688a:	d302      	bcc.n	8006892 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800688c:	2301      	movs	r3, #1
 800688e:	61fb      	str	r3, [r7, #28]
 8006890:	e015      	b.n	80068be <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	429a      	cmp	r2, r3
 800689a:	d20b      	bcs.n	80068b4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	1ad2      	subs	r2, r2, r3
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f7ff ff99 	bl	80067e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80068ae:	2300      	movs	r3, #0
 80068b0:	61fb      	str	r3, [r7, #28]
 80068b2:	e004      	b.n	80068be <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	2200      	movs	r2, #0
 80068b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80068ba:	2301      	movs	r3, #1
 80068bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80068be:	f000 fb3b 	bl	8006f38 <vPortExitCritical>

	return xReturn;
 80068c2:	69fb      	ldr	r3, [r7, #28]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3720      	adds	r7, #32
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	200004e4 	.word	0x200004e4
 80068d0:	200004f8 	.word	0x200004f8

080068d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80068d4:	b480      	push	{r7}
 80068d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80068d8:	4b03      	ldr	r3, [pc, #12]	@ (80068e8 <vTaskMissedYield+0x14>)
 80068da:	2201      	movs	r2, #1
 80068dc:	601a      	str	r2, [r3, #0]
}
 80068de:	bf00      	nop
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bc80      	pop	{r7}
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	200004f4 	.word	0x200004f4

080068ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068f2:	2300      	movs	r3, #0
 80068f4:	607b      	str	r3, [r7, #4]
 80068f6:	e00c      	b.n	8006912 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	4613      	mov	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4a12      	ldr	r2, [pc, #72]	@ (800694c <prvInitialiseTaskLists+0x60>)
 8006904:	4413      	add	r3, r2
 8006906:	4618      	mov	r0, r3
 8006908:	f7fe fcaa 	bl	8005260 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	3301      	adds	r3, #1
 8006910:	607b      	str	r3, [r7, #4]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b06      	cmp	r3, #6
 8006916:	d9ef      	bls.n	80068f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006918:	480d      	ldr	r0, [pc, #52]	@ (8006950 <prvInitialiseTaskLists+0x64>)
 800691a:	f7fe fca1 	bl	8005260 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800691e:	480d      	ldr	r0, [pc, #52]	@ (8006954 <prvInitialiseTaskLists+0x68>)
 8006920:	f7fe fc9e 	bl	8005260 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006924:	480c      	ldr	r0, [pc, #48]	@ (8006958 <prvInitialiseTaskLists+0x6c>)
 8006926:	f7fe fc9b 	bl	8005260 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800692a:	480c      	ldr	r0, [pc, #48]	@ (800695c <prvInitialiseTaskLists+0x70>)
 800692c:	f7fe fc98 	bl	8005260 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006930:	480b      	ldr	r0, [pc, #44]	@ (8006960 <prvInitialiseTaskLists+0x74>)
 8006932:	f7fe fc95 	bl	8005260 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006936:	4b0b      	ldr	r3, [pc, #44]	@ (8006964 <prvInitialiseTaskLists+0x78>)
 8006938:	4a05      	ldr	r2, [pc, #20]	@ (8006950 <prvInitialiseTaskLists+0x64>)
 800693a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800693c:	4b0a      	ldr	r3, [pc, #40]	@ (8006968 <prvInitialiseTaskLists+0x7c>)
 800693e:	4a05      	ldr	r2, [pc, #20]	@ (8006954 <prvInitialiseTaskLists+0x68>)
 8006940:	601a      	str	r2, [r3, #0]
}
 8006942:	bf00      	nop
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	200003e8 	.word	0x200003e8
 8006950:	20000474 	.word	0x20000474
 8006954:	20000488 	.word	0x20000488
 8006958:	200004a4 	.word	0x200004a4
 800695c:	200004b8 	.word	0x200004b8
 8006960:	200004cc 	.word	0x200004cc
 8006964:	2000049c 	.word	0x2000049c
 8006968:	200004a0 	.word	0x200004a0

0800696c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006972:	4b0c      	ldr	r3, [pc, #48]	@ (80069a4 <prvResetNextTaskUnblockTime+0x38>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d104      	bne.n	8006986 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800697c:	4b0a      	ldr	r3, [pc, #40]	@ (80069a8 <prvResetNextTaskUnblockTime+0x3c>)
 800697e:	f04f 32ff 	mov.w	r2, #4294967295
 8006982:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006984:	e008      	b.n	8006998 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006986:	4b07      	ldr	r3, [pc, #28]	@ (80069a4 <prvResetNextTaskUnblockTime+0x38>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	4a04      	ldr	r2, [pc, #16]	@ (80069a8 <prvResetNextTaskUnblockTime+0x3c>)
 8006996:	6013      	str	r3, [r2, #0]
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	bc80      	pop	{r7}
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	2000049c 	.word	0x2000049c
 80069a8:	20000500 	.word	0x20000500

080069ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80069b2:	4b0b      	ldr	r3, [pc, #44]	@ (80069e0 <xTaskGetSchedulerState+0x34>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d102      	bne.n	80069c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80069ba:	2301      	movs	r3, #1
 80069bc:	607b      	str	r3, [r7, #4]
 80069be:	e008      	b.n	80069d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069c0:	4b08      	ldr	r3, [pc, #32]	@ (80069e4 <xTaskGetSchedulerState+0x38>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d102      	bne.n	80069ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80069c8:	2302      	movs	r3, #2
 80069ca:	607b      	str	r3, [r7, #4]
 80069cc:	e001      	b.n	80069d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80069ce:	2300      	movs	r3, #0
 80069d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80069d2:	687b      	ldr	r3, [r7, #4]
	}
 80069d4:	4618      	mov	r0, r3
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	bc80      	pop	{r7}
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	200004ec 	.word	0x200004ec
 80069e4:	20000504 	.word	0x20000504

080069e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80069f4:	2300      	movs	r3, #0
 80069f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d05e      	beq.n	8006abc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a02:	4b31      	ldr	r3, [pc, #196]	@ (8006ac8 <xTaskPriorityInherit+0xe0>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d24e      	bcs.n	8006aaa <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	db06      	blt.n	8006a22 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a14:	4b2c      	ldr	r3, [pc, #176]	@ (8006ac8 <xTaskPriorityInherit+0xe0>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a1a:	f1c3 0207 	rsb	r2, r3, #7
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	6959      	ldr	r1, [r3, #20]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4a26      	ldr	r2, [pc, #152]	@ (8006acc <xTaskPriorityInherit+0xe4>)
 8006a34:	4413      	add	r3, r2
 8006a36:	4299      	cmp	r1, r3
 8006a38:	d12f      	bne.n	8006a9a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	3304      	adds	r3, #4
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7fe fc94 	bl	800536c <uxListRemove>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10a      	bne.n	8006a60 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a4e:	2201      	movs	r2, #1
 8006a50:	fa02 f303 	lsl.w	r3, r2, r3
 8006a54:	43da      	mvns	r2, r3
 8006a56:	4b1e      	ldr	r3, [pc, #120]	@ (8006ad0 <xTaskPriorityInherit+0xe8>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8006ad0 <xTaskPriorityInherit+0xe8>)
 8006a5e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006a60:	4b19      	ldr	r3, [pc, #100]	@ (8006ac8 <xTaskPriorityInherit+0xe0>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6e:	2201      	movs	r2, #1
 8006a70:	409a      	lsls	r2, r3
 8006a72:	4b17      	ldr	r3, [pc, #92]	@ (8006ad0 <xTaskPriorityInherit+0xe8>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	4a15      	ldr	r2, [pc, #84]	@ (8006ad0 <xTaskPriorityInherit+0xe8>)
 8006a7a:	6013      	str	r3, [r2, #0]
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a80:	4613      	mov	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4a10      	ldr	r2, [pc, #64]	@ (8006acc <xTaskPriorityInherit+0xe4>)
 8006a8a:	441a      	add	r2, r3
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	3304      	adds	r3, #4
 8006a90:	4619      	mov	r1, r3
 8006a92:	4610      	mov	r0, r2
 8006a94:	f7fe fc0f 	bl	80052b6 <vListInsertEnd>
 8006a98:	e004      	b.n	8006aa4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac8 <xTaskPriorityInherit+0xe0>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	e008      	b.n	8006abc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006aae:	4b06      	ldr	r3, [pc, #24]	@ (8006ac8 <xTaskPriorityInherit+0xe0>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d201      	bcs.n	8006abc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006abc:	68fb      	ldr	r3, [r7, #12]
	}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	200003e4 	.word	0x200003e4
 8006acc:	200003e8 	.word	0x200003e8
 8006ad0:	200004e8 	.word	0x200004e8

08006ad4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d070      	beq.n	8006bcc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006aea:	4b3b      	ldr	r3, [pc, #236]	@ (8006bd8 <xTaskPriorityDisinherit+0x104>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	693a      	ldr	r2, [r7, #16]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d00b      	beq.n	8006b0c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	60fb      	str	r3, [r7, #12]
}
 8006b06:	bf00      	nop
 8006b08:	bf00      	nop
 8006b0a:	e7fd      	b.n	8006b08 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10b      	bne.n	8006b2c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	60bb      	str	r3, [r7, #8]
}
 8006b26:	bf00      	nop
 8006b28:	bf00      	nop
 8006b2a:	e7fd      	b.n	8006b28 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b30:	1e5a      	subs	r2, r3, #1
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d044      	beq.n	8006bcc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d140      	bne.n	8006bcc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	3304      	adds	r3, #4
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fe fc0c 	bl	800536c <uxListRemove>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d115      	bne.n	8006b86 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b5e:	491f      	ldr	r1, [pc, #124]	@ (8006bdc <xTaskPriorityDisinherit+0x108>)
 8006b60:	4613      	mov	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	4413      	add	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	440b      	add	r3, r1
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10a      	bne.n	8006b86 <xTaskPriorityDisinherit+0xb2>
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b74:	2201      	movs	r2, #1
 8006b76:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7a:	43da      	mvns	r2, r3
 8006b7c:	4b18      	ldr	r3, [pc, #96]	@ (8006be0 <xTaskPriorityDisinherit+0x10c>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4013      	ands	r3, r2
 8006b82:	4a17      	ldr	r2, [pc, #92]	@ (8006be0 <xTaskPriorityDisinherit+0x10c>)
 8006b84:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b92:	f1c3 0207 	rsb	r2, r3, #7
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	409a      	lsls	r2, r3
 8006ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8006be0 <xTaskPriorityDisinherit+0x10c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8006be0 <xTaskPriorityDisinherit+0x10c>)
 8006baa:	6013      	str	r3, [r2, #0]
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4a08      	ldr	r2, [pc, #32]	@ (8006bdc <xTaskPriorityDisinherit+0x108>)
 8006bba:	441a      	add	r2, r3
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	3304      	adds	r3, #4
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	4610      	mov	r0, r2
 8006bc4:	f7fe fb77 	bl	80052b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006bcc:	697b      	ldr	r3, [r7, #20]
	}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3718      	adds	r7, #24
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	200003e4 	.word	0x200003e4
 8006bdc:	200003e8 	.word	0x200003e8
 8006be0:	200004e8 	.word	0x200004e8

08006be4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b088      	sub	sp, #32
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d079      	beq.n	8006cf0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10b      	bne.n	8006c1c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	60fb      	str	r3, [r7, #12]
}
 8006c16:	bf00      	nop
 8006c18:	bf00      	nop
 8006c1a:	e7fd      	b.n	8006c18 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c20:	683a      	ldr	r2, [r7, #0]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d902      	bls.n	8006c2c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	61fb      	str	r3, [r7, #28]
 8006c2a:	e002      	b.n	8006c32 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c30:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c36:	69fa      	ldr	r2, [r7, #28]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d059      	beq.n	8006cf0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d154      	bne.n	8006cf0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006c46:	4b2c      	ldr	r3, [pc, #176]	@ (8006cf8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	69ba      	ldr	r2, [r7, #24]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d10b      	bne.n	8006c68 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c54:	f383 8811 	msr	BASEPRI, r3
 8006c58:	f3bf 8f6f 	isb	sy
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	60bb      	str	r3, [r7, #8]
}
 8006c62:	bf00      	nop
 8006c64:	bf00      	nop
 8006c66:	e7fd      	b.n	8006c64 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c6c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	69fa      	ldr	r2, [r7, #28]
 8006c72:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	db04      	blt.n	8006c86 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	f1c3 0207 	rsb	r2, r3, #7
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	6959      	ldr	r1, [r3, #20]
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4a19      	ldr	r2, [pc, #100]	@ (8006cfc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006c96:	4413      	add	r3, r2
 8006c98:	4299      	cmp	r1, r3
 8006c9a:	d129      	bne.n	8006cf0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	3304      	adds	r3, #4
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7fe fb63 	bl	800536c <uxListRemove>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10a      	bne.n	8006cc2 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb6:	43da      	mvns	r2, r3
 8006cb8:	4b11      	ldr	r3, [pc, #68]	@ (8006d00 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	4a10      	ldr	r2, [pc, #64]	@ (8006d00 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006cc0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	409a      	lsls	r2, r3
 8006cca:	4b0d      	ldr	r3, [pc, #52]	@ (8006d00 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	4a0b      	ldr	r2, [pc, #44]	@ (8006d00 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006cd2:	6013      	str	r3, [r2, #0]
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cd8:	4613      	mov	r3, r2
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4a06      	ldr	r2, [pc, #24]	@ (8006cfc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006ce2:	441a      	add	r2, r3
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	3304      	adds	r3, #4
 8006ce8:	4619      	mov	r1, r3
 8006cea:	4610      	mov	r0, r2
 8006cec:	f7fe fae3 	bl	80052b6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006cf0:	bf00      	nop
 8006cf2:	3720      	adds	r7, #32
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	200003e4 	.word	0x200003e4
 8006cfc:	200003e8 	.word	0x200003e8
 8006d00:	200004e8 	.word	0x200004e8

08006d04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006d04:	b480      	push	{r7}
 8006d06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006d08:	4b07      	ldr	r3, [pc, #28]	@ (8006d28 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d004      	beq.n	8006d1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006d10:	4b05      	ldr	r3, [pc, #20]	@ (8006d28 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006d16:	3201      	adds	r2, #1
 8006d18:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8006d1a:	4b03      	ldr	r3, [pc, #12]	@ (8006d28 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
	}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bc80      	pop	{r7}
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	200003e4 	.word	0x200003e4

08006d2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d36:	4b29      	ldr	r3, [pc, #164]	@ (8006ddc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d3c:	4b28      	ldr	r3, [pc, #160]	@ (8006de0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	3304      	adds	r3, #4
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fe fb12 	bl	800536c <uxListRemove>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10b      	bne.n	8006d66 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006d4e:	4b24      	ldr	r3, [pc, #144]	@ (8006de0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d54:	2201      	movs	r2, #1
 8006d56:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5a:	43da      	mvns	r2, r3
 8006d5c:	4b21      	ldr	r3, [pc, #132]	@ (8006de4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4013      	ands	r3, r2
 8006d62:	4a20      	ldr	r2, [pc, #128]	@ (8006de4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d64:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6c:	d10a      	bne.n	8006d84 <prvAddCurrentTaskToDelayedList+0x58>
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d007      	beq.n	8006d84 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d74:	4b1a      	ldr	r3, [pc, #104]	@ (8006de0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	3304      	adds	r3, #4
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	481a      	ldr	r0, [pc, #104]	@ (8006de8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006d7e:	f7fe fa9a 	bl	80052b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d82:	e026      	b.n	8006dd2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4413      	add	r3, r2
 8006d8a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d8c:	4b14      	ldr	r3, [pc, #80]	@ (8006de0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d94:	68ba      	ldr	r2, [r7, #8]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d209      	bcs.n	8006db0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d9c:	4b13      	ldr	r3, [pc, #76]	@ (8006dec <prvAddCurrentTaskToDelayedList+0xc0>)
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	4b0f      	ldr	r3, [pc, #60]	@ (8006de0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3304      	adds	r3, #4
 8006da6:	4619      	mov	r1, r3
 8006da8:	4610      	mov	r0, r2
 8006daa:	f7fe faa7 	bl	80052fc <vListInsert>
}
 8006dae:	e010      	b.n	8006dd2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006db0:	4b0f      	ldr	r3, [pc, #60]	@ (8006df0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	4b0a      	ldr	r3, [pc, #40]	@ (8006de0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	3304      	adds	r3, #4
 8006dba:	4619      	mov	r1, r3
 8006dbc:	4610      	mov	r0, r2
 8006dbe:	f7fe fa9d 	bl	80052fc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8006df4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d202      	bcs.n	8006dd2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006dcc:	4a09      	ldr	r2, [pc, #36]	@ (8006df4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	6013      	str	r3, [r2, #0]
}
 8006dd2:	bf00      	nop
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	200004e4 	.word	0x200004e4
 8006de0:	200003e4 	.word	0x200003e4
 8006de4:	200004e8 	.word	0x200004e8
 8006de8:	200004cc 	.word	0x200004cc
 8006dec:	200004a0 	.word	0x200004a0
 8006df0:	2000049c 	.word	0x2000049c
 8006df4:	20000500 	.word	0x20000500

08006df8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	3b04      	subs	r3, #4
 8006e08:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006e10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	3b04      	subs	r3, #4
 8006e16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	f023 0201 	bic.w	r2, r3, #1
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	3b04      	subs	r3, #4
 8006e26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006e28:	4a08      	ldr	r2, [pc, #32]	@ (8006e4c <pxPortInitialiseStack+0x54>)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	3b14      	subs	r3, #20
 8006e32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	3b20      	subs	r3, #32
 8006e3e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006e40:	68fb      	ldr	r3, [r7, #12]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bc80      	pop	{r7}
 8006e4a:	4770      	bx	lr
 8006e4c:	08006e51 	.word	0x08006e51

08006e50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006e56:	2300      	movs	r3, #0
 8006e58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006e5a:	4b12      	ldr	r3, [pc, #72]	@ (8006ea4 <prvTaskExitError+0x54>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e62:	d00b      	beq.n	8006e7c <prvTaskExitError+0x2c>
	__asm volatile
 8006e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e68:	f383 8811 	msr	BASEPRI, r3
 8006e6c:	f3bf 8f6f 	isb	sy
 8006e70:	f3bf 8f4f 	dsb	sy
 8006e74:	60fb      	str	r3, [r7, #12]
}
 8006e76:	bf00      	nop
 8006e78:	bf00      	nop
 8006e7a:	e7fd      	b.n	8006e78 <prvTaskExitError+0x28>
	__asm volatile
 8006e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e80:	f383 8811 	msr	BASEPRI, r3
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	60bb      	str	r3, [r7, #8]
}
 8006e8e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e90:	bf00      	nop
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d0fc      	beq.n	8006e92 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006e98:	bf00      	nop
 8006e9a:	bf00      	nop
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bc80      	pop	{r7}
 8006ea2:	4770      	bx	lr
 8006ea4:	2000000c 	.word	0x2000000c
	...

08006eb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006eb0:	4b07      	ldr	r3, [pc, #28]	@ (8006ed0 <pxCurrentTCBConst2>)
 8006eb2:	6819      	ldr	r1, [r3, #0]
 8006eb4:	6808      	ldr	r0, [r1, #0]
 8006eb6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006eba:	f380 8809 	msr	PSP, r0
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f04f 0000 	mov.w	r0, #0
 8006ec6:	f380 8811 	msr	BASEPRI, r0
 8006eca:	f04e 0e0d 	orr.w	lr, lr, #13
 8006ece:	4770      	bx	lr

08006ed0 <pxCurrentTCBConst2>:
 8006ed0:	200003e4 	.word	0x200003e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ed4:	bf00      	nop
 8006ed6:	bf00      	nop

08006ed8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
	__asm volatile
 8006ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee2:	f383 8811 	msr	BASEPRI, r3
 8006ee6:	f3bf 8f6f 	isb	sy
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	607b      	str	r3, [r7, #4]
}
 8006ef0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8006f30 <vPortEnterCritical+0x58>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8006f30 <vPortEnterCritical+0x58>)
 8006efa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006efc:	4b0c      	ldr	r3, [pc, #48]	@ (8006f30 <vPortEnterCritical+0x58>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d110      	bne.n	8006f26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f04:	4b0b      	ldr	r3, [pc, #44]	@ (8006f34 <vPortEnterCritical+0x5c>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00b      	beq.n	8006f26 <vPortEnterCritical+0x4e>
	__asm volatile
 8006f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	603b      	str	r3, [r7, #0]
}
 8006f20:	bf00      	nop
 8006f22:	bf00      	nop
 8006f24:	e7fd      	b.n	8006f22 <vPortEnterCritical+0x4a>
	}
}
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bc80      	pop	{r7}
 8006f2e:	4770      	bx	lr
 8006f30:	2000000c 	.word	0x2000000c
 8006f34:	e000ed04 	.word	0xe000ed04

08006f38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f3e:	4b12      	ldr	r3, [pc, #72]	@ (8006f88 <vPortExitCritical+0x50>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10b      	bne.n	8006f5e <vPortExitCritical+0x26>
	__asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	607b      	str	r3, [r7, #4]
}
 8006f58:	bf00      	nop
 8006f5a:	bf00      	nop
 8006f5c:	e7fd      	b.n	8006f5a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8006f88 <vPortExitCritical+0x50>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	3b01      	subs	r3, #1
 8006f64:	4a08      	ldr	r2, [pc, #32]	@ (8006f88 <vPortExitCritical+0x50>)
 8006f66:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f68:	4b07      	ldr	r3, [pc, #28]	@ (8006f88 <vPortExitCritical+0x50>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d105      	bne.n	8006f7c <vPortExitCritical+0x44>
 8006f70:	2300      	movs	r3, #0
 8006f72:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	f383 8811 	msr	BASEPRI, r3
}
 8006f7a:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bc80      	pop	{r7}
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	2000000c 	.word	0x2000000c
 8006f8c:	00000000 	.word	0x00000000

08006f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f90:	f3ef 8009 	mrs	r0, PSP
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	4b0d      	ldr	r3, [pc, #52]	@ (8006fd0 <pxCurrentTCBConst>)
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006fa0:	6010      	str	r0, [r2, #0]
 8006fa2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006fa6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006faa:	f380 8811 	msr	BASEPRI, r0
 8006fae:	f7ff fb2b 	bl	8006608 <vTaskSwitchContext>
 8006fb2:	f04f 0000 	mov.w	r0, #0
 8006fb6:	f380 8811 	msr	BASEPRI, r0
 8006fba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006fbe:	6819      	ldr	r1, [r3, #0]
 8006fc0:	6808      	ldr	r0, [r1, #0]
 8006fc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006fc6:	f380 8809 	msr	PSP, r0
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	4770      	bx	lr

08006fd0 <pxCurrentTCBConst>:
 8006fd0:	200003e4 	.word	0x200003e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006fd4:	bf00      	nop
 8006fd6:	bf00      	nop

08006fd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8006fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe2:	f383 8811 	msr	BASEPRI, r3
 8006fe6:	f3bf 8f6f 	isb	sy
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	607b      	str	r3, [r7, #4]
}
 8006ff0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ff2:	f7ff fa4f 	bl	8006494 <xTaskIncrementTick>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d003      	beq.n	8007004 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006ffc:	4b06      	ldr	r3, [pc, #24]	@ (8007018 <SysTick_Handler+0x40>)
 8006ffe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007002:	601a      	str	r2, [r3, #0]
 8007004:	2300      	movs	r3, #0
 8007006:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	f383 8811 	msr	BASEPRI, r3
}
 800700e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007010:	bf00      	nop
 8007012:	3708      	adds	r7, #8
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	e000ed04 	.word	0xe000ed04

0800701c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007022:	f3ef 8305 	mrs	r3, IPSR
 8007026:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2b0f      	cmp	r3, #15
 800702c:	d915      	bls.n	800705a <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800702e:	4a17      	ldr	r2, [pc, #92]	@ (800708c <vPortValidateInterruptPriority+0x70>)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	4413      	add	r3, r2
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007038:	4b15      	ldr	r3, [pc, #84]	@ (8007090 <vPortValidateInterruptPriority+0x74>)
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	7afa      	ldrb	r2, [r7, #11]
 800703e:	429a      	cmp	r2, r3
 8007040:	d20b      	bcs.n	800705a <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007046:	f383 8811 	msr	BASEPRI, r3
 800704a:	f3bf 8f6f 	isb	sy
 800704e:	f3bf 8f4f 	dsb	sy
 8007052:	607b      	str	r3, [r7, #4]
}
 8007054:	bf00      	nop
 8007056:	bf00      	nop
 8007058:	e7fd      	b.n	8007056 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800705a:	4b0e      	ldr	r3, [pc, #56]	@ (8007094 <vPortValidateInterruptPriority+0x78>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007062:	4b0d      	ldr	r3, [pc, #52]	@ (8007098 <vPortValidateInterruptPriority+0x7c>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	429a      	cmp	r2, r3
 8007068:	d90b      	bls.n	8007082 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800706a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800706e:	f383 8811 	msr	BASEPRI, r3
 8007072:	f3bf 8f6f 	isb	sy
 8007076:	f3bf 8f4f 	dsb	sy
 800707a:	603b      	str	r3, [r7, #0]
}
 800707c:	bf00      	nop
 800707e:	bf00      	nop
 8007080:	e7fd      	b.n	800707e <vPortValidateInterruptPriority+0x62>
	}
 8007082:	bf00      	nop
 8007084:	3714      	adds	r7, #20
 8007086:	46bd      	mov	sp, r7
 8007088:	bc80      	pop	{r7}
 800708a:	4770      	bx	lr
 800708c:	e000e3f0 	.word	0xe000e3f0
 8007090:	20000508 	.word	0x20000508
 8007094:	e000ed0c 	.word	0xe000ed0c
 8007098:	2000050c 	.word	0x2000050c

0800709c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b08a      	sub	sp, #40	@ 0x28
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80070a4:	2300      	movs	r3, #0
 80070a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80070a8:	f7ff f948 	bl	800633c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80070ac:	4b5c      	ldr	r3, [pc, #368]	@ (8007220 <pvPortMalloc+0x184>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80070b4:	f000 f924 	bl	8007300 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80070b8:	4b5a      	ldr	r3, [pc, #360]	@ (8007224 <pvPortMalloc+0x188>)
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4013      	ands	r3, r2
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f040 8095 	bne.w	80071f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d01e      	beq.n	800710a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80070cc:	2208      	movs	r2, #8
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4413      	add	r3, r2
 80070d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f003 0307 	and.w	r3, r3, #7
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d015      	beq.n	800710a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f023 0307 	bic.w	r3, r3, #7
 80070e4:	3308      	adds	r3, #8
 80070e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f003 0307 	and.w	r3, r3, #7
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00b      	beq.n	800710a <pvPortMalloc+0x6e>
	__asm volatile
 80070f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f6:	f383 8811 	msr	BASEPRI, r3
 80070fa:	f3bf 8f6f 	isb	sy
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	617b      	str	r3, [r7, #20]
}
 8007104:	bf00      	nop
 8007106:	bf00      	nop
 8007108:	e7fd      	b.n	8007106 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d06f      	beq.n	80071f0 <pvPortMalloc+0x154>
 8007110:	4b45      	ldr	r3, [pc, #276]	@ (8007228 <pvPortMalloc+0x18c>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	429a      	cmp	r2, r3
 8007118:	d86a      	bhi.n	80071f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800711a:	4b44      	ldr	r3, [pc, #272]	@ (800722c <pvPortMalloc+0x190>)
 800711c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800711e:	4b43      	ldr	r3, [pc, #268]	@ (800722c <pvPortMalloc+0x190>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007124:	e004      	b.n	8007130 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007128:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800712a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	429a      	cmp	r2, r3
 8007138:	d903      	bls.n	8007142 <pvPortMalloc+0xa6>
 800713a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1f1      	bne.n	8007126 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007142:	4b37      	ldr	r3, [pc, #220]	@ (8007220 <pvPortMalloc+0x184>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007148:	429a      	cmp	r2, r3
 800714a:	d051      	beq.n	80071f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800714c:	6a3b      	ldr	r3, [r7, #32]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2208      	movs	r2, #8
 8007152:	4413      	add	r3, r2
 8007154:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800715e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007160:	685a      	ldr	r2, [r3, #4]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	1ad2      	subs	r2, r2, r3
 8007166:	2308      	movs	r3, #8
 8007168:	005b      	lsls	r3, r3, #1
 800716a:	429a      	cmp	r2, r3
 800716c:	d920      	bls.n	80071b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800716e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4413      	add	r3, r2
 8007174:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	f003 0307 	and.w	r3, r3, #7
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00b      	beq.n	8007198 <pvPortMalloc+0xfc>
	__asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	613b      	str	r3, [r7, #16]
}
 8007192:	bf00      	nop
 8007194:	bf00      	nop
 8007196:	e7fd      	b.n	8007194 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	1ad2      	subs	r2, r2, r3
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80071a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80071aa:	69b8      	ldr	r0, [r7, #24]
 80071ac:	f000 f90a 	bl	80073c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80071b0:	4b1d      	ldr	r3, [pc, #116]	@ (8007228 <pvPortMalloc+0x18c>)
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	4a1b      	ldr	r2, [pc, #108]	@ (8007228 <pvPortMalloc+0x18c>)
 80071bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80071be:	4b1a      	ldr	r3, [pc, #104]	@ (8007228 <pvPortMalloc+0x18c>)
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	4b1b      	ldr	r3, [pc, #108]	@ (8007230 <pvPortMalloc+0x194>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d203      	bcs.n	80071d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80071ca:	4b17      	ldr	r3, [pc, #92]	@ (8007228 <pvPortMalloc+0x18c>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a18      	ldr	r2, [pc, #96]	@ (8007230 <pvPortMalloc+0x194>)
 80071d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80071d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d4:	685a      	ldr	r2, [r3, #4]
 80071d6:	4b13      	ldr	r3, [pc, #76]	@ (8007224 <pvPortMalloc+0x188>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	431a      	orrs	r2, r3
 80071dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80071e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e2:	2200      	movs	r2, #0
 80071e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80071e6:	4b13      	ldr	r3, [pc, #76]	@ (8007234 <pvPortMalloc+0x198>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3301      	adds	r3, #1
 80071ec:	4a11      	ldr	r2, [pc, #68]	@ (8007234 <pvPortMalloc+0x198>)
 80071ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80071f0:	f7ff f8b2 	bl	8006358 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	f003 0307 	and.w	r3, r3, #7
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00b      	beq.n	8007216 <pvPortMalloc+0x17a>
	__asm volatile
 80071fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007202:	f383 8811 	msr	BASEPRI, r3
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	f3bf 8f4f 	dsb	sy
 800720e:	60fb      	str	r3, [r7, #12]
}
 8007210:	bf00      	nop
 8007212:	bf00      	nop
 8007214:	e7fd      	b.n	8007212 <pvPortMalloc+0x176>
	return pvReturn;
 8007216:	69fb      	ldr	r3, [r7, #28]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3728      	adds	r7, #40	@ 0x28
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	20002518 	.word	0x20002518
 8007224:	2000252c 	.word	0x2000252c
 8007228:	2000251c 	.word	0x2000251c
 800722c:	20002510 	.word	0x20002510
 8007230:	20002520 	.word	0x20002520
 8007234:	20002524 	.word	0x20002524

08007238 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d04f      	beq.n	80072ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800724a:	2308      	movs	r3, #8
 800724c:	425b      	negs	r3, r3
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	4413      	add	r3, r2
 8007252:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	4b25      	ldr	r3, [pc, #148]	@ (80072f4 <vPortFree+0xbc>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4013      	ands	r3, r2
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10b      	bne.n	800727e <vPortFree+0x46>
	__asm volatile
 8007266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800726a:	f383 8811 	msr	BASEPRI, r3
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	60fb      	str	r3, [r7, #12]
}
 8007278:	bf00      	nop
 800727a:	bf00      	nop
 800727c:	e7fd      	b.n	800727a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00b      	beq.n	800729e <vPortFree+0x66>
	__asm volatile
 8007286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800728a:	f383 8811 	msr	BASEPRI, r3
 800728e:	f3bf 8f6f 	isb	sy
 8007292:	f3bf 8f4f 	dsb	sy
 8007296:	60bb      	str	r3, [r7, #8]
}
 8007298:	bf00      	nop
 800729a:	bf00      	nop
 800729c:	e7fd      	b.n	800729a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	685a      	ldr	r2, [r3, #4]
 80072a2:	4b14      	ldr	r3, [pc, #80]	@ (80072f4 <vPortFree+0xbc>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4013      	ands	r3, r2
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d01e      	beq.n	80072ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d11a      	bne.n	80072ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	685a      	ldr	r2, [r3, #4]
 80072b8:	4b0e      	ldr	r3, [pc, #56]	@ (80072f4 <vPortFree+0xbc>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	43db      	mvns	r3, r3
 80072be:	401a      	ands	r2, r3
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80072c4:	f7ff f83a 	bl	800633c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	4b0a      	ldr	r3, [pc, #40]	@ (80072f8 <vPortFree+0xc0>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4413      	add	r3, r2
 80072d2:	4a09      	ldr	r2, [pc, #36]	@ (80072f8 <vPortFree+0xc0>)
 80072d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80072d6:	6938      	ldr	r0, [r7, #16]
 80072d8:	f000 f874 	bl	80073c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80072dc:	4b07      	ldr	r3, [pc, #28]	@ (80072fc <vPortFree+0xc4>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	3301      	adds	r3, #1
 80072e2:	4a06      	ldr	r2, [pc, #24]	@ (80072fc <vPortFree+0xc4>)
 80072e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80072e6:	f7ff f837 	bl	8006358 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80072ea:	bf00      	nop
 80072ec:	3718      	adds	r7, #24
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	2000252c 	.word	0x2000252c
 80072f8:	2000251c 	.word	0x2000251c
 80072fc:	20002528 	.word	0x20002528

08007300 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007306:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800730a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800730c:	4b27      	ldr	r3, [pc, #156]	@ (80073ac <prvHeapInit+0xac>)
 800730e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f003 0307 	and.w	r3, r3, #7
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00c      	beq.n	8007334 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	3307      	adds	r3, #7
 800731e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f023 0307 	bic.w	r3, r3, #7
 8007326:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	4a1f      	ldr	r2, [pc, #124]	@ (80073ac <prvHeapInit+0xac>)
 8007330:	4413      	add	r3, r2
 8007332:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007338:	4a1d      	ldr	r2, [pc, #116]	@ (80073b0 <prvHeapInit+0xb0>)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800733e:	4b1c      	ldr	r3, [pc, #112]	@ (80073b0 <prvHeapInit+0xb0>)
 8007340:	2200      	movs	r2, #0
 8007342:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	4413      	add	r3, r2
 800734a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800734c:	2208      	movs	r2, #8
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	1a9b      	subs	r3, r3, r2
 8007352:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f023 0307 	bic.w	r3, r3, #7
 800735a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	4a15      	ldr	r2, [pc, #84]	@ (80073b4 <prvHeapInit+0xb4>)
 8007360:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007362:	4b14      	ldr	r3, [pc, #80]	@ (80073b4 <prvHeapInit+0xb4>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2200      	movs	r2, #0
 8007368:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800736a:	4b12      	ldr	r3, [pc, #72]	@ (80073b4 <prvHeapInit+0xb4>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2200      	movs	r2, #0
 8007370:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	1ad2      	subs	r2, r2, r3
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007380:	4b0c      	ldr	r3, [pc, #48]	@ (80073b4 <prvHeapInit+0xb4>)
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	4a0a      	ldr	r2, [pc, #40]	@ (80073b8 <prvHeapInit+0xb8>)
 800738e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	4a09      	ldr	r2, [pc, #36]	@ (80073bc <prvHeapInit+0xbc>)
 8007396:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007398:	4b09      	ldr	r3, [pc, #36]	@ (80073c0 <prvHeapInit+0xc0>)
 800739a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800739e:	601a      	str	r2, [r3, #0]
}
 80073a0:	bf00      	nop
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bc80      	pop	{r7}
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	20000510 	.word	0x20000510
 80073b0:	20002510 	.word	0x20002510
 80073b4:	20002518 	.word	0x20002518
 80073b8:	20002520 	.word	0x20002520
 80073bc:	2000251c 	.word	0x2000251c
 80073c0:	2000252c 	.word	0x2000252c

080073c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80073cc:	4b27      	ldr	r3, [pc, #156]	@ (800746c <prvInsertBlockIntoFreeList+0xa8>)
 80073ce:	60fb      	str	r3, [r7, #12]
 80073d0:	e002      	b.n	80073d8 <prvInsertBlockIntoFreeList+0x14>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	60fb      	str	r3, [r7, #12]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	429a      	cmp	r2, r3
 80073e0:	d8f7      	bhi.n	80073d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	4413      	add	r3, r2
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d108      	bne.n	8007406 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	441a      	add	r2, r3
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	68ba      	ldr	r2, [r7, #8]
 8007410:	441a      	add	r2, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	429a      	cmp	r2, r3
 8007418:	d118      	bne.n	800744c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	4b14      	ldr	r3, [pc, #80]	@ (8007470 <prvInsertBlockIntoFreeList+0xac>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	429a      	cmp	r2, r3
 8007424:	d00d      	beq.n	8007442 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	441a      	add	r2, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	601a      	str	r2, [r3, #0]
 8007440:	e008      	b.n	8007454 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007442:	4b0b      	ldr	r3, [pc, #44]	@ (8007470 <prvInsertBlockIntoFreeList+0xac>)
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	601a      	str	r2, [r3, #0]
 800744a:	e003      	b.n	8007454 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	429a      	cmp	r2, r3
 800745a:	d002      	beq.n	8007462 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007462:	bf00      	nop
 8007464:	3714      	adds	r7, #20
 8007466:	46bd      	mov	sp, r7
 8007468:	bc80      	pop	{r7}
 800746a:	4770      	bx	lr
 800746c:	20002510 	.word	0x20002510
 8007470:	20002518 	.word	0x20002518

08007474 <__cvt>:
 8007474:	2b00      	cmp	r3, #0
 8007476:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800747a:	461d      	mov	r5, r3
 800747c:	bfbb      	ittet	lt
 800747e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8007482:	461d      	movlt	r5, r3
 8007484:	2300      	movge	r3, #0
 8007486:	232d      	movlt	r3, #45	@ 0x2d
 8007488:	b088      	sub	sp, #32
 800748a:	4614      	mov	r4, r2
 800748c:	bfb8      	it	lt
 800748e:	4614      	movlt	r4, r2
 8007490:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007492:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007494:	7013      	strb	r3, [r2, #0]
 8007496:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007498:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800749c:	f023 0820 	bic.w	r8, r3, #32
 80074a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80074a4:	d005      	beq.n	80074b2 <__cvt+0x3e>
 80074a6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80074aa:	d100      	bne.n	80074ae <__cvt+0x3a>
 80074ac:	3601      	adds	r6, #1
 80074ae:	2302      	movs	r3, #2
 80074b0:	e000      	b.n	80074b4 <__cvt+0x40>
 80074b2:	2303      	movs	r3, #3
 80074b4:	aa07      	add	r2, sp, #28
 80074b6:	9204      	str	r2, [sp, #16]
 80074b8:	aa06      	add	r2, sp, #24
 80074ba:	e9cd a202 	strd	sl, r2, [sp, #8]
 80074be:	e9cd 3600 	strd	r3, r6, [sp]
 80074c2:	4622      	mov	r2, r4
 80074c4:	462b      	mov	r3, r5
 80074c6:	f001 f9a3 	bl	8008810 <_dtoa_r>
 80074ca:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80074ce:	4607      	mov	r7, r0
 80074d0:	d119      	bne.n	8007506 <__cvt+0x92>
 80074d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80074d4:	07db      	lsls	r3, r3, #31
 80074d6:	d50e      	bpl.n	80074f6 <__cvt+0x82>
 80074d8:	eb00 0906 	add.w	r9, r0, r6
 80074dc:	2200      	movs	r2, #0
 80074de:	2300      	movs	r3, #0
 80074e0:	4620      	mov	r0, r4
 80074e2:	4629      	mov	r1, r5
 80074e4:	f7f9 fa6a 	bl	80009bc <__aeabi_dcmpeq>
 80074e8:	b108      	cbz	r0, 80074ee <__cvt+0x7a>
 80074ea:	f8cd 901c 	str.w	r9, [sp, #28]
 80074ee:	2230      	movs	r2, #48	@ 0x30
 80074f0:	9b07      	ldr	r3, [sp, #28]
 80074f2:	454b      	cmp	r3, r9
 80074f4:	d31e      	bcc.n	8007534 <__cvt+0xc0>
 80074f6:	4638      	mov	r0, r7
 80074f8:	9b07      	ldr	r3, [sp, #28]
 80074fa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80074fc:	1bdb      	subs	r3, r3, r7
 80074fe:	6013      	str	r3, [r2, #0]
 8007500:	b008      	add	sp, #32
 8007502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007506:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800750a:	eb00 0906 	add.w	r9, r0, r6
 800750e:	d1e5      	bne.n	80074dc <__cvt+0x68>
 8007510:	7803      	ldrb	r3, [r0, #0]
 8007512:	2b30      	cmp	r3, #48	@ 0x30
 8007514:	d10a      	bne.n	800752c <__cvt+0xb8>
 8007516:	2200      	movs	r2, #0
 8007518:	2300      	movs	r3, #0
 800751a:	4620      	mov	r0, r4
 800751c:	4629      	mov	r1, r5
 800751e:	f7f9 fa4d 	bl	80009bc <__aeabi_dcmpeq>
 8007522:	b918      	cbnz	r0, 800752c <__cvt+0xb8>
 8007524:	f1c6 0601 	rsb	r6, r6, #1
 8007528:	f8ca 6000 	str.w	r6, [sl]
 800752c:	f8da 3000 	ldr.w	r3, [sl]
 8007530:	4499      	add	r9, r3
 8007532:	e7d3      	b.n	80074dc <__cvt+0x68>
 8007534:	1c59      	adds	r1, r3, #1
 8007536:	9107      	str	r1, [sp, #28]
 8007538:	701a      	strb	r2, [r3, #0]
 800753a:	e7d9      	b.n	80074f0 <__cvt+0x7c>

0800753c <__exponent>:
 800753c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800753e:	2900      	cmp	r1, #0
 8007540:	bfb6      	itet	lt
 8007542:	232d      	movlt	r3, #45	@ 0x2d
 8007544:	232b      	movge	r3, #43	@ 0x2b
 8007546:	4249      	neglt	r1, r1
 8007548:	2909      	cmp	r1, #9
 800754a:	7002      	strb	r2, [r0, #0]
 800754c:	7043      	strb	r3, [r0, #1]
 800754e:	dd29      	ble.n	80075a4 <__exponent+0x68>
 8007550:	f10d 0307 	add.w	r3, sp, #7
 8007554:	461d      	mov	r5, r3
 8007556:	270a      	movs	r7, #10
 8007558:	fbb1 f6f7 	udiv	r6, r1, r7
 800755c:	461a      	mov	r2, r3
 800755e:	fb07 1416 	mls	r4, r7, r6, r1
 8007562:	3430      	adds	r4, #48	@ 0x30
 8007564:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007568:	460c      	mov	r4, r1
 800756a:	2c63      	cmp	r4, #99	@ 0x63
 800756c:	4631      	mov	r1, r6
 800756e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007572:	dcf1      	bgt.n	8007558 <__exponent+0x1c>
 8007574:	3130      	adds	r1, #48	@ 0x30
 8007576:	1e94      	subs	r4, r2, #2
 8007578:	f803 1c01 	strb.w	r1, [r3, #-1]
 800757c:	4623      	mov	r3, r4
 800757e:	1c41      	adds	r1, r0, #1
 8007580:	42ab      	cmp	r3, r5
 8007582:	d30a      	bcc.n	800759a <__exponent+0x5e>
 8007584:	f10d 0309 	add.w	r3, sp, #9
 8007588:	1a9b      	subs	r3, r3, r2
 800758a:	42ac      	cmp	r4, r5
 800758c:	bf88      	it	hi
 800758e:	2300      	movhi	r3, #0
 8007590:	3302      	adds	r3, #2
 8007592:	4403      	add	r3, r0
 8007594:	1a18      	subs	r0, r3, r0
 8007596:	b003      	add	sp, #12
 8007598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800759a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800759e:	f801 6f01 	strb.w	r6, [r1, #1]!
 80075a2:	e7ed      	b.n	8007580 <__exponent+0x44>
 80075a4:	2330      	movs	r3, #48	@ 0x30
 80075a6:	3130      	adds	r1, #48	@ 0x30
 80075a8:	7083      	strb	r3, [r0, #2]
 80075aa:	70c1      	strb	r1, [r0, #3]
 80075ac:	1d03      	adds	r3, r0, #4
 80075ae:	e7f1      	b.n	8007594 <__exponent+0x58>

080075b0 <_printf_float>:
 80075b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b4:	b091      	sub	sp, #68	@ 0x44
 80075b6:	460c      	mov	r4, r1
 80075b8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80075bc:	4616      	mov	r6, r2
 80075be:	461f      	mov	r7, r3
 80075c0:	4605      	mov	r5, r0
 80075c2:	f000 fffd 	bl	80085c0 <_localeconv_r>
 80075c6:	6803      	ldr	r3, [r0, #0]
 80075c8:	4618      	mov	r0, r3
 80075ca:	9308      	str	r3, [sp, #32]
 80075cc:	f7f8 fdca 	bl	8000164 <strlen>
 80075d0:	2300      	movs	r3, #0
 80075d2:	930e      	str	r3, [sp, #56]	@ 0x38
 80075d4:	f8d8 3000 	ldr.w	r3, [r8]
 80075d8:	9009      	str	r0, [sp, #36]	@ 0x24
 80075da:	3307      	adds	r3, #7
 80075dc:	f023 0307 	bic.w	r3, r3, #7
 80075e0:	f103 0208 	add.w	r2, r3, #8
 80075e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80075e8:	f8d4 b000 	ldr.w	fp, [r4]
 80075ec:	f8c8 2000 	str.w	r2, [r8]
 80075f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075f4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80075f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075fa:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80075fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007602:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007606:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800760a:	4b9c      	ldr	r3, [pc, #624]	@ (800787c <_printf_float+0x2cc>)
 800760c:	f7f9 fa08 	bl	8000a20 <__aeabi_dcmpun>
 8007610:	bb70      	cbnz	r0, 8007670 <_printf_float+0xc0>
 8007612:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007616:	f04f 32ff 	mov.w	r2, #4294967295
 800761a:	4b98      	ldr	r3, [pc, #608]	@ (800787c <_printf_float+0x2cc>)
 800761c:	f7f9 f9e2 	bl	80009e4 <__aeabi_dcmple>
 8007620:	bb30      	cbnz	r0, 8007670 <_printf_float+0xc0>
 8007622:	2200      	movs	r2, #0
 8007624:	2300      	movs	r3, #0
 8007626:	4640      	mov	r0, r8
 8007628:	4649      	mov	r1, r9
 800762a:	f7f9 f9d1 	bl	80009d0 <__aeabi_dcmplt>
 800762e:	b110      	cbz	r0, 8007636 <_printf_float+0x86>
 8007630:	232d      	movs	r3, #45	@ 0x2d
 8007632:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007636:	4a92      	ldr	r2, [pc, #584]	@ (8007880 <_printf_float+0x2d0>)
 8007638:	4b92      	ldr	r3, [pc, #584]	@ (8007884 <_printf_float+0x2d4>)
 800763a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800763e:	bf94      	ite	ls
 8007640:	4690      	movls	r8, r2
 8007642:	4698      	movhi	r8, r3
 8007644:	2303      	movs	r3, #3
 8007646:	f04f 0900 	mov.w	r9, #0
 800764a:	6123      	str	r3, [r4, #16]
 800764c:	f02b 0304 	bic.w	r3, fp, #4
 8007650:	6023      	str	r3, [r4, #0]
 8007652:	4633      	mov	r3, r6
 8007654:	4621      	mov	r1, r4
 8007656:	4628      	mov	r0, r5
 8007658:	9700      	str	r7, [sp, #0]
 800765a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800765c:	f000 f9d4 	bl	8007a08 <_printf_common>
 8007660:	3001      	adds	r0, #1
 8007662:	f040 8090 	bne.w	8007786 <_printf_float+0x1d6>
 8007666:	f04f 30ff 	mov.w	r0, #4294967295
 800766a:	b011      	add	sp, #68	@ 0x44
 800766c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007670:	4642      	mov	r2, r8
 8007672:	464b      	mov	r3, r9
 8007674:	4640      	mov	r0, r8
 8007676:	4649      	mov	r1, r9
 8007678:	f7f9 f9d2 	bl	8000a20 <__aeabi_dcmpun>
 800767c:	b148      	cbz	r0, 8007692 <_printf_float+0xe2>
 800767e:	464b      	mov	r3, r9
 8007680:	2b00      	cmp	r3, #0
 8007682:	bfb8      	it	lt
 8007684:	232d      	movlt	r3, #45	@ 0x2d
 8007686:	4a80      	ldr	r2, [pc, #512]	@ (8007888 <_printf_float+0x2d8>)
 8007688:	bfb8      	it	lt
 800768a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800768e:	4b7f      	ldr	r3, [pc, #508]	@ (800788c <_printf_float+0x2dc>)
 8007690:	e7d3      	b.n	800763a <_printf_float+0x8a>
 8007692:	6863      	ldr	r3, [r4, #4]
 8007694:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007698:	1c5a      	adds	r2, r3, #1
 800769a:	d13f      	bne.n	800771c <_printf_float+0x16c>
 800769c:	2306      	movs	r3, #6
 800769e:	6063      	str	r3, [r4, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80076a6:	6023      	str	r3, [r4, #0]
 80076a8:	9206      	str	r2, [sp, #24]
 80076aa:	aa0e      	add	r2, sp, #56	@ 0x38
 80076ac:	e9cd a204 	strd	sl, r2, [sp, #16]
 80076b0:	aa0d      	add	r2, sp, #52	@ 0x34
 80076b2:	9203      	str	r2, [sp, #12]
 80076b4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80076b8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80076bc:	6863      	ldr	r3, [r4, #4]
 80076be:	4642      	mov	r2, r8
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	4628      	mov	r0, r5
 80076c4:	464b      	mov	r3, r9
 80076c6:	910a      	str	r1, [sp, #40]	@ 0x28
 80076c8:	f7ff fed4 	bl	8007474 <__cvt>
 80076cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80076ce:	4680      	mov	r8, r0
 80076d0:	2947      	cmp	r1, #71	@ 0x47
 80076d2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80076d4:	d128      	bne.n	8007728 <_printf_float+0x178>
 80076d6:	1cc8      	adds	r0, r1, #3
 80076d8:	db02      	blt.n	80076e0 <_printf_float+0x130>
 80076da:	6863      	ldr	r3, [r4, #4]
 80076dc:	4299      	cmp	r1, r3
 80076de:	dd40      	ble.n	8007762 <_printf_float+0x1b2>
 80076e0:	f1aa 0a02 	sub.w	sl, sl, #2
 80076e4:	fa5f fa8a 	uxtb.w	sl, sl
 80076e8:	4652      	mov	r2, sl
 80076ea:	3901      	subs	r1, #1
 80076ec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80076f0:	910d      	str	r1, [sp, #52]	@ 0x34
 80076f2:	f7ff ff23 	bl	800753c <__exponent>
 80076f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076f8:	4681      	mov	r9, r0
 80076fa:	1813      	adds	r3, r2, r0
 80076fc:	2a01      	cmp	r2, #1
 80076fe:	6123      	str	r3, [r4, #16]
 8007700:	dc02      	bgt.n	8007708 <_printf_float+0x158>
 8007702:	6822      	ldr	r2, [r4, #0]
 8007704:	07d2      	lsls	r2, r2, #31
 8007706:	d501      	bpl.n	800770c <_printf_float+0x15c>
 8007708:	3301      	adds	r3, #1
 800770a:	6123      	str	r3, [r4, #16]
 800770c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007710:	2b00      	cmp	r3, #0
 8007712:	d09e      	beq.n	8007652 <_printf_float+0xa2>
 8007714:	232d      	movs	r3, #45	@ 0x2d
 8007716:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800771a:	e79a      	b.n	8007652 <_printf_float+0xa2>
 800771c:	2947      	cmp	r1, #71	@ 0x47
 800771e:	d1bf      	bne.n	80076a0 <_printf_float+0xf0>
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1bd      	bne.n	80076a0 <_printf_float+0xf0>
 8007724:	2301      	movs	r3, #1
 8007726:	e7ba      	b.n	800769e <_printf_float+0xee>
 8007728:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800772c:	d9dc      	bls.n	80076e8 <_printf_float+0x138>
 800772e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007732:	d118      	bne.n	8007766 <_printf_float+0x1b6>
 8007734:	2900      	cmp	r1, #0
 8007736:	6863      	ldr	r3, [r4, #4]
 8007738:	dd0b      	ble.n	8007752 <_printf_float+0x1a2>
 800773a:	6121      	str	r1, [r4, #16]
 800773c:	b913      	cbnz	r3, 8007744 <_printf_float+0x194>
 800773e:	6822      	ldr	r2, [r4, #0]
 8007740:	07d0      	lsls	r0, r2, #31
 8007742:	d502      	bpl.n	800774a <_printf_float+0x19a>
 8007744:	3301      	adds	r3, #1
 8007746:	440b      	add	r3, r1
 8007748:	6123      	str	r3, [r4, #16]
 800774a:	f04f 0900 	mov.w	r9, #0
 800774e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007750:	e7dc      	b.n	800770c <_printf_float+0x15c>
 8007752:	b913      	cbnz	r3, 800775a <_printf_float+0x1aa>
 8007754:	6822      	ldr	r2, [r4, #0]
 8007756:	07d2      	lsls	r2, r2, #31
 8007758:	d501      	bpl.n	800775e <_printf_float+0x1ae>
 800775a:	3302      	adds	r3, #2
 800775c:	e7f4      	b.n	8007748 <_printf_float+0x198>
 800775e:	2301      	movs	r3, #1
 8007760:	e7f2      	b.n	8007748 <_printf_float+0x198>
 8007762:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007766:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007768:	4299      	cmp	r1, r3
 800776a:	db05      	blt.n	8007778 <_printf_float+0x1c8>
 800776c:	6823      	ldr	r3, [r4, #0]
 800776e:	6121      	str	r1, [r4, #16]
 8007770:	07d8      	lsls	r0, r3, #31
 8007772:	d5ea      	bpl.n	800774a <_printf_float+0x19a>
 8007774:	1c4b      	adds	r3, r1, #1
 8007776:	e7e7      	b.n	8007748 <_printf_float+0x198>
 8007778:	2900      	cmp	r1, #0
 800777a:	bfcc      	ite	gt
 800777c:	2201      	movgt	r2, #1
 800777e:	f1c1 0202 	rsble	r2, r1, #2
 8007782:	4413      	add	r3, r2
 8007784:	e7e0      	b.n	8007748 <_printf_float+0x198>
 8007786:	6823      	ldr	r3, [r4, #0]
 8007788:	055a      	lsls	r2, r3, #21
 800778a:	d407      	bmi.n	800779c <_printf_float+0x1ec>
 800778c:	6923      	ldr	r3, [r4, #16]
 800778e:	4642      	mov	r2, r8
 8007790:	4631      	mov	r1, r6
 8007792:	4628      	mov	r0, r5
 8007794:	47b8      	blx	r7
 8007796:	3001      	adds	r0, #1
 8007798:	d12b      	bne.n	80077f2 <_printf_float+0x242>
 800779a:	e764      	b.n	8007666 <_printf_float+0xb6>
 800779c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80077a0:	f240 80dc 	bls.w	800795c <_printf_float+0x3ac>
 80077a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80077a8:	2200      	movs	r2, #0
 80077aa:	2300      	movs	r3, #0
 80077ac:	f7f9 f906 	bl	80009bc <__aeabi_dcmpeq>
 80077b0:	2800      	cmp	r0, #0
 80077b2:	d033      	beq.n	800781c <_printf_float+0x26c>
 80077b4:	2301      	movs	r3, #1
 80077b6:	4631      	mov	r1, r6
 80077b8:	4628      	mov	r0, r5
 80077ba:	4a35      	ldr	r2, [pc, #212]	@ (8007890 <_printf_float+0x2e0>)
 80077bc:	47b8      	blx	r7
 80077be:	3001      	adds	r0, #1
 80077c0:	f43f af51 	beq.w	8007666 <_printf_float+0xb6>
 80077c4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80077c8:	4543      	cmp	r3, r8
 80077ca:	db02      	blt.n	80077d2 <_printf_float+0x222>
 80077cc:	6823      	ldr	r3, [r4, #0]
 80077ce:	07d8      	lsls	r0, r3, #31
 80077d0:	d50f      	bpl.n	80077f2 <_printf_float+0x242>
 80077d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80077d6:	4631      	mov	r1, r6
 80077d8:	4628      	mov	r0, r5
 80077da:	47b8      	blx	r7
 80077dc:	3001      	adds	r0, #1
 80077de:	f43f af42 	beq.w	8007666 <_printf_float+0xb6>
 80077e2:	f04f 0900 	mov.w	r9, #0
 80077e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80077ea:	f104 0a1a 	add.w	sl, r4, #26
 80077ee:	45c8      	cmp	r8, r9
 80077f0:	dc09      	bgt.n	8007806 <_printf_float+0x256>
 80077f2:	6823      	ldr	r3, [r4, #0]
 80077f4:	079b      	lsls	r3, r3, #30
 80077f6:	f100 8102 	bmi.w	80079fe <_printf_float+0x44e>
 80077fa:	68e0      	ldr	r0, [r4, #12]
 80077fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077fe:	4298      	cmp	r0, r3
 8007800:	bfb8      	it	lt
 8007802:	4618      	movlt	r0, r3
 8007804:	e731      	b.n	800766a <_printf_float+0xba>
 8007806:	2301      	movs	r3, #1
 8007808:	4652      	mov	r2, sl
 800780a:	4631      	mov	r1, r6
 800780c:	4628      	mov	r0, r5
 800780e:	47b8      	blx	r7
 8007810:	3001      	adds	r0, #1
 8007812:	f43f af28 	beq.w	8007666 <_printf_float+0xb6>
 8007816:	f109 0901 	add.w	r9, r9, #1
 800781a:	e7e8      	b.n	80077ee <_printf_float+0x23e>
 800781c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800781e:	2b00      	cmp	r3, #0
 8007820:	dc38      	bgt.n	8007894 <_printf_float+0x2e4>
 8007822:	2301      	movs	r3, #1
 8007824:	4631      	mov	r1, r6
 8007826:	4628      	mov	r0, r5
 8007828:	4a19      	ldr	r2, [pc, #100]	@ (8007890 <_printf_float+0x2e0>)
 800782a:	47b8      	blx	r7
 800782c:	3001      	adds	r0, #1
 800782e:	f43f af1a 	beq.w	8007666 <_printf_float+0xb6>
 8007832:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007836:	ea59 0303 	orrs.w	r3, r9, r3
 800783a:	d102      	bne.n	8007842 <_printf_float+0x292>
 800783c:	6823      	ldr	r3, [r4, #0]
 800783e:	07d9      	lsls	r1, r3, #31
 8007840:	d5d7      	bpl.n	80077f2 <_printf_float+0x242>
 8007842:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007846:	4631      	mov	r1, r6
 8007848:	4628      	mov	r0, r5
 800784a:	47b8      	blx	r7
 800784c:	3001      	adds	r0, #1
 800784e:	f43f af0a 	beq.w	8007666 <_printf_float+0xb6>
 8007852:	f04f 0a00 	mov.w	sl, #0
 8007856:	f104 0b1a 	add.w	fp, r4, #26
 800785a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800785c:	425b      	negs	r3, r3
 800785e:	4553      	cmp	r3, sl
 8007860:	dc01      	bgt.n	8007866 <_printf_float+0x2b6>
 8007862:	464b      	mov	r3, r9
 8007864:	e793      	b.n	800778e <_printf_float+0x1de>
 8007866:	2301      	movs	r3, #1
 8007868:	465a      	mov	r2, fp
 800786a:	4631      	mov	r1, r6
 800786c:	4628      	mov	r0, r5
 800786e:	47b8      	blx	r7
 8007870:	3001      	adds	r0, #1
 8007872:	f43f aef8 	beq.w	8007666 <_printf_float+0xb6>
 8007876:	f10a 0a01 	add.w	sl, sl, #1
 800787a:	e7ee      	b.n	800785a <_printf_float+0x2aa>
 800787c:	7fefffff 	.word	0x7fefffff
 8007880:	0800bdc6 	.word	0x0800bdc6
 8007884:	0800bdca 	.word	0x0800bdca
 8007888:	0800bdce 	.word	0x0800bdce
 800788c:	0800bdd2 	.word	0x0800bdd2
 8007890:	0800bdd6 	.word	0x0800bdd6
 8007894:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007896:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800789a:	4553      	cmp	r3, sl
 800789c:	bfa8      	it	ge
 800789e:	4653      	movge	r3, sl
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	4699      	mov	r9, r3
 80078a4:	dc36      	bgt.n	8007914 <_printf_float+0x364>
 80078a6:	f04f 0b00 	mov.w	fp, #0
 80078aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078ae:	f104 021a 	add.w	r2, r4, #26
 80078b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80078b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80078b6:	eba3 0309 	sub.w	r3, r3, r9
 80078ba:	455b      	cmp	r3, fp
 80078bc:	dc31      	bgt.n	8007922 <_printf_float+0x372>
 80078be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078c0:	459a      	cmp	sl, r3
 80078c2:	dc3a      	bgt.n	800793a <_printf_float+0x38a>
 80078c4:	6823      	ldr	r3, [r4, #0]
 80078c6:	07da      	lsls	r2, r3, #31
 80078c8:	d437      	bmi.n	800793a <_printf_float+0x38a>
 80078ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078cc:	ebaa 0903 	sub.w	r9, sl, r3
 80078d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078d2:	ebaa 0303 	sub.w	r3, sl, r3
 80078d6:	4599      	cmp	r9, r3
 80078d8:	bfa8      	it	ge
 80078da:	4699      	movge	r9, r3
 80078dc:	f1b9 0f00 	cmp.w	r9, #0
 80078e0:	dc33      	bgt.n	800794a <_printf_float+0x39a>
 80078e2:	f04f 0800 	mov.w	r8, #0
 80078e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078ea:	f104 0b1a 	add.w	fp, r4, #26
 80078ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078f0:	ebaa 0303 	sub.w	r3, sl, r3
 80078f4:	eba3 0309 	sub.w	r3, r3, r9
 80078f8:	4543      	cmp	r3, r8
 80078fa:	f77f af7a 	ble.w	80077f2 <_printf_float+0x242>
 80078fe:	2301      	movs	r3, #1
 8007900:	465a      	mov	r2, fp
 8007902:	4631      	mov	r1, r6
 8007904:	4628      	mov	r0, r5
 8007906:	47b8      	blx	r7
 8007908:	3001      	adds	r0, #1
 800790a:	f43f aeac 	beq.w	8007666 <_printf_float+0xb6>
 800790e:	f108 0801 	add.w	r8, r8, #1
 8007912:	e7ec      	b.n	80078ee <_printf_float+0x33e>
 8007914:	4642      	mov	r2, r8
 8007916:	4631      	mov	r1, r6
 8007918:	4628      	mov	r0, r5
 800791a:	47b8      	blx	r7
 800791c:	3001      	adds	r0, #1
 800791e:	d1c2      	bne.n	80078a6 <_printf_float+0x2f6>
 8007920:	e6a1      	b.n	8007666 <_printf_float+0xb6>
 8007922:	2301      	movs	r3, #1
 8007924:	4631      	mov	r1, r6
 8007926:	4628      	mov	r0, r5
 8007928:	920a      	str	r2, [sp, #40]	@ 0x28
 800792a:	47b8      	blx	r7
 800792c:	3001      	adds	r0, #1
 800792e:	f43f ae9a 	beq.w	8007666 <_printf_float+0xb6>
 8007932:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007934:	f10b 0b01 	add.w	fp, fp, #1
 8007938:	e7bb      	b.n	80078b2 <_printf_float+0x302>
 800793a:	4631      	mov	r1, r6
 800793c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007940:	4628      	mov	r0, r5
 8007942:	47b8      	blx	r7
 8007944:	3001      	adds	r0, #1
 8007946:	d1c0      	bne.n	80078ca <_printf_float+0x31a>
 8007948:	e68d      	b.n	8007666 <_printf_float+0xb6>
 800794a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800794c:	464b      	mov	r3, r9
 800794e:	4631      	mov	r1, r6
 8007950:	4628      	mov	r0, r5
 8007952:	4442      	add	r2, r8
 8007954:	47b8      	blx	r7
 8007956:	3001      	adds	r0, #1
 8007958:	d1c3      	bne.n	80078e2 <_printf_float+0x332>
 800795a:	e684      	b.n	8007666 <_printf_float+0xb6>
 800795c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007960:	f1ba 0f01 	cmp.w	sl, #1
 8007964:	dc01      	bgt.n	800796a <_printf_float+0x3ba>
 8007966:	07db      	lsls	r3, r3, #31
 8007968:	d536      	bpl.n	80079d8 <_printf_float+0x428>
 800796a:	2301      	movs	r3, #1
 800796c:	4642      	mov	r2, r8
 800796e:	4631      	mov	r1, r6
 8007970:	4628      	mov	r0, r5
 8007972:	47b8      	blx	r7
 8007974:	3001      	adds	r0, #1
 8007976:	f43f ae76 	beq.w	8007666 <_printf_float+0xb6>
 800797a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800797e:	4631      	mov	r1, r6
 8007980:	4628      	mov	r0, r5
 8007982:	47b8      	blx	r7
 8007984:	3001      	adds	r0, #1
 8007986:	f43f ae6e 	beq.w	8007666 <_printf_float+0xb6>
 800798a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800798e:	2200      	movs	r2, #0
 8007990:	2300      	movs	r3, #0
 8007992:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007996:	f7f9 f811 	bl	80009bc <__aeabi_dcmpeq>
 800799a:	b9c0      	cbnz	r0, 80079ce <_printf_float+0x41e>
 800799c:	4653      	mov	r3, sl
 800799e:	f108 0201 	add.w	r2, r8, #1
 80079a2:	4631      	mov	r1, r6
 80079a4:	4628      	mov	r0, r5
 80079a6:	47b8      	blx	r7
 80079a8:	3001      	adds	r0, #1
 80079aa:	d10c      	bne.n	80079c6 <_printf_float+0x416>
 80079ac:	e65b      	b.n	8007666 <_printf_float+0xb6>
 80079ae:	2301      	movs	r3, #1
 80079b0:	465a      	mov	r2, fp
 80079b2:	4631      	mov	r1, r6
 80079b4:	4628      	mov	r0, r5
 80079b6:	47b8      	blx	r7
 80079b8:	3001      	adds	r0, #1
 80079ba:	f43f ae54 	beq.w	8007666 <_printf_float+0xb6>
 80079be:	f108 0801 	add.w	r8, r8, #1
 80079c2:	45d0      	cmp	r8, sl
 80079c4:	dbf3      	blt.n	80079ae <_printf_float+0x3fe>
 80079c6:	464b      	mov	r3, r9
 80079c8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80079cc:	e6e0      	b.n	8007790 <_printf_float+0x1e0>
 80079ce:	f04f 0800 	mov.w	r8, #0
 80079d2:	f104 0b1a 	add.w	fp, r4, #26
 80079d6:	e7f4      	b.n	80079c2 <_printf_float+0x412>
 80079d8:	2301      	movs	r3, #1
 80079da:	4642      	mov	r2, r8
 80079dc:	e7e1      	b.n	80079a2 <_printf_float+0x3f2>
 80079de:	2301      	movs	r3, #1
 80079e0:	464a      	mov	r2, r9
 80079e2:	4631      	mov	r1, r6
 80079e4:	4628      	mov	r0, r5
 80079e6:	47b8      	blx	r7
 80079e8:	3001      	adds	r0, #1
 80079ea:	f43f ae3c 	beq.w	8007666 <_printf_float+0xb6>
 80079ee:	f108 0801 	add.w	r8, r8, #1
 80079f2:	68e3      	ldr	r3, [r4, #12]
 80079f4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80079f6:	1a5b      	subs	r3, r3, r1
 80079f8:	4543      	cmp	r3, r8
 80079fa:	dcf0      	bgt.n	80079de <_printf_float+0x42e>
 80079fc:	e6fd      	b.n	80077fa <_printf_float+0x24a>
 80079fe:	f04f 0800 	mov.w	r8, #0
 8007a02:	f104 0919 	add.w	r9, r4, #25
 8007a06:	e7f4      	b.n	80079f2 <_printf_float+0x442>

08007a08 <_printf_common>:
 8007a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a0c:	4616      	mov	r6, r2
 8007a0e:	4698      	mov	r8, r3
 8007a10:	688a      	ldr	r2, [r1, #8]
 8007a12:	690b      	ldr	r3, [r1, #16]
 8007a14:	4607      	mov	r7, r0
 8007a16:	4293      	cmp	r3, r2
 8007a18:	bfb8      	it	lt
 8007a1a:	4613      	movlt	r3, r2
 8007a1c:	6033      	str	r3, [r6, #0]
 8007a1e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a22:	460c      	mov	r4, r1
 8007a24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a28:	b10a      	cbz	r2, 8007a2e <_printf_common+0x26>
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	6033      	str	r3, [r6, #0]
 8007a2e:	6823      	ldr	r3, [r4, #0]
 8007a30:	0699      	lsls	r1, r3, #26
 8007a32:	bf42      	ittt	mi
 8007a34:	6833      	ldrmi	r3, [r6, #0]
 8007a36:	3302      	addmi	r3, #2
 8007a38:	6033      	strmi	r3, [r6, #0]
 8007a3a:	6825      	ldr	r5, [r4, #0]
 8007a3c:	f015 0506 	ands.w	r5, r5, #6
 8007a40:	d106      	bne.n	8007a50 <_printf_common+0x48>
 8007a42:	f104 0a19 	add.w	sl, r4, #25
 8007a46:	68e3      	ldr	r3, [r4, #12]
 8007a48:	6832      	ldr	r2, [r6, #0]
 8007a4a:	1a9b      	subs	r3, r3, r2
 8007a4c:	42ab      	cmp	r3, r5
 8007a4e:	dc2b      	bgt.n	8007aa8 <_printf_common+0xa0>
 8007a50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a54:	6822      	ldr	r2, [r4, #0]
 8007a56:	3b00      	subs	r3, #0
 8007a58:	bf18      	it	ne
 8007a5a:	2301      	movne	r3, #1
 8007a5c:	0692      	lsls	r2, r2, #26
 8007a5e:	d430      	bmi.n	8007ac2 <_printf_common+0xba>
 8007a60:	4641      	mov	r1, r8
 8007a62:	4638      	mov	r0, r7
 8007a64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a68:	47c8      	blx	r9
 8007a6a:	3001      	adds	r0, #1
 8007a6c:	d023      	beq.n	8007ab6 <_printf_common+0xae>
 8007a6e:	6823      	ldr	r3, [r4, #0]
 8007a70:	6922      	ldr	r2, [r4, #16]
 8007a72:	f003 0306 	and.w	r3, r3, #6
 8007a76:	2b04      	cmp	r3, #4
 8007a78:	bf14      	ite	ne
 8007a7a:	2500      	movne	r5, #0
 8007a7c:	6833      	ldreq	r3, [r6, #0]
 8007a7e:	f04f 0600 	mov.w	r6, #0
 8007a82:	bf08      	it	eq
 8007a84:	68e5      	ldreq	r5, [r4, #12]
 8007a86:	f104 041a 	add.w	r4, r4, #26
 8007a8a:	bf08      	it	eq
 8007a8c:	1aed      	subeq	r5, r5, r3
 8007a8e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007a92:	bf08      	it	eq
 8007a94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	bfc4      	itt	gt
 8007a9c:	1a9b      	subgt	r3, r3, r2
 8007a9e:	18ed      	addgt	r5, r5, r3
 8007aa0:	42b5      	cmp	r5, r6
 8007aa2:	d11a      	bne.n	8007ada <_printf_common+0xd2>
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	e008      	b.n	8007aba <_printf_common+0xb2>
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	4652      	mov	r2, sl
 8007aac:	4641      	mov	r1, r8
 8007aae:	4638      	mov	r0, r7
 8007ab0:	47c8      	blx	r9
 8007ab2:	3001      	adds	r0, #1
 8007ab4:	d103      	bne.n	8007abe <_printf_common+0xb6>
 8007ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8007aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007abe:	3501      	adds	r5, #1
 8007ac0:	e7c1      	b.n	8007a46 <_printf_common+0x3e>
 8007ac2:	2030      	movs	r0, #48	@ 0x30
 8007ac4:	18e1      	adds	r1, r4, r3
 8007ac6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007aca:	1c5a      	adds	r2, r3, #1
 8007acc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ad0:	4422      	add	r2, r4
 8007ad2:	3302      	adds	r3, #2
 8007ad4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ad8:	e7c2      	b.n	8007a60 <_printf_common+0x58>
 8007ada:	2301      	movs	r3, #1
 8007adc:	4622      	mov	r2, r4
 8007ade:	4641      	mov	r1, r8
 8007ae0:	4638      	mov	r0, r7
 8007ae2:	47c8      	blx	r9
 8007ae4:	3001      	adds	r0, #1
 8007ae6:	d0e6      	beq.n	8007ab6 <_printf_common+0xae>
 8007ae8:	3601      	adds	r6, #1
 8007aea:	e7d9      	b.n	8007aa0 <_printf_common+0x98>

08007aec <_printf_i>:
 8007aec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007af0:	7e0f      	ldrb	r7, [r1, #24]
 8007af2:	4691      	mov	r9, r2
 8007af4:	2f78      	cmp	r7, #120	@ 0x78
 8007af6:	4680      	mov	r8, r0
 8007af8:	460c      	mov	r4, r1
 8007afa:	469a      	mov	sl, r3
 8007afc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007afe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b02:	d807      	bhi.n	8007b14 <_printf_i+0x28>
 8007b04:	2f62      	cmp	r7, #98	@ 0x62
 8007b06:	d80a      	bhi.n	8007b1e <_printf_i+0x32>
 8007b08:	2f00      	cmp	r7, #0
 8007b0a:	f000 80d3 	beq.w	8007cb4 <_printf_i+0x1c8>
 8007b0e:	2f58      	cmp	r7, #88	@ 0x58
 8007b10:	f000 80ba 	beq.w	8007c88 <_printf_i+0x19c>
 8007b14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b1c:	e03a      	b.n	8007b94 <_printf_i+0xa8>
 8007b1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b22:	2b15      	cmp	r3, #21
 8007b24:	d8f6      	bhi.n	8007b14 <_printf_i+0x28>
 8007b26:	a101      	add	r1, pc, #4	@ (adr r1, 8007b2c <_printf_i+0x40>)
 8007b28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b2c:	08007b85 	.word	0x08007b85
 8007b30:	08007b99 	.word	0x08007b99
 8007b34:	08007b15 	.word	0x08007b15
 8007b38:	08007b15 	.word	0x08007b15
 8007b3c:	08007b15 	.word	0x08007b15
 8007b40:	08007b15 	.word	0x08007b15
 8007b44:	08007b99 	.word	0x08007b99
 8007b48:	08007b15 	.word	0x08007b15
 8007b4c:	08007b15 	.word	0x08007b15
 8007b50:	08007b15 	.word	0x08007b15
 8007b54:	08007b15 	.word	0x08007b15
 8007b58:	08007c9b 	.word	0x08007c9b
 8007b5c:	08007bc3 	.word	0x08007bc3
 8007b60:	08007c55 	.word	0x08007c55
 8007b64:	08007b15 	.word	0x08007b15
 8007b68:	08007b15 	.word	0x08007b15
 8007b6c:	08007cbd 	.word	0x08007cbd
 8007b70:	08007b15 	.word	0x08007b15
 8007b74:	08007bc3 	.word	0x08007bc3
 8007b78:	08007b15 	.word	0x08007b15
 8007b7c:	08007b15 	.word	0x08007b15
 8007b80:	08007c5d 	.word	0x08007c5d
 8007b84:	6833      	ldr	r3, [r6, #0]
 8007b86:	1d1a      	adds	r2, r3, #4
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	6032      	str	r2, [r6, #0]
 8007b8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b94:	2301      	movs	r3, #1
 8007b96:	e09e      	b.n	8007cd6 <_printf_i+0x1ea>
 8007b98:	6833      	ldr	r3, [r6, #0]
 8007b9a:	6820      	ldr	r0, [r4, #0]
 8007b9c:	1d19      	adds	r1, r3, #4
 8007b9e:	6031      	str	r1, [r6, #0]
 8007ba0:	0606      	lsls	r6, r0, #24
 8007ba2:	d501      	bpl.n	8007ba8 <_printf_i+0xbc>
 8007ba4:	681d      	ldr	r5, [r3, #0]
 8007ba6:	e003      	b.n	8007bb0 <_printf_i+0xc4>
 8007ba8:	0645      	lsls	r5, r0, #25
 8007baa:	d5fb      	bpl.n	8007ba4 <_printf_i+0xb8>
 8007bac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007bb0:	2d00      	cmp	r5, #0
 8007bb2:	da03      	bge.n	8007bbc <_printf_i+0xd0>
 8007bb4:	232d      	movs	r3, #45	@ 0x2d
 8007bb6:	426d      	negs	r5, r5
 8007bb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bbc:	230a      	movs	r3, #10
 8007bbe:	4859      	ldr	r0, [pc, #356]	@ (8007d24 <_printf_i+0x238>)
 8007bc0:	e011      	b.n	8007be6 <_printf_i+0xfa>
 8007bc2:	6821      	ldr	r1, [r4, #0]
 8007bc4:	6833      	ldr	r3, [r6, #0]
 8007bc6:	0608      	lsls	r0, r1, #24
 8007bc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8007bcc:	d402      	bmi.n	8007bd4 <_printf_i+0xe8>
 8007bce:	0649      	lsls	r1, r1, #25
 8007bd0:	bf48      	it	mi
 8007bd2:	b2ad      	uxthmi	r5, r5
 8007bd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8007bd6:	6033      	str	r3, [r6, #0]
 8007bd8:	bf14      	ite	ne
 8007bda:	230a      	movne	r3, #10
 8007bdc:	2308      	moveq	r3, #8
 8007bde:	4851      	ldr	r0, [pc, #324]	@ (8007d24 <_printf_i+0x238>)
 8007be0:	2100      	movs	r1, #0
 8007be2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007be6:	6866      	ldr	r6, [r4, #4]
 8007be8:	2e00      	cmp	r6, #0
 8007bea:	bfa8      	it	ge
 8007bec:	6821      	ldrge	r1, [r4, #0]
 8007bee:	60a6      	str	r6, [r4, #8]
 8007bf0:	bfa4      	itt	ge
 8007bf2:	f021 0104 	bicge.w	r1, r1, #4
 8007bf6:	6021      	strge	r1, [r4, #0]
 8007bf8:	b90d      	cbnz	r5, 8007bfe <_printf_i+0x112>
 8007bfa:	2e00      	cmp	r6, #0
 8007bfc:	d04b      	beq.n	8007c96 <_printf_i+0x1aa>
 8007bfe:	4616      	mov	r6, r2
 8007c00:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c04:	fb03 5711 	mls	r7, r3, r1, r5
 8007c08:	5dc7      	ldrb	r7, [r0, r7]
 8007c0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c0e:	462f      	mov	r7, r5
 8007c10:	42bb      	cmp	r3, r7
 8007c12:	460d      	mov	r5, r1
 8007c14:	d9f4      	bls.n	8007c00 <_printf_i+0x114>
 8007c16:	2b08      	cmp	r3, #8
 8007c18:	d10b      	bne.n	8007c32 <_printf_i+0x146>
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	07df      	lsls	r7, r3, #31
 8007c1e:	d508      	bpl.n	8007c32 <_printf_i+0x146>
 8007c20:	6923      	ldr	r3, [r4, #16]
 8007c22:	6861      	ldr	r1, [r4, #4]
 8007c24:	4299      	cmp	r1, r3
 8007c26:	bfde      	ittt	le
 8007c28:	2330      	movle	r3, #48	@ 0x30
 8007c2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c32:	1b92      	subs	r2, r2, r6
 8007c34:	6122      	str	r2, [r4, #16]
 8007c36:	464b      	mov	r3, r9
 8007c38:	4621      	mov	r1, r4
 8007c3a:	4640      	mov	r0, r8
 8007c3c:	f8cd a000 	str.w	sl, [sp]
 8007c40:	aa03      	add	r2, sp, #12
 8007c42:	f7ff fee1 	bl	8007a08 <_printf_common>
 8007c46:	3001      	adds	r0, #1
 8007c48:	d14a      	bne.n	8007ce0 <_printf_i+0x1f4>
 8007c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c4e:	b004      	add	sp, #16
 8007c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c54:	6823      	ldr	r3, [r4, #0]
 8007c56:	f043 0320 	orr.w	r3, r3, #32
 8007c5a:	6023      	str	r3, [r4, #0]
 8007c5c:	2778      	movs	r7, #120	@ 0x78
 8007c5e:	4832      	ldr	r0, [pc, #200]	@ (8007d28 <_printf_i+0x23c>)
 8007c60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	6831      	ldr	r1, [r6, #0]
 8007c68:	061f      	lsls	r7, r3, #24
 8007c6a:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c6e:	d402      	bmi.n	8007c76 <_printf_i+0x18a>
 8007c70:	065f      	lsls	r7, r3, #25
 8007c72:	bf48      	it	mi
 8007c74:	b2ad      	uxthmi	r5, r5
 8007c76:	6031      	str	r1, [r6, #0]
 8007c78:	07d9      	lsls	r1, r3, #31
 8007c7a:	bf44      	itt	mi
 8007c7c:	f043 0320 	orrmi.w	r3, r3, #32
 8007c80:	6023      	strmi	r3, [r4, #0]
 8007c82:	b11d      	cbz	r5, 8007c8c <_printf_i+0x1a0>
 8007c84:	2310      	movs	r3, #16
 8007c86:	e7ab      	b.n	8007be0 <_printf_i+0xf4>
 8007c88:	4826      	ldr	r0, [pc, #152]	@ (8007d24 <_printf_i+0x238>)
 8007c8a:	e7e9      	b.n	8007c60 <_printf_i+0x174>
 8007c8c:	6823      	ldr	r3, [r4, #0]
 8007c8e:	f023 0320 	bic.w	r3, r3, #32
 8007c92:	6023      	str	r3, [r4, #0]
 8007c94:	e7f6      	b.n	8007c84 <_printf_i+0x198>
 8007c96:	4616      	mov	r6, r2
 8007c98:	e7bd      	b.n	8007c16 <_printf_i+0x12a>
 8007c9a:	6833      	ldr	r3, [r6, #0]
 8007c9c:	6825      	ldr	r5, [r4, #0]
 8007c9e:	1d18      	adds	r0, r3, #4
 8007ca0:	6961      	ldr	r1, [r4, #20]
 8007ca2:	6030      	str	r0, [r6, #0]
 8007ca4:	062e      	lsls	r6, r5, #24
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	d501      	bpl.n	8007cae <_printf_i+0x1c2>
 8007caa:	6019      	str	r1, [r3, #0]
 8007cac:	e002      	b.n	8007cb4 <_printf_i+0x1c8>
 8007cae:	0668      	lsls	r0, r5, #25
 8007cb0:	d5fb      	bpl.n	8007caa <_printf_i+0x1be>
 8007cb2:	8019      	strh	r1, [r3, #0]
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	4616      	mov	r6, r2
 8007cb8:	6123      	str	r3, [r4, #16]
 8007cba:	e7bc      	b.n	8007c36 <_printf_i+0x14a>
 8007cbc:	6833      	ldr	r3, [r6, #0]
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	1d1a      	adds	r2, r3, #4
 8007cc2:	6032      	str	r2, [r6, #0]
 8007cc4:	681e      	ldr	r6, [r3, #0]
 8007cc6:	6862      	ldr	r2, [r4, #4]
 8007cc8:	4630      	mov	r0, r6
 8007cca:	f000 fcf8 	bl	80086be <memchr>
 8007cce:	b108      	cbz	r0, 8007cd4 <_printf_i+0x1e8>
 8007cd0:	1b80      	subs	r0, r0, r6
 8007cd2:	6060      	str	r0, [r4, #4]
 8007cd4:	6863      	ldr	r3, [r4, #4]
 8007cd6:	6123      	str	r3, [r4, #16]
 8007cd8:	2300      	movs	r3, #0
 8007cda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cde:	e7aa      	b.n	8007c36 <_printf_i+0x14a>
 8007ce0:	4632      	mov	r2, r6
 8007ce2:	4649      	mov	r1, r9
 8007ce4:	4640      	mov	r0, r8
 8007ce6:	6923      	ldr	r3, [r4, #16]
 8007ce8:	47d0      	blx	sl
 8007cea:	3001      	adds	r0, #1
 8007cec:	d0ad      	beq.n	8007c4a <_printf_i+0x15e>
 8007cee:	6823      	ldr	r3, [r4, #0]
 8007cf0:	079b      	lsls	r3, r3, #30
 8007cf2:	d413      	bmi.n	8007d1c <_printf_i+0x230>
 8007cf4:	68e0      	ldr	r0, [r4, #12]
 8007cf6:	9b03      	ldr	r3, [sp, #12]
 8007cf8:	4298      	cmp	r0, r3
 8007cfa:	bfb8      	it	lt
 8007cfc:	4618      	movlt	r0, r3
 8007cfe:	e7a6      	b.n	8007c4e <_printf_i+0x162>
 8007d00:	2301      	movs	r3, #1
 8007d02:	4632      	mov	r2, r6
 8007d04:	4649      	mov	r1, r9
 8007d06:	4640      	mov	r0, r8
 8007d08:	47d0      	blx	sl
 8007d0a:	3001      	adds	r0, #1
 8007d0c:	d09d      	beq.n	8007c4a <_printf_i+0x15e>
 8007d0e:	3501      	adds	r5, #1
 8007d10:	68e3      	ldr	r3, [r4, #12]
 8007d12:	9903      	ldr	r1, [sp, #12]
 8007d14:	1a5b      	subs	r3, r3, r1
 8007d16:	42ab      	cmp	r3, r5
 8007d18:	dcf2      	bgt.n	8007d00 <_printf_i+0x214>
 8007d1a:	e7eb      	b.n	8007cf4 <_printf_i+0x208>
 8007d1c:	2500      	movs	r5, #0
 8007d1e:	f104 0619 	add.w	r6, r4, #25
 8007d22:	e7f5      	b.n	8007d10 <_printf_i+0x224>
 8007d24:	0800bdd8 	.word	0x0800bdd8
 8007d28:	0800bde9 	.word	0x0800bde9

08007d2c <_scanf_float>:
 8007d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d30:	b087      	sub	sp, #28
 8007d32:	9303      	str	r3, [sp, #12]
 8007d34:	688b      	ldr	r3, [r1, #8]
 8007d36:	4617      	mov	r7, r2
 8007d38:	1e5a      	subs	r2, r3, #1
 8007d3a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007d3e:	bf82      	ittt	hi
 8007d40:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007d44:	eb03 0b05 	addhi.w	fp, r3, r5
 8007d48:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007d4c:	460a      	mov	r2, r1
 8007d4e:	f04f 0500 	mov.w	r5, #0
 8007d52:	bf88      	it	hi
 8007d54:	608b      	strhi	r3, [r1, #8]
 8007d56:	680b      	ldr	r3, [r1, #0]
 8007d58:	4680      	mov	r8, r0
 8007d5a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007d5e:	f842 3b1c 	str.w	r3, [r2], #28
 8007d62:	460c      	mov	r4, r1
 8007d64:	bf98      	it	ls
 8007d66:	f04f 0b00 	movls.w	fp, #0
 8007d6a:	4616      	mov	r6, r2
 8007d6c:	46aa      	mov	sl, r5
 8007d6e:	46a9      	mov	r9, r5
 8007d70:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007d74:	9201      	str	r2, [sp, #4]
 8007d76:	9502      	str	r5, [sp, #8]
 8007d78:	68a2      	ldr	r2, [r4, #8]
 8007d7a:	b152      	cbz	r2, 8007d92 <_scanf_float+0x66>
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	2b4e      	cmp	r3, #78	@ 0x4e
 8007d82:	d865      	bhi.n	8007e50 <_scanf_float+0x124>
 8007d84:	2b40      	cmp	r3, #64	@ 0x40
 8007d86:	d83d      	bhi.n	8007e04 <_scanf_float+0xd8>
 8007d88:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007d8c:	b2c8      	uxtb	r0, r1
 8007d8e:	280e      	cmp	r0, #14
 8007d90:	d93b      	bls.n	8007e0a <_scanf_float+0xde>
 8007d92:	f1b9 0f00 	cmp.w	r9, #0
 8007d96:	d003      	beq.n	8007da0 <_scanf_float+0x74>
 8007d98:	6823      	ldr	r3, [r4, #0]
 8007d9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d9e:	6023      	str	r3, [r4, #0]
 8007da0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007da4:	f1ba 0f01 	cmp.w	sl, #1
 8007da8:	f200 8118 	bhi.w	8007fdc <_scanf_float+0x2b0>
 8007dac:	9b01      	ldr	r3, [sp, #4]
 8007dae:	429e      	cmp	r6, r3
 8007db0:	f200 8109 	bhi.w	8007fc6 <_scanf_float+0x29a>
 8007db4:	2001      	movs	r0, #1
 8007db6:	b007      	add	sp, #28
 8007db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dbc:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007dc0:	2a0d      	cmp	r2, #13
 8007dc2:	d8e6      	bhi.n	8007d92 <_scanf_float+0x66>
 8007dc4:	a101      	add	r1, pc, #4	@ (adr r1, 8007dcc <_scanf_float+0xa0>)
 8007dc6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007dca:	bf00      	nop
 8007dcc:	08007f13 	.word	0x08007f13
 8007dd0:	08007d93 	.word	0x08007d93
 8007dd4:	08007d93 	.word	0x08007d93
 8007dd8:	08007d93 	.word	0x08007d93
 8007ddc:	08007f73 	.word	0x08007f73
 8007de0:	08007f4b 	.word	0x08007f4b
 8007de4:	08007d93 	.word	0x08007d93
 8007de8:	08007d93 	.word	0x08007d93
 8007dec:	08007f21 	.word	0x08007f21
 8007df0:	08007d93 	.word	0x08007d93
 8007df4:	08007d93 	.word	0x08007d93
 8007df8:	08007d93 	.word	0x08007d93
 8007dfc:	08007d93 	.word	0x08007d93
 8007e00:	08007ed9 	.word	0x08007ed9
 8007e04:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007e08:	e7da      	b.n	8007dc0 <_scanf_float+0x94>
 8007e0a:	290e      	cmp	r1, #14
 8007e0c:	d8c1      	bhi.n	8007d92 <_scanf_float+0x66>
 8007e0e:	a001      	add	r0, pc, #4	@ (adr r0, 8007e14 <_scanf_float+0xe8>)
 8007e10:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007e14:	08007ec9 	.word	0x08007ec9
 8007e18:	08007d93 	.word	0x08007d93
 8007e1c:	08007ec9 	.word	0x08007ec9
 8007e20:	08007f5f 	.word	0x08007f5f
 8007e24:	08007d93 	.word	0x08007d93
 8007e28:	08007e71 	.word	0x08007e71
 8007e2c:	08007eaf 	.word	0x08007eaf
 8007e30:	08007eaf 	.word	0x08007eaf
 8007e34:	08007eaf 	.word	0x08007eaf
 8007e38:	08007eaf 	.word	0x08007eaf
 8007e3c:	08007eaf 	.word	0x08007eaf
 8007e40:	08007eaf 	.word	0x08007eaf
 8007e44:	08007eaf 	.word	0x08007eaf
 8007e48:	08007eaf 	.word	0x08007eaf
 8007e4c:	08007eaf 	.word	0x08007eaf
 8007e50:	2b6e      	cmp	r3, #110	@ 0x6e
 8007e52:	d809      	bhi.n	8007e68 <_scanf_float+0x13c>
 8007e54:	2b60      	cmp	r3, #96	@ 0x60
 8007e56:	d8b1      	bhi.n	8007dbc <_scanf_float+0x90>
 8007e58:	2b54      	cmp	r3, #84	@ 0x54
 8007e5a:	d07b      	beq.n	8007f54 <_scanf_float+0x228>
 8007e5c:	2b59      	cmp	r3, #89	@ 0x59
 8007e5e:	d198      	bne.n	8007d92 <_scanf_float+0x66>
 8007e60:	2d07      	cmp	r5, #7
 8007e62:	d196      	bne.n	8007d92 <_scanf_float+0x66>
 8007e64:	2508      	movs	r5, #8
 8007e66:	e02c      	b.n	8007ec2 <_scanf_float+0x196>
 8007e68:	2b74      	cmp	r3, #116	@ 0x74
 8007e6a:	d073      	beq.n	8007f54 <_scanf_float+0x228>
 8007e6c:	2b79      	cmp	r3, #121	@ 0x79
 8007e6e:	e7f6      	b.n	8007e5e <_scanf_float+0x132>
 8007e70:	6821      	ldr	r1, [r4, #0]
 8007e72:	05c8      	lsls	r0, r1, #23
 8007e74:	d51b      	bpl.n	8007eae <_scanf_float+0x182>
 8007e76:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007e7a:	6021      	str	r1, [r4, #0]
 8007e7c:	f109 0901 	add.w	r9, r9, #1
 8007e80:	f1bb 0f00 	cmp.w	fp, #0
 8007e84:	d003      	beq.n	8007e8e <_scanf_float+0x162>
 8007e86:	3201      	adds	r2, #1
 8007e88:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e8c:	60a2      	str	r2, [r4, #8]
 8007e8e:	68a3      	ldr	r3, [r4, #8]
 8007e90:	3b01      	subs	r3, #1
 8007e92:	60a3      	str	r3, [r4, #8]
 8007e94:	6923      	ldr	r3, [r4, #16]
 8007e96:	3301      	adds	r3, #1
 8007e98:	6123      	str	r3, [r4, #16]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	607b      	str	r3, [r7, #4]
 8007ea2:	f340 8087 	ble.w	8007fb4 <_scanf_float+0x288>
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	603b      	str	r3, [r7, #0]
 8007eac:	e764      	b.n	8007d78 <_scanf_float+0x4c>
 8007eae:	eb1a 0105 	adds.w	r1, sl, r5
 8007eb2:	f47f af6e 	bne.w	8007d92 <_scanf_float+0x66>
 8007eb6:	460d      	mov	r5, r1
 8007eb8:	468a      	mov	sl, r1
 8007eba:	6822      	ldr	r2, [r4, #0]
 8007ebc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007ec0:	6022      	str	r2, [r4, #0]
 8007ec2:	f806 3b01 	strb.w	r3, [r6], #1
 8007ec6:	e7e2      	b.n	8007e8e <_scanf_float+0x162>
 8007ec8:	6822      	ldr	r2, [r4, #0]
 8007eca:	0610      	lsls	r0, r2, #24
 8007ecc:	f57f af61 	bpl.w	8007d92 <_scanf_float+0x66>
 8007ed0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007ed4:	6022      	str	r2, [r4, #0]
 8007ed6:	e7f4      	b.n	8007ec2 <_scanf_float+0x196>
 8007ed8:	f1ba 0f00 	cmp.w	sl, #0
 8007edc:	d10e      	bne.n	8007efc <_scanf_float+0x1d0>
 8007ede:	f1b9 0f00 	cmp.w	r9, #0
 8007ee2:	d10e      	bne.n	8007f02 <_scanf_float+0x1d6>
 8007ee4:	6822      	ldr	r2, [r4, #0]
 8007ee6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007eea:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007eee:	d108      	bne.n	8007f02 <_scanf_float+0x1d6>
 8007ef0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007ef4:	f04f 0a01 	mov.w	sl, #1
 8007ef8:	6022      	str	r2, [r4, #0]
 8007efa:	e7e2      	b.n	8007ec2 <_scanf_float+0x196>
 8007efc:	f1ba 0f02 	cmp.w	sl, #2
 8007f00:	d055      	beq.n	8007fae <_scanf_float+0x282>
 8007f02:	2d01      	cmp	r5, #1
 8007f04:	d002      	beq.n	8007f0c <_scanf_float+0x1e0>
 8007f06:	2d04      	cmp	r5, #4
 8007f08:	f47f af43 	bne.w	8007d92 <_scanf_float+0x66>
 8007f0c:	3501      	adds	r5, #1
 8007f0e:	b2ed      	uxtb	r5, r5
 8007f10:	e7d7      	b.n	8007ec2 <_scanf_float+0x196>
 8007f12:	f1ba 0f01 	cmp.w	sl, #1
 8007f16:	f47f af3c 	bne.w	8007d92 <_scanf_float+0x66>
 8007f1a:	f04f 0a02 	mov.w	sl, #2
 8007f1e:	e7d0      	b.n	8007ec2 <_scanf_float+0x196>
 8007f20:	b97d      	cbnz	r5, 8007f42 <_scanf_float+0x216>
 8007f22:	f1b9 0f00 	cmp.w	r9, #0
 8007f26:	f47f af37 	bne.w	8007d98 <_scanf_float+0x6c>
 8007f2a:	6822      	ldr	r2, [r4, #0]
 8007f2c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007f30:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007f34:	f040 8103 	bne.w	800813e <_scanf_float+0x412>
 8007f38:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007f3c:	2501      	movs	r5, #1
 8007f3e:	6022      	str	r2, [r4, #0]
 8007f40:	e7bf      	b.n	8007ec2 <_scanf_float+0x196>
 8007f42:	2d03      	cmp	r5, #3
 8007f44:	d0e2      	beq.n	8007f0c <_scanf_float+0x1e0>
 8007f46:	2d05      	cmp	r5, #5
 8007f48:	e7de      	b.n	8007f08 <_scanf_float+0x1dc>
 8007f4a:	2d02      	cmp	r5, #2
 8007f4c:	f47f af21 	bne.w	8007d92 <_scanf_float+0x66>
 8007f50:	2503      	movs	r5, #3
 8007f52:	e7b6      	b.n	8007ec2 <_scanf_float+0x196>
 8007f54:	2d06      	cmp	r5, #6
 8007f56:	f47f af1c 	bne.w	8007d92 <_scanf_float+0x66>
 8007f5a:	2507      	movs	r5, #7
 8007f5c:	e7b1      	b.n	8007ec2 <_scanf_float+0x196>
 8007f5e:	6822      	ldr	r2, [r4, #0]
 8007f60:	0591      	lsls	r1, r2, #22
 8007f62:	f57f af16 	bpl.w	8007d92 <_scanf_float+0x66>
 8007f66:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007f6a:	6022      	str	r2, [r4, #0]
 8007f6c:	f8cd 9008 	str.w	r9, [sp, #8]
 8007f70:	e7a7      	b.n	8007ec2 <_scanf_float+0x196>
 8007f72:	6822      	ldr	r2, [r4, #0]
 8007f74:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007f78:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007f7c:	d006      	beq.n	8007f8c <_scanf_float+0x260>
 8007f7e:	0550      	lsls	r0, r2, #21
 8007f80:	f57f af07 	bpl.w	8007d92 <_scanf_float+0x66>
 8007f84:	f1b9 0f00 	cmp.w	r9, #0
 8007f88:	f000 80d9 	beq.w	800813e <_scanf_float+0x412>
 8007f8c:	0591      	lsls	r1, r2, #22
 8007f8e:	bf58      	it	pl
 8007f90:	9902      	ldrpl	r1, [sp, #8]
 8007f92:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007f96:	bf58      	it	pl
 8007f98:	eba9 0101 	subpl.w	r1, r9, r1
 8007f9c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007fa0:	f04f 0900 	mov.w	r9, #0
 8007fa4:	bf58      	it	pl
 8007fa6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007faa:	6022      	str	r2, [r4, #0]
 8007fac:	e789      	b.n	8007ec2 <_scanf_float+0x196>
 8007fae:	f04f 0a03 	mov.w	sl, #3
 8007fb2:	e786      	b.n	8007ec2 <_scanf_float+0x196>
 8007fb4:	4639      	mov	r1, r7
 8007fb6:	4640      	mov	r0, r8
 8007fb8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007fbc:	4798      	blx	r3
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	f43f aeda 	beq.w	8007d78 <_scanf_float+0x4c>
 8007fc4:	e6e5      	b.n	8007d92 <_scanf_float+0x66>
 8007fc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007fca:	463a      	mov	r2, r7
 8007fcc:	4640      	mov	r0, r8
 8007fce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007fd2:	4798      	blx	r3
 8007fd4:	6923      	ldr	r3, [r4, #16]
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	6123      	str	r3, [r4, #16]
 8007fda:	e6e7      	b.n	8007dac <_scanf_float+0x80>
 8007fdc:	1e6b      	subs	r3, r5, #1
 8007fde:	2b06      	cmp	r3, #6
 8007fe0:	d824      	bhi.n	800802c <_scanf_float+0x300>
 8007fe2:	2d02      	cmp	r5, #2
 8007fe4:	d836      	bhi.n	8008054 <_scanf_float+0x328>
 8007fe6:	9b01      	ldr	r3, [sp, #4]
 8007fe8:	429e      	cmp	r6, r3
 8007fea:	f67f aee3 	bls.w	8007db4 <_scanf_float+0x88>
 8007fee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007ff2:	463a      	mov	r2, r7
 8007ff4:	4640      	mov	r0, r8
 8007ff6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ffa:	4798      	blx	r3
 8007ffc:	6923      	ldr	r3, [r4, #16]
 8007ffe:	3b01      	subs	r3, #1
 8008000:	6123      	str	r3, [r4, #16]
 8008002:	e7f0      	b.n	8007fe6 <_scanf_float+0x2ba>
 8008004:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008008:	463a      	mov	r2, r7
 800800a:	4640      	mov	r0, r8
 800800c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008010:	4798      	blx	r3
 8008012:	6923      	ldr	r3, [r4, #16]
 8008014:	3b01      	subs	r3, #1
 8008016:	6123      	str	r3, [r4, #16]
 8008018:	f10a 3aff 	add.w	sl, sl, #4294967295
 800801c:	fa5f fa8a 	uxtb.w	sl, sl
 8008020:	f1ba 0f02 	cmp.w	sl, #2
 8008024:	d1ee      	bne.n	8008004 <_scanf_float+0x2d8>
 8008026:	3d03      	subs	r5, #3
 8008028:	b2ed      	uxtb	r5, r5
 800802a:	1b76      	subs	r6, r6, r5
 800802c:	6823      	ldr	r3, [r4, #0]
 800802e:	05da      	lsls	r2, r3, #23
 8008030:	d530      	bpl.n	8008094 <_scanf_float+0x368>
 8008032:	055b      	lsls	r3, r3, #21
 8008034:	d511      	bpl.n	800805a <_scanf_float+0x32e>
 8008036:	9b01      	ldr	r3, [sp, #4]
 8008038:	429e      	cmp	r6, r3
 800803a:	f67f aebb 	bls.w	8007db4 <_scanf_float+0x88>
 800803e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008042:	463a      	mov	r2, r7
 8008044:	4640      	mov	r0, r8
 8008046:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800804a:	4798      	blx	r3
 800804c:	6923      	ldr	r3, [r4, #16]
 800804e:	3b01      	subs	r3, #1
 8008050:	6123      	str	r3, [r4, #16]
 8008052:	e7f0      	b.n	8008036 <_scanf_float+0x30a>
 8008054:	46aa      	mov	sl, r5
 8008056:	46b3      	mov	fp, r6
 8008058:	e7de      	b.n	8008018 <_scanf_float+0x2ec>
 800805a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800805e:	6923      	ldr	r3, [r4, #16]
 8008060:	2965      	cmp	r1, #101	@ 0x65
 8008062:	f103 33ff 	add.w	r3, r3, #4294967295
 8008066:	f106 35ff 	add.w	r5, r6, #4294967295
 800806a:	6123      	str	r3, [r4, #16]
 800806c:	d00c      	beq.n	8008088 <_scanf_float+0x35c>
 800806e:	2945      	cmp	r1, #69	@ 0x45
 8008070:	d00a      	beq.n	8008088 <_scanf_float+0x35c>
 8008072:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008076:	463a      	mov	r2, r7
 8008078:	4640      	mov	r0, r8
 800807a:	4798      	blx	r3
 800807c:	6923      	ldr	r3, [r4, #16]
 800807e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008082:	3b01      	subs	r3, #1
 8008084:	1eb5      	subs	r5, r6, #2
 8008086:	6123      	str	r3, [r4, #16]
 8008088:	463a      	mov	r2, r7
 800808a:	4640      	mov	r0, r8
 800808c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008090:	4798      	blx	r3
 8008092:	462e      	mov	r6, r5
 8008094:	6822      	ldr	r2, [r4, #0]
 8008096:	f012 0210 	ands.w	r2, r2, #16
 800809a:	d001      	beq.n	80080a0 <_scanf_float+0x374>
 800809c:	2000      	movs	r0, #0
 800809e:	e68a      	b.n	8007db6 <_scanf_float+0x8a>
 80080a0:	7032      	strb	r2, [r6, #0]
 80080a2:	6823      	ldr	r3, [r4, #0]
 80080a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80080a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080ac:	d11c      	bne.n	80080e8 <_scanf_float+0x3bc>
 80080ae:	9b02      	ldr	r3, [sp, #8]
 80080b0:	454b      	cmp	r3, r9
 80080b2:	eba3 0209 	sub.w	r2, r3, r9
 80080b6:	d123      	bne.n	8008100 <_scanf_float+0x3d4>
 80080b8:	2200      	movs	r2, #0
 80080ba:	4640      	mov	r0, r8
 80080bc:	9901      	ldr	r1, [sp, #4]
 80080be:	f002 fd0f 	bl	800aae0 <_strtod_r>
 80080c2:	9b03      	ldr	r3, [sp, #12]
 80080c4:	6825      	ldr	r5, [r4, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f015 0f02 	tst.w	r5, #2
 80080cc:	4606      	mov	r6, r0
 80080ce:	460f      	mov	r7, r1
 80080d0:	f103 0204 	add.w	r2, r3, #4
 80080d4:	d01f      	beq.n	8008116 <_scanf_float+0x3ea>
 80080d6:	9903      	ldr	r1, [sp, #12]
 80080d8:	600a      	str	r2, [r1, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	e9c3 6700 	strd	r6, r7, [r3]
 80080e0:	68e3      	ldr	r3, [r4, #12]
 80080e2:	3301      	adds	r3, #1
 80080e4:	60e3      	str	r3, [r4, #12]
 80080e6:	e7d9      	b.n	800809c <_scanf_float+0x370>
 80080e8:	9b04      	ldr	r3, [sp, #16]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d0e4      	beq.n	80080b8 <_scanf_float+0x38c>
 80080ee:	9905      	ldr	r1, [sp, #20]
 80080f0:	230a      	movs	r3, #10
 80080f2:	4640      	mov	r0, r8
 80080f4:	3101      	adds	r1, #1
 80080f6:	f002 fd73 	bl	800abe0 <_strtol_r>
 80080fa:	9b04      	ldr	r3, [sp, #16]
 80080fc:	9e05      	ldr	r6, [sp, #20]
 80080fe:	1ac2      	subs	r2, r0, r3
 8008100:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008104:	429e      	cmp	r6, r3
 8008106:	bf28      	it	cs
 8008108:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800810c:	4630      	mov	r0, r6
 800810e:	490d      	ldr	r1, [pc, #52]	@ (8008144 <_scanf_float+0x418>)
 8008110:	f000 f956 	bl	80083c0 <siprintf>
 8008114:	e7d0      	b.n	80080b8 <_scanf_float+0x38c>
 8008116:	076d      	lsls	r5, r5, #29
 8008118:	d4dd      	bmi.n	80080d6 <_scanf_float+0x3aa>
 800811a:	9d03      	ldr	r5, [sp, #12]
 800811c:	602a      	str	r2, [r5, #0]
 800811e:	681d      	ldr	r5, [r3, #0]
 8008120:	4602      	mov	r2, r0
 8008122:	460b      	mov	r3, r1
 8008124:	f7f8 fc7c 	bl	8000a20 <__aeabi_dcmpun>
 8008128:	b120      	cbz	r0, 8008134 <_scanf_float+0x408>
 800812a:	4807      	ldr	r0, [pc, #28]	@ (8008148 <_scanf_float+0x41c>)
 800812c:	f000 fae4 	bl	80086f8 <nanf>
 8008130:	6028      	str	r0, [r5, #0]
 8008132:	e7d5      	b.n	80080e0 <_scanf_float+0x3b4>
 8008134:	4630      	mov	r0, r6
 8008136:	4639      	mov	r1, r7
 8008138:	f7f8 fcd0 	bl	8000adc <__aeabi_d2f>
 800813c:	e7f8      	b.n	8008130 <_scanf_float+0x404>
 800813e:	f04f 0900 	mov.w	r9, #0
 8008142:	e62d      	b.n	8007da0 <_scanf_float+0x74>
 8008144:	0800bdfa 	.word	0x0800bdfa
 8008148:	0800c195 	.word	0x0800c195

0800814c <std>:
 800814c:	2300      	movs	r3, #0
 800814e:	b510      	push	{r4, lr}
 8008150:	4604      	mov	r4, r0
 8008152:	e9c0 3300 	strd	r3, r3, [r0]
 8008156:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800815a:	6083      	str	r3, [r0, #8]
 800815c:	8181      	strh	r1, [r0, #12]
 800815e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008160:	81c2      	strh	r2, [r0, #14]
 8008162:	6183      	str	r3, [r0, #24]
 8008164:	4619      	mov	r1, r3
 8008166:	2208      	movs	r2, #8
 8008168:	305c      	adds	r0, #92	@ 0x5c
 800816a:	f000 fa21 	bl	80085b0 <memset>
 800816e:	4b0d      	ldr	r3, [pc, #52]	@ (80081a4 <std+0x58>)
 8008170:	6224      	str	r4, [r4, #32]
 8008172:	6263      	str	r3, [r4, #36]	@ 0x24
 8008174:	4b0c      	ldr	r3, [pc, #48]	@ (80081a8 <std+0x5c>)
 8008176:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008178:	4b0c      	ldr	r3, [pc, #48]	@ (80081ac <std+0x60>)
 800817a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800817c:	4b0c      	ldr	r3, [pc, #48]	@ (80081b0 <std+0x64>)
 800817e:	6323      	str	r3, [r4, #48]	@ 0x30
 8008180:	4b0c      	ldr	r3, [pc, #48]	@ (80081b4 <std+0x68>)
 8008182:	429c      	cmp	r4, r3
 8008184:	d006      	beq.n	8008194 <std+0x48>
 8008186:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800818a:	4294      	cmp	r4, r2
 800818c:	d002      	beq.n	8008194 <std+0x48>
 800818e:	33d0      	adds	r3, #208	@ 0xd0
 8008190:	429c      	cmp	r4, r3
 8008192:	d105      	bne.n	80081a0 <std+0x54>
 8008194:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800819c:	f000 ba84 	b.w	80086a8 <__retarget_lock_init_recursive>
 80081a0:	bd10      	pop	{r4, pc}
 80081a2:	bf00      	nop
 80081a4:	08008401 	.word	0x08008401
 80081a8:	08008423 	.word	0x08008423
 80081ac:	0800845b 	.word	0x0800845b
 80081b0:	0800847f 	.word	0x0800847f
 80081b4:	20002530 	.word	0x20002530

080081b8 <stdio_exit_handler>:
 80081b8:	4a02      	ldr	r2, [pc, #8]	@ (80081c4 <stdio_exit_handler+0xc>)
 80081ba:	4903      	ldr	r1, [pc, #12]	@ (80081c8 <stdio_exit_handler+0x10>)
 80081bc:	4803      	ldr	r0, [pc, #12]	@ (80081cc <stdio_exit_handler+0x14>)
 80081be:	f000 b869 	b.w	8008294 <_fwalk_sglue>
 80081c2:	bf00      	nop
 80081c4:	20000010 	.word	0x20000010
 80081c8:	0800b215 	.word	0x0800b215
 80081cc:	20000020 	.word	0x20000020

080081d0 <cleanup_stdio>:
 80081d0:	6841      	ldr	r1, [r0, #4]
 80081d2:	4b0c      	ldr	r3, [pc, #48]	@ (8008204 <cleanup_stdio+0x34>)
 80081d4:	b510      	push	{r4, lr}
 80081d6:	4299      	cmp	r1, r3
 80081d8:	4604      	mov	r4, r0
 80081da:	d001      	beq.n	80081e0 <cleanup_stdio+0x10>
 80081dc:	f003 f81a 	bl	800b214 <_fflush_r>
 80081e0:	68a1      	ldr	r1, [r4, #8]
 80081e2:	4b09      	ldr	r3, [pc, #36]	@ (8008208 <cleanup_stdio+0x38>)
 80081e4:	4299      	cmp	r1, r3
 80081e6:	d002      	beq.n	80081ee <cleanup_stdio+0x1e>
 80081e8:	4620      	mov	r0, r4
 80081ea:	f003 f813 	bl	800b214 <_fflush_r>
 80081ee:	68e1      	ldr	r1, [r4, #12]
 80081f0:	4b06      	ldr	r3, [pc, #24]	@ (800820c <cleanup_stdio+0x3c>)
 80081f2:	4299      	cmp	r1, r3
 80081f4:	d004      	beq.n	8008200 <cleanup_stdio+0x30>
 80081f6:	4620      	mov	r0, r4
 80081f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081fc:	f003 b80a 	b.w	800b214 <_fflush_r>
 8008200:	bd10      	pop	{r4, pc}
 8008202:	bf00      	nop
 8008204:	20002530 	.word	0x20002530
 8008208:	20002598 	.word	0x20002598
 800820c:	20002600 	.word	0x20002600

08008210 <global_stdio_init.part.0>:
 8008210:	b510      	push	{r4, lr}
 8008212:	4b0b      	ldr	r3, [pc, #44]	@ (8008240 <global_stdio_init.part.0+0x30>)
 8008214:	4c0b      	ldr	r4, [pc, #44]	@ (8008244 <global_stdio_init.part.0+0x34>)
 8008216:	4a0c      	ldr	r2, [pc, #48]	@ (8008248 <global_stdio_init.part.0+0x38>)
 8008218:	4620      	mov	r0, r4
 800821a:	601a      	str	r2, [r3, #0]
 800821c:	2104      	movs	r1, #4
 800821e:	2200      	movs	r2, #0
 8008220:	f7ff ff94 	bl	800814c <std>
 8008224:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008228:	2201      	movs	r2, #1
 800822a:	2109      	movs	r1, #9
 800822c:	f7ff ff8e 	bl	800814c <std>
 8008230:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008234:	2202      	movs	r2, #2
 8008236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800823a:	2112      	movs	r1, #18
 800823c:	f7ff bf86 	b.w	800814c <std>
 8008240:	20002668 	.word	0x20002668
 8008244:	20002530 	.word	0x20002530
 8008248:	080081b9 	.word	0x080081b9

0800824c <__sfp_lock_acquire>:
 800824c:	4801      	ldr	r0, [pc, #4]	@ (8008254 <__sfp_lock_acquire+0x8>)
 800824e:	f000 ba2c 	b.w	80086aa <__retarget_lock_acquire_recursive>
 8008252:	bf00      	nop
 8008254:	20002671 	.word	0x20002671

08008258 <__sfp_lock_release>:
 8008258:	4801      	ldr	r0, [pc, #4]	@ (8008260 <__sfp_lock_release+0x8>)
 800825a:	f000 ba27 	b.w	80086ac <__retarget_lock_release_recursive>
 800825e:	bf00      	nop
 8008260:	20002671 	.word	0x20002671

08008264 <__sinit>:
 8008264:	b510      	push	{r4, lr}
 8008266:	4604      	mov	r4, r0
 8008268:	f7ff fff0 	bl	800824c <__sfp_lock_acquire>
 800826c:	6a23      	ldr	r3, [r4, #32]
 800826e:	b11b      	cbz	r3, 8008278 <__sinit+0x14>
 8008270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008274:	f7ff bff0 	b.w	8008258 <__sfp_lock_release>
 8008278:	4b04      	ldr	r3, [pc, #16]	@ (800828c <__sinit+0x28>)
 800827a:	6223      	str	r3, [r4, #32]
 800827c:	4b04      	ldr	r3, [pc, #16]	@ (8008290 <__sinit+0x2c>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d1f5      	bne.n	8008270 <__sinit+0xc>
 8008284:	f7ff ffc4 	bl	8008210 <global_stdio_init.part.0>
 8008288:	e7f2      	b.n	8008270 <__sinit+0xc>
 800828a:	bf00      	nop
 800828c:	080081d1 	.word	0x080081d1
 8008290:	20002668 	.word	0x20002668

08008294 <_fwalk_sglue>:
 8008294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008298:	4607      	mov	r7, r0
 800829a:	4688      	mov	r8, r1
 800829c:	4614      	mov	r4, r2
 800829e:	2600      	movs	r6, #0
 80082a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082a4:	f1b9 0901 	subs.w	r9, r9, #1
 80082a8:	d505      	bpl.n	80082b6 <_fwalk_sglue+0x22>
 80082aa:	6824      	ldr	r4, [r4, #0]
 80082ac:	2c00      	cmp	r4, #0
 80082ae:	d1f7      	bne.n	80082a0 <_fwalk_sglue+0xc>
 80082b0:	4630      	mov	r0, r6
 80082b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082b6:	89ab      	ldrh	r3, [r5, #12]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d907      	bls.n	80082cc <_fwalk_sglue+0x38>
 80082bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082c0:	3301      	adds	r3, #1
 80082c2:	d003      	beq.n	80082cc <_fwalk_sglue+0x38>
 80082c4:	4629      	mov	r1, r5
 80082c6:	4638      	mov	r0, r7
 80082c8:	47c0      	blx	r8
 80082ca:	4306      	orrs	r6, r0
 80082cc:	3568      	adds	r5, #104	@ 0x68
 80082ce:	e7e9      	b.n	80082a4 <_fwalk_sglue+0x10>

080082d0 <iprintf>:
 80082d0:	b40f      	push	{r0, r1, r2, r3}
 80082d2:	b507      	push	{r0, r1, r2, lr}
 80082d4:	4906      	ldr	r1, [pc, #24]	@ (80082f0 <iprintf+0x20>)
 80082d6:	ab04      	add	r3, sp, #16
 80082d8:	6808      	ldr	r0, [r1, #0]
 80082da:	f853 2b04 	ldr.w	r2, [r3], #4
 80082de:	6881      	ldr	r1, [r0, #8]
 80082e0:	9301      	str	r3, [sp, #4]
 80082e2:	f002 fdff 	bl	800aee4 <_vfiprintf_r>
 80082e6:	b003      	add	sp, #12
 80082e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80082ec:	b004      	add	sp, #16
 80082ee:	4770      	bx	lr
 80082f0:	2000001c 	.word	0x2000001c

080082f4 <putchar>:
 80082f4:	4b02      	ldr	r3, [pc, #8]	@ (8008300 <putchar+0xc>)
 80082f6:	4601      	mov	r1, r0
 80082f8:	6818      	ldr	r0, [r3, #0]
 80082fa:	6882      	ldr	r2, [r0, #8]
 80082fc:	f003 b813 	b.w	800b326 <_putc_r>
 8008300:	2000001c 	.word	0x2000001c

08008304 <_puts_r>:
 8008304:	6a03      	ldr	r3, [r0, #32]
 8008306:	b570      	push	{r4, r5, r6, lr}
 8008308:	4605      	mov	r5, r0
 800830a:	460e      	mov	r6, r1
 800830c:	6884      	ldr	r4, [r0, #8]
 800830e:	b90b      	cbnz	r3, 8008314 <_puts_r+0x10>
 8008310:	f7ff ffa8 	bl	8008264 <__sinit>
 8008314:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008316:	07db      	lsls	r3, r3, #31
 8008318:	d405      	bmi.n	8008326 <_puts_r+0x22>
 800831a:	89a3      	ldrh	r3, [r4, #12]
 800831c:	0598      	lsls	r0, r3, #22
 800831e:	d402      	bmi.n	8008326 <_puts_r+0x22>
 8008320:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008322:	f000 f9c2 	bl	80086aa <__retarget_lock_acquire_recursive>
 8008326:	89a3      	ldrh	r3, [r4, #12]
 8008328:	0719      	lsls	r1, r3, #28
 800832a:	d502      	bpl.n	8008332 <_puts_r+0x2e>
 800832c:	6923      	ldr	r3, [r4, #16]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d135      	bne.n	800839e <_puts_r+0x9a>
 8008332:	4621      	mov	r1, r4
 8008334:	4628      	mov	r0, r5
 8008336:	f000 f8e5 	bl	8008504 <__swsetup_r>
 800833a:	b380      	cbz	r0, 800839e <_puts_r+0x9a>
 800833c:	f04f 35ff 	mov.w	r5, #4294967295
 8008340:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008342:	07da      	lsls	r2, r3, #31
 8008344:	d405      	bmi.n	8008352 <_puts_r+0x4e>
 8008346:	89a3      	ldrh	r3, [r4, #12]
 8008348:	059b      	lsls	r3, r3, #22
 800834a:	d402      	bmi.n	8008352 <_puts_r+0x4e>
 800834c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800834e:	f000 f9ad 	bl	80086ac <__retarget_lock_release_recursive>
 8008352:	4628      	mov	r0, r5
 8008354:	bd70      	pop	{r4, r5, r6, pc}
 8008356:	2b00      	cmp	r3, #0
 8008358:	da04      	bge.n	8008364 <_puts_r+0x60>
 800835a:	69a2      	ldr	r2, [r4, #24]
 800835c:	429a      	cmp	r2, r3
 800835e:	dc17      	bgt.n	8008390 <_puts_r+0x8c>
 8008360:	290a      	cmp	r1, #10
 8008362:	d015      	beq.n	8008390 <_puts_r+0x8c>
 8008364:	6823      	ldr	r3, [r4, #0]
 8008366:	1c5a      	adds	r2, r3, #1
 8008368:	6022      	str	r2, [r4, #0]
 800836a:	7019      	strb	r1, [r3, #0]
 800836c:	68a3      	ldr	r3, [r4, #8]
 800836e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008372:	3b01      	subs	r3, #1
 8008374:	60a3      	str	r3, [r4, #8]
 8008376:	2900      	cmp	r1, #0
 8008378:	d1ed      	bne.n	8008356 <_puts_r+0x52>
 800837a:	2b00      	cmp	r3, #0
 800837c:	da11      	bge.n	80083a2 <_puts_r+0x9e>
 800837e:	4622      	mov	r2, r4
 8008380:	210a      	movs	r1, #10
 8008382:	4628      	mov	r0, r5
 8008384:	f000 f87f 	bl	8008486 <__swbuf_r>
 8008388:	3001      	adds	r0, #1
 800838a:	d0d7      	beq.n	800833c <_puts_r+0x38>
 800838c:	250a      	movs	r5, #10
 800838e:	e7d7      	b.n	8008340 <_puts_r+0x3c>
 8008390:	4622      	mov	r2, r4
 8008392:	4628      	mov	r0, r5
 8008394:	f000 f877 	bl	8008486 <__swbuf_r>
 8008398:	3001      	adds	r0, #1
 800839a:	d1e7      	bne.n	800836c <_puts_r+0x68>
 800839c:	e7ce      	b.n	800833c <_puts_r+0x38>
 800839e:	3e01      	subs	r6, #1
 80083a0:	e7e4      	b.n	800836c <_puts_r+0x68>
 80083a2:	6823      	ldr	r3, [r4, #0]
 80083a4:	1c5a      	adds	r2, r3, #1
 80083a6:	6022      	str	r2, [r4, #0]
 80083a8:	220a      	movs	r2, #10
 80083aa:	701a      	strb	r2, [r3, #0]
 80083ac:	e7ee      	b.n	800838c <_puts_r+0x88>
	...

080083b0 <puts>:
 80083b0:	4b02      	ldr	r3, [pc, #8]	@ (80083bc <puts+0xc>)
 80083b2:	4601      	mov	r1, r0
 80083b4:	6818      	ldr	r0, [r3, #0]
 80083b6:	f7ff bfa5 	b.w	8008304 <_puts_r>
 80083ba:	bf00      	nop
 80083bc:	2000001c 	.word	0x2000001c

080083c0 <siprintf>:
 80083c0:	b40e      	push	{r1, r2, r3}
 80083c2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80083c6:	b500      	push	{lr}
 80083c8:	b09c      	sub	sp, #112	@ 0x70
 80083ca:	ab1d      	add	r3, sp, #116	@ 0x74
 80083cc:	9002      	str	r0, [sp, #8]
 80083ce:	9006      	str	r0, [sp, #24]
 80083d0:	9107      	str	r1, [sp, #28]
 80083d2:	9104      	str	r1, [sp, #16]
 80083d4:	4808      	ldr	r0, [pc, #32]	@ (80083f8 <siprintf+0x38>)
 80083d6:	4909      	ldr	r1, [pc, #36]	@ (80083fc <siprintf+0x3c>)
 80083d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80083dc:	9105      	str	r1, [sp, #20]
 80083de:	6800      	ldr	r0, [r0, #0]
 80083e0:	a902      	add	r1, sp, #8
 80083e2:	9301      	str	r3, [sp, #4]
 80083e4:	f002 fc5a 	bl	800ac9c <_svfiprintf_r>
 80083e8:	2200      	movs	r2, #0
 80083ea:	9b02      	ldr	r3, [sp, #8]
 80083ec:	701a      	strb	r2, [r3, #0]
 80083ee:	b01c      	add	sp, #112	@ 0x70
 80083f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80083f4:	b003      	add	sp, #12
 80083f6:	4770      	bx	lr
 80083f8:	2000001c 	.word	0x2000001c
 80083fc:	ffff0208 	.word	0xffff0208

08008400 <__sread>:
 8008400:	b510      	push	{r4, lr}
 8008402:	460c      	mov	r4, r1
 8008404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008408:	f000 f900 	bl	800860c <_read_r>
 800840c:	2800      	cmp	r0, #0
 800840e:	bfab      	itete	ge
 8008410:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008412:	89a3      	ldrhlt	r3, [r4, #12]
 8008414:	181b      	addge	r3, r3, r0
 8008416:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800841a:	bfac      	ite	ge
 800841c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800841e:	81a3      	strhlt	r3, [r4, #12]
 8008420:	bd10      	pop	{r4, pc}

08008422 <__swrite>:
 8008422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008426:	461f      	mov	r7, r3
 8008428:	898b      	ldrh	r3, [r1, #12]
 800842a:	4605      	mov	r5, r0
 800842c:	05db      	lsls	r3, r3, #23
 800842e:	460c      	mov	r4, r1
 8008430:	4616      	mov	r6, r2
 8008432:	d505      	bpl.n	8008440 <__swrite+0x1e>
 8008434:	2302      	movs	r3, #2
 8008436:	2200      	movs	r2, #0
 8008438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800843c:	f000 f8d4 	bl	80085e8 <_lseek_r>
 8008440:	89a3      	ldrh	r3, [r4, #12]
 8008442:	4632      	mov	r2, r6
 8008444:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008448:	81a3      	strh	r3, [r4, #12]
 800844a:	4628      	mov	r0, r5
 800844c:	463b      	mov	r3, r7
 800844e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008456:	f000 b8eb 	b.w	8008630 <_write_r>

0800845a <__sseek>:
 800845a:	b510      	push	{r4, lr}
 800845c:	460c      	mov	r4, r1
 800845e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008462:	f000 f8c1 	bl	80085e8 <_lseek_r>
 8008466:	1c43      	adds	r3, r0, #1
 8008468:	89a3      	ldrh	r3, [r4, #12]
 800846a:	bf15      	itete	ne
 800846c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800846e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008472:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008476:	81a3      	strheq	r3, [r4, #12]
 8008478:	bf18      	it	ne
 800847a:	81a3      	strhne	r3, [r4, #12]
 800847c:	bd10      	pop	{r4, pc}

0800847e <__sclose>:
 800847e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008482:	f000 b8a1 	b.w	80085c8 <_close_r>

08008486 <__swbuf_r>:
 8008486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008488:	460e      	mov	r6, r1
 800848a:	4614      	mov	r4, r2
 800848c:	4605      	mov	r5, r0
 800848e:	b118      	cbz	r0, 8008498 <__swbuf_r+0x12>
 8008490:	6a03      	ldr	r3, [r0, #32]
 8008492:	b90b      	cbnz	r3, 8008498 <__swbuf_r+0x12>
 8008494:	f7ff fee6 	bl	8008264 <__sinit>
 8008498:	69a3      	ldr	r3, [r4, #24]
 800849a:	60a3      	str	r3, [r4, #8]
 800849c:	89a3      	ldrh	r3, [r4, #12]
 800849e:	071a      	lsls	r2, r3, #28
 80084a0:	d501      	bpl.n	80084a6 <__swbuf_r+0x20>
 80084a2:	6923      	ldr	r3, [r4, #16]
 80084a4:	b943      	cbnz	r3, 80084b8 <__swbuf_r+0x32>
 80084a6:	4621      	mov	r1, r4
 80084a8:	4628      	mov	r0, r5
 80084aa:	f000 f82b 	bl	8008504 <__swsetup_r>
 80084ae:	b118      	cbz	r0, 80084b8 <__swbuf_r+0x32>
 80084b0:	f04f 37ff 	mov.w	r7, #4294967295
 80084b4:	4638      	mov	r0, r7
 80084b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084b8:	6823      	ldr	r3, [r4, #0]
 80084ba:	6922      	ldr	r2, [r4, #16]
 80084bc:	b2f6      	uxtb	r6, r6
 80084be:	1a98      	subs	r0, r3, r2
 80084c0:	6963      	ldr	r3, [r4, #20]
 80084c2:	4637      	mov	r7, r6
 80084c4:	4283      	cmp	r3, r0
 80084c6:	dc05      	bgt.n	80084d4 <__swbuf_r+0x4e>
 80084c8:	4621      	mov	r1, r4
 80084ca:	4628      	mov	r0, r5
 80084cc:	f002 fea2 	bl	800b214 <_fflush_r>
 80084d0:	2800      	cmp	r0, #0
 80084d2:	d1ed      	bne.n	80084b0 <__swbuf_r+0x2a>
 80084d4:	68a3      	ldr	r3, [r4, #8]
 80084d6:	3b01      	subs	r3, #1
 80084d8:	60a3      	str	r3, [r4, #8]
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	1c5a      	adds	r2, r3, #1
 80084de:	6022      	str	r2, [r4, #0]
 80084e0:	701e      	strb	r6, [r3, #0]
 80084e2:	6962      	ldr	r2, [r4, #20]
 80084e4:	1c43      	adds	r3, r0, #1
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d004      	beq.n	80084f4 <__swbuf_r+0x6e>
 80084ea:	89a3      	ldrh	r3, [r4, #12]
 80084ec:	07db      	lsls	r3, r3, #31
 80084ee:	d5e1      	bpl.n	80084b4 <__swbuf_r+0x2e>
 80084f0:	2e0a      	cmp	r6, #10
 80084f2:	d1df      	bne.n	80084b4 <__swbuf_r+0x2e>
 80084f4:	4621      	mov	r1, r4
 80084f6:	4628      	mov	r0, r5
 80084f8:	f002 fe8c 	bl	800b214 <_fflush_r>
 80084fc:	2800      	cmp	r0, #0
 80084fe:	d0d9      	beq.n	80084b4 <__swbuf_r+0x2e>
 8008500:	e7d6      	b.n	80084b0 <__swbuf_r+0x2a>
	...

08008504 <__swsetup_r>:
 8008504:	b538      	push	{r3, r4, r5, lr}
 8008506:	4b29      	ldr	r3, [pc, #164]	@ (80085ac <__swsetup_r+0xa8>)
 8008508:	4605      	mov	r5, r0
 800850a:	6818      	ldr	r0, [r3, #0]
 800850c:	460c      	mov	r4, r1
 800850e:	b118      	cbz	r0, 8008518 <__swsetup_r+0x14>
 8008510:	6a03      	ldr	r3, [r0, #32]
 8008512:	b90b      	cbnz	r3, 8008518 <__swsetup_r+0x14>
 8008514:	f7ff fea6 	bl	8008264 <__sinit>
 8008518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800851c:	0719      	lsls	r1, r3, #28
 800851e:	d422      	bmi.n	8008566 <__swsetup_r+0x62>
 8008520:	06da      	lsls	r2, r3, #27
 8008522:	d407      	bmi.n	8008534 <__swsetup_r+0x30>
 8008524:	2209      	movs	r2, #9
 8008526:	602a      	str	r2, [r5, #0]
 8008528:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800852c:	f04f 30ff 	mov.w	r0, #4294967295
 8008530:	81a3      	strh	r3, [r4, #12]
 8008532:	e033      	b.n	800859c <__swsetup_r+0x98>
 8008534:	0758      	lsls	r0, r3, #29
 8008536:	d512      	bpl.n	800855e <__swsetup_r+0x5a>
 8008538:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800853a:	b141      	cbz	r1, 800854e <__swsetup_r+0x4a>
 800853c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008540:	4299      	cmp	r1, r3
 8008542:	d002      	beq.n	800854a <__swsetup_r+0x46>
 8008544:	4628      	mov	r0, r5
 8008546:	f000 ff2b 	bl	80093a0 <_free_r>
 800854a:	2300      	movs	r3, #0
 800854c:	6363      	str	r3, [r4, #52]	@ 0x34
 800854e:	89a3      	ldrh	r3, [r4, #12]
 8008550:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008554:	81a3      	strh	r3, [r4, #12]
 8008556:	2300      	movs	r3, #0
 8008558:	6063      	str	r3, [r4, #4]
 800855a:	6923      	ldr	r3, [r4, #16]
 800855c:	6023      	str	r3, [r4, #0]
 800855e:	89a3      	ldrh	r3, [r4, #12]
 8008560:	f043 0308 	orr.w	r3, r3, #8
 8008564:	81a3      	strh	r3, [r4, #12]
 8008566:	6923      	ldr	r3, [r4, #16]
 8008568:	b94b      	cbnz	r3, 800857e <__swsetup_r+0x7a>
 800856a:	89a3      	ldrh	r3, [r4, #12]
 800856c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008570:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008574:	d003      	beq.n	800857e <__swsetup_r+0x7a>
 8008576:	4621      	mov	r1, r4
 8008578:	4628      	mov	r0, r5
 800857a:	f002 fe98 	bl	800b2ae <__smakebuf_r>
 800857e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008582:	f013 0201 	ands.w	r2, r3, #1
 8008586:	d00a      	beq.n	800859e <__swsetup_r+0x9a>
 8008588:	2200      	movs	r2, #0
 800858a:	60a2      	str	r2, [r4, #8]
 800858c:	6962      	ldr	r2, [r4, #20]
 800858e:	4252      	negs	r2, r2
 8008590:	61a2      	str	r2, [r4, #24]
 8008592:	6922      	ldr	r2, [r4, #16]
 8008594:	b942      	cbnz	r2, 80085a8 <__swsetup_r+0xa4>
 8008596:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800859a:	d1c5      	bne.n	8008528 <__swsetup_r+0x24>
 800859c:	bd38      	pop	{r3, r4, r5, pc}
 800859e:	0799      	lsls	r1, r3, #30
 80085a0:	bf58      	it	pl
 80085a2:	6962      	ldrpl	r2, [r4, #20]
 80085a4:	60a2      	str	r2, [r4, #8]
 80085a6:	e7f4      	b.n	8008592 <__swsetup_r+0x8e>
 80085a8:	2000      	movs	r0, #0
 80085aa:	e7f7      	b.n	800859c <__swsetup_r+0x98>
 80085ac:	2000001c 	.word	0x2000001c

080085b0 <memset>:
 80085b0:	4603      	mov	r3, r0
 80085b2:	4402      	add	r2, r0
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d100      	bne.n	80085ba <memset+0xa>
 80085b8:	4770      	bx	lr
 80085ba:	f803 1b01 	strb.w	r1, [r3], #1
 80085be:	e7f9      	b.n	80085b4 <memset+0x4>

080085c0 <_localeconv_r>:
 80085c0:	4800      	ldr	r0, [pc, #0]	@ (80085c4 <_localeconv_r+0x4>)
 80085c2:	4770      	bx	lr
 80085c4:	2000015c 	.word	0x2000015c

080085c8 <_close_r>:
 80085c8:	b538      	push	{r3, r4, r5, lr}
 80085ca:	2300      	movs	r3, #0
 80085cc:	4d05      	ldr	r5, [pc, #20]	@ (80085e4 <_close_r+0x1c>)
 80085ce:	4604      	mov	r4, r0
 80085d0:	4608      	mov	r0, r1
 80085d2:	602b      	str	r3, [r5, #0]
 80085d4:	f7f9 fd6f 	bl	80020b6 <_close>
 80085d8:	1c43      	adds	r3, r0, #1
 80085da:	d102      	bne.n	80085e2 <_close_r+0x1a>
 80085dc:	682b      	ldr	r3, [r5, #0]
 80085de:	b103      	cbz	r3, 80085e2 <_close_r+0x1a>
 80085e0:	6023      	str	r3, [r4, #0]
 80085e2:	bd38      	pop	{r3, r4, r5, pc}
 80085e4:	2000266c 	.word	0x2000266c

080085e8 <_lseek_r>:
 80085e8:	b538      	push	{r3, r4, r5, lr}
 80085ea:	4604      	mov	r4, r0
 80085ec:	4608      	mov	r0, r1
 80085ee:	4611      	mov	r1, r2
 80085f0:	2200      	movs	r2, #0
 80085f2:	4d05      	ldr	r5, [pc, #20]	@ (8008608 <_lseek_r+0x20>)
 80085f4:	602a      	str	r2, [r5, #0]
 80085f6:	461a      	mov	r2, r3
 80085f8:	f7f9 fd81 	bl	80020fe <_lseek>
 80085fc:	1c43      	adds	r3, r0, #1
 80085fe:	d102      	bne.n	8008606 <_lseek_r+0x1e>
 8008600:	682b      	ldr	r3, [r5, #0]
 8008602:	b103      	cbz	r3, 8008606 <_lseek_r+0x1e>
 8008604:	6023      	str	r3, [r4, #0]
 8008606:	bd38      	pop	{r3, r4, r5, pc}
 8008608:	2000266c 	.word	0x2000266c

0800860c <_read_r>:
 800860c:	b538      	push	{r3, r4, r5, lr}
 800860e:	4604      	mov	r4, r0
 8008610:	4608      	mov	r0, r1
 8008612:	4611      	mov	r1, r2
 8008614:	2200      	movs	r2, #0
 8008616:	4d05      	ldr	r5, [pc, #20]	@ (800862c <_read_r+0x20>)
 8008618:	602a      	str	r2, [r5, #0]
 800861a:	461a      	mov	r2, r3
 800861c:	f7f9 fd12 	bl	8002044 <_read>
 8008620:	1c43      	adds	r3, r0, #1
 8008622:	d102      	bne.n	800862a <_read_r+0x1e>
 8008624:	682b      	ldr	r3, [r5, #0]
 8008626:	b103      	cbz	r3, 800862a <_read_r+0x1e>
 8008628:	6023      	str	r3, [r4, #0]
 800862a:	bd38      	pop	{r3, r4, r5, pc}
 800862c:	2000266c 	.word	0x2000266c

08008630 <_write_r>:
 8008630:	b538      	push	{r3, r4, r5, lr}
 8008632:	4604      	mov	r4, r0
 8008634:	4608      	mov	r0, r1
 8008636:	4611      	mov	r1, r2
 8008638:	2200      	movs	r2, #0
 800863a:	4d05      	ldr	r5, [pc, #20]	@ (8008650 <_write_r+0x20>)
 800863c:	602a      	str	r2, [r5, #0]
 800863e:	461a      	mov	r2, r3
 8008640:	f7f9 fd1d 	bl	800207e <_write>
 8008644:	1c43      	adds	r3, r0, #1
 8008646:	d102      	bne.n	800864e <_write_r+0x1e>
 8008648:	682b      	ldr	r3, [r5, #0]
 800864a:	b103      	cbz	r3, 800864e <_write_r+0x1e>
 800864c:	6023      	str	r3, [r4, #0]
 800864e:	bd38      	pop	{r3, r4, r5, pc}
 8008650:	2000266c 	.word	0x2000266c

08008654 <__errno>:
 8008654:	4b01      	ldr	r3, [pc, #4]	@ (800865c <__errno+0x8>)
 8008656:	6818      	ldr	r0, [r3, #0]
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	2000001c 	.word	0x2000001c

08008660 <__libc_init_array>:
 8008660:	b570      	push	{r4, r5, r6, lr}
 8008662:	2600      	movs	r6, #0
 8008664:	4d0c      	ldr	r5, [pc, #48]	@ (8008698 <__libc_init_array+0x38>)
 8008666:	4c0d      	ldr	r4, [pc, #52]	@ (800869c <__libc_init_array+0x3c>)
 8008668:	1b64      	subs	r4, r4, r5
 800866a:	10a4      	asrs	r4, r4, #2
 800866c:	42a6      	cmp	r6, r4
 800866e:	d109      	bne.n	8008684 <__libc_init_array+0x24>
 8008670:	f003 fb10 	bl	800bc94 <_init>
 8008674:	2600      	movs	r6, #0
 8008676:	4d0a      	ldr	r5, [pc, #40]	@ (80086a0 <__libc_init_array+0x40>)
 8008678:	4c0a      	ldr	r4, [pc, #40]	@ (80086a4 <__libc_init_array+0x44>)
 800867a:	1b64      	subs	r4, r4, r5
 800867c:	10a4      	asrs	r4, r4, #2
 800867e:	42a6      	cmp	r6, r4
 8008680:	d105      	bne.n	800868e <__libc_init_array+0x2e>
 8008682:	bd70      	pop	{r4, r5, r6, pc}
 8008684:	f855 3b04 	ldr.w	r3, [r5], #4
 8008688:	4798      	blx	r3
 800868a:	3601      	adds	r6, #1
 800868c:	e7ee      	b.n	800866c <__libc_init_array+0xc>
 800868e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008692:	4798      	blx	r3
 8008694:	3601      	adds	r6, #1
 8008696:	e7f2      	b.n	800867e <__libc_init_array+0x1e>
 8008698:	0800c200 	.word	0x0800c200
 800869c:	0800c200 	.word	0x0800c200
 80086a0:	0800c200 	.word	0x0800c200
 80086a4:	0800c204 	.word	0x0800c204

080086a8 <__retarget_lock_init_recursive>:
 80086a8:	4770      	bx	lr

080086aa <__retarget_lock_acquire_recursive>:
 80086aa:	4770      	bx	lr

080086ac <__retarget_lock_release_recursive>:
 80086ac:	4770      	bx	lr

080086ae <strcpy>:
 80086ae:	4603      	mov	r3, r0
 80086b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086b4:	f803 2b01 	strb.w	r2, [r3], #1
 80086b8:	2a00      	cmp	r2, #0
 80086ba:	d1f9      	bne.n	80086b0 <strcpy+0x2>
 80086bc:	4770      	bx	lr

080086be <memchr>:
 80086be:	4603      	mov	r3, r0
 80086c0:	b510      	push	{r4, lr}
 80086c2:	b2c9      	uxtb	r1, r1
 80086c4:	4402      	add	r2, r0
 80086c6:	4293      	cmp	r3, r2
 80086c8:	4618      	mov	r0, r3
 80086ca:	d101      	bne.n	80086d0 <memchr+0x12>
 80086cc:	2000      	movs	r0, #0
 80086ce:	e003      	b.n	80086d8 <memchr+0x1a>
 80086d0:	7804      	ldrb	r4, [r0, #0]
 80086d2:	3301      	adds	r3, #1
 80086d4:	428c      	cmp	r4, r1
 80086d6:	d1f6      	bne.n	80086c6 <memchr+0x8>
 80086d8:	bd10      	pop	{r4, pc}

080086da <memcpy>:
 80086da:	440a      	add	r2, r1
 80086dc:	4291      	cmp	r1, r2
 80086de:	f100 33ff 	add.w	r3, r0, #4294967295
 80086e2:	d100      	bne.n	80086e6 <memcpy+0xc>
 80086e4:	4770      	bx	lr
 80086e6:	b510      	push	{r4, lr}
 80086e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086ec:	4291      	cmp	r1, r2
 80086ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086f2:	d1f9      	bne.n	80086e8 <memcpy+0xe>
 80086f4:	bd10      	pop	{r4, pc}
	...

080086f8 <nanf>:
 80086f8:	4800      	ldr	r0, [pc, #0]	@ (80086fc <nanf+0x4>)
 80086fa:	4770      	bx	lr
 80086fc:	7fc00000 	.word	0x7fc00000

08008700 <quorem>:
 8008700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008704:	6903      	ldr	r3, [r0, #16]
 8008706:	690c      	ldr	r4, [r1, #16]
 8008708:	4607      	mov	r7, r0
 800870a:	42a3      	cmp	r3, r4
 800870c:	db7e      	blt.n	800880c <quorem+0x10c>
 800870e:	3c01      	subs	r4, #1
 8008710:	00a3      	lsls	r3, r4, #2
 8008712:	f100 0514 	add.w	r5, r0, #20
 8008716:	f101 0814 	add.w	r8, r1, #20
 800871a:	9300      	str	r3, [sp, #0]
 800871c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008720:	9301      	str	r3, [sp, #4]
 8008722:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008726:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800872a:	3301      	adds	r3, #1
 800872c:	429a      	cmp	r2, r3
 800872e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008732:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008736:	d32e      	bcc.n	8008796 <quorem+0x96>
 8008738:	f04f 0a00 	mov.w	sl, #0
 800873c:	46c4      	mov	ip, r8
 800873e:	46ae      	mov	lr, r5
 8008740:	46d3      	mov	fp, sl
 8008742:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008746:	b298      	uxth	r0, r3
 8008748:	fb06 a000 	mla	r0, r6, r0, sl
 800874c:	0c1b      	lsrs	r3, r3, #16
 800874e:	0c02      	lsrs	r2, r0, #16
 8008750:	fb06 2303 	mla	r3, r6, r3, r2
 8008754:	f8de 2000 	ldr.w	r2, [lr]
 8008758:	b280      	uxth	r0, r0
 800875a:	b292      	uxth	r2, r2
 800875c:	1a12      	subs	r2, r2, r0
 800875e:	445a      	add	r2, fp
 8008760:	f8de 0000 	ldr.w	r0, [lr]
 8008764:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008768:	b29b      	uxth	r3, r3
 800876a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800876e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008772:	b292      	uxth	r2, r2
 8008774:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008778:	45e1      	cmp	r9, ip
 800877a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800877e:	f84e 2b04 	str.w	r2, [lr], #4
 8008782:	d2de      	bcs.n	8008742 <quorem+0x42>
 8008784:	9b00      	ldr	r3, [sp, #0]
 8008786:	58eb      	ldr	r3, [r5, r3]
 8008788:	b92b      	cbnz	r3, 8008796 <quorem+0x96>
 800878a:	9b01      	ldr	r3, [sp, #4]
 800878c:	3b04      	subs	r3, #4
 800878e:	429d      	cmp	r5, r3
 8008790:	461a      	mov	r2, r3
 8008792:	d32f      	bcc.n	80087f4 <quorem+0xf4>
 8008794:	613c      	str	r4, [r7, #16]
 8008796:	4638      	mov	r0, r7
 8008798:	f001 f9c2 	bl	8009b20 <__mcmp>
 800879c:	2800      	cmp	r0, #0
 800879e:	db25      	blt.n	80087ec <quorem+0xec>
 80087a0:	4629      	mov	r1, r5
 80087a2:	2000      	movs	r0, #0
 80087a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80087a8:	f8d1 c000 	ldr.w	ip, [r1]
 80087ac:	fa1f fe82 	uxth.w	lr, r2
 80087b0:	fa1f f38c 	uxth.w	r3, ip
 80087b4:	eba3 030e 	sub.w	r3, r3, lr
 80087b8:	4403      	add	r3, r0
 80087ba:	0c12      	lsrs	r2, r2, #16
 80087bc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80087c0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087ca:	45c1      	cmp	r9, r8
 80087cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80087d0:	f841 3b04 	str.w	r3, [r1], #4
 80087d4:	d2e6      	bcs.n	80087a4 <quorem+0xa4>
 80087d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087de:	b922      	cbnz	r2, 80087ea <quorem+0xea>
 80087e0:	3b04      	subs	r3, #4
 80087e2:	429d      	cmp	r5, r3
 80087e4:	461a      	mov	r2, r3
 80087e6:	d30b      	bcc.n	8008800 <quorem+0x100>
 80087e8:	613c      	str	r4, [r7, #16]
 80087ea:	3601      	adds	r6, #1
 80087ec:	4630      	mov	r0, r6
 80087ee:	b003      	add	sp, #12
 80087f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f4:	6812      	ldr	r2, [r2, #0]
 80087f6:	3b04      	subs	r3, #4
 80087f8:	2a00      	cmp	r2, #0
 80087fa:	d1cb      	bne.n	8008794 <quorem+0x94>
 80087fc:	3c01      	subs	r4, #1
 80087fe:	e7c6      	b.n	800878e <quorem+0x8e>
 8008800:	6812      	ldr	r2, [r2, #0]
 8008802:	3b04      	subs	r3, #4
 8008804:	2a00      	cmp	r2, #0
 8008806:	d1ef      	bne.n	80087e8 <quorem+0xe8>
 8008808:	3c01      	subs	r4, #1
 800880a:	e7ea      	b.n	80087e2 <quorem+0xe2>
 800880c:	2000      	movs	r0, #0
 800880e:	e7ee      	b.n	80087ee <quorem+0xee>

08008810 <_dtoa_r>:
 8008810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008814:	4614      	mov	r4, r2
 8008816:	461d      	mov	r5, r3
 8008818:	69c7      	ldr	r7, [r0, #28]
 800881a:	b097      	sub	sp, #92	@ 0x5c
 800881c:	4683      	mov	fp, r0
 800881e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008822:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8008824:	b97f      	cbnz	r7, 8008846 <_dtoa_r+0x36>
 8008826:	2010      	movs	r0, #16
 8008828:	f000 fe02 	bl	8009430 <malloc>
 800882c:	4602      	mov	r2, r0
 800882e:	f8cb 001c 	str.w	r0, [fp, #28]
 8008832:	b920      	cbnz	r0, 800883e <_dtoa_r+0x2e>
 8008834:	21ef      	movs	r1, #239	@ 0xef
 8008836:	4ba8      	ldr	r3, [pc, #672]	@ (8008ad8 <_dtoa_r+0x2c8>)
 8008838:	48a8      	ldr	r0, [pc, #672]	@ (8008adc <_dtoa_r+0x2cc>)
 800883a:	f002 fe0d 	bl	800b458 <__assert_func>
 800883e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008842:	6007      	str	r7, [r0, #0]
 8008844:	60c7      	str	r7, [r0, #12]
 8008846:	f8db 301c 	ldr.w	r3, [fp, #28]
 800884a:	6819      	ldr	r1, [r3, #0]
 800884c:	b159      	cbz	r1, 8008866 <_dtoa_r+0x56>
 800884e:	685a      	ldr	r2, [r3, #4]
 8008850:	2301      	movs	r3, #1
 8008852:	4093      	lsls	r3, r2
 8008854:	604a      	str	r2, [r1, #4]
 8008856:	608b      	str	r3, [r1, #8]
 8008858:	4658      	mov	r0, fp
 800885a:	f000 fedf 	bl	800961c <_Bfree>
 800885e:	2200      	movs	r2, #0
 8008860:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008864:	601a      	str	r2, [r3, #0]
 8008866:	1e2b      	subs	r3, r5, #0
 8008868:	bfaf      	iteee	ge
 800886a:	2300      	movge	r3, #0
 800886c:	2201      	movlt	r2, #1
 800886e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008872:	9303      	strlt	r3, [sp, #12]
 8008874:	bfa8      	it	ge
 8008876:	6033      	strge	r3, [r6, #0]
 8008878:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800887c:	4b98      	ldr	r3, [pc, #608]	@ (8008ae0 <_dtoa_r+0x2d0>)
 800887e:	bfb8      	it	lt
 8008880:	6032      	strlt	r2, [r6, #0]
 8008882:	ea33 0308 	bics.w	r3, r3, r8
 8008886:	d112      	bne.n	80088ae <_dtoa_r+0x9e>
 8008888:	f242 730f 	movw	r3, #9999	@ 0x270f
 800888c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800888e:	6013      	str	r3, [r2, #0]
 8008890:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008894:	4323      	orrs	r3, r4
 8008896:	f000 8550 	beq.w	800933a <_dtoa_r+0xb2a>
 800889a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800889c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8008ae4 <_dtoa_r+0x2d4>
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f000 8552 	beq.w	800934a <_dtoa_r+0xb3a>
 80088a6:	f10a 0303 	add.w	r3, sl, #3
 80088aa:	f000 bd4c 	b.w	8009346 <_dtoa_r+0xb36>
 80088ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088b2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80088b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80088ba:	2200      	movs	r2, #0
 80088bc:	2300      	movs	r3, #0
 80088be:	f7f8 f87d 	bl	80009bc <__aeabi_dcmpeq>
 80088c2:	4607      	mov	r7, r0
 80088c4:	b158      	cbz	r0, 80088de <_dtoa_r+0xce>
 80088c6:	2301      	movs	r3, #1
 80088c8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80088ca:	6013      	str	r3, [r2, #0]
 80088cc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80088ce:	b113      	cbz	r3, 80088d6 <_dtoa_r+0xc6>
 80088d0:	4b85      	ldr	r3, [pc, #532]	@ (8008ae8 <_dtoa_r+0x2d8>)
 80088d2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80088d4:	6013      	str	r3, [r2, #0]
 80088d6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8008aec <_dtoa_r+0x2dc>
 80088da:	f000 bd36 	b.w	800934a <_dtoa_r+0xb3a>
 80088de:	ab14      	add	r3, sp, #80	@ 0x50
 80088e0:	9301      	str	r3, [sp, #4]
 80088e2:	ab15      	add	r3, sp, #84	@ 0x54
 80088e4:	9300      	str	r3, [sp, #0]
 80088e6:	4658      	mov	r0, fp
 80088e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80088ec:	f001 fa30 	bl	8009d50 <__d2b>
 80088f0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80088f4:	4681      	mov	r9, r0
 80088f6:	2e00      	cmp	r6, #0
 80088f8:	d077      	beq.n	80089ea <_dtoa_r+0x1da>
 80088fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80088fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008900:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008904:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008908:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800890c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008910:	9712      	str	r7, [sp, #72]	@ 0x48
 8008912:	4619      	mov	r1, r3
 8008914:	2200      	movs	r2, #0
 8008916:	4b76      	ldr	r3, [pc, #472]	@ (8008af0 <_dtoa_r+0x2e0>)
 8008918:	f7f7 fc30 	bl	800017c <__aeabi_dsub>
 800891c:	a368      	add	r3, pc, #416	@ (adr r3, 8008ac0 <_dtoa_r+0x2b0>)
 800891e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008922:	f7f7 fde3 	bl	80004ec <__aeabi_dmul>
 8008926:	a368      	add	r3, pc, #416	@ (adr r3, 8008ac8 <_dtoa_r+0x2b8>)
 8008928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892c:	f7f7 fc28 	bl	8000180 <__adddf3>
 8008930:	4604      	mov	r4, r0
 8008932:	4630      	mov	r0, r6
 8008934:	460d      	mov	r5, r1
 8008936:	f7f7 fd6f 	bl	8000418 <__aeabi_i2d>
 800893a:	a365      	add	r3, pc, #404	@ (adr r3, 8008ad0 <_dtoa_r+0x2c0>)
 800893c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008940:	f7f7 fdd4 	bl	80004ec <__aeabi_dmul>
 8008944:	4602      	mov	r2, r0
 8008946:	460b      	mov	r3, r1
 8008948:	4620      	mov	r0, r4
 800894a:	4629      	mov	r1, r5
 800894c:	f7f7 fc18 	bl	8000180 <__adddf3>
 8008950:	4604      	mov	r4, r0
 8008952:	460d      	mov	r5, r1
 8008954:	f7f8 f87a 	bl	8000a4c <__aeabi_d2iz>
 8008958:	2200      	movs	r2, #0
 800895a:	4607      	mov	r7, r0
 800895c:	2300      	movs	r3, #0
 800895e:	4620      	mov	r0, r4
 8008960:	4629      	mov	r1, r5
 8008962:	f7f8 f835 	bl	80009d0 <__aeabi_dcmplt>
 8008966:	b140      	cbz	r0, 800897a <_dtoa_r+0x16a>
 8008968:	4638      	mov	r0, r7
 800896a:	f7f7 fd55 	bl	8000418 <__aeabi_i2d>
 800896e:	4622      	mov	r2, r4
 8008970:	462b      	mov	r3, r5
 8008972:	f7f8 f823 	bl	80009bc <__aeabi_dcmpeq>
 8008976:	b900      	cbnz	r0, 800897a <_dtoa_r+0x16a>
 8008978:	3f01      	subs	r7, #1
 800897a:	2f16      	cmp	r7, #22
 800897c:	d853      	bhi.n	8008a26 <_dtoa_r+0x216>
 800897e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008982:	4b5c      	ldr	r3, [pc, #368]	@ (8008af4 <_dtoa_r+0x2e4>)
 8008984:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898c:	f7f8 f820 	bl	80009d0 <__aeabi_dcmplt>
 8008990:	2800      	cmp	r0, #0
 8008992:	d04a      	beq.n	8008a2a <_dtoa_r+0x21a>
 8008994:	2300      	movs	r3, #0
 8008996:	3f01      	subs	r7, #1
 8008998:	930f      	str	r3, [sp, #60]	@ 0x3c
 800899a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800899c:	1b9b      	subs	r3, r3, r6
 800899e:	1e5a      	subs	r2, r3, #1
 80089a0:	bf46      	itte	mi
 80089a2:	f1c3 0801 	rsbmi	r8, r3, #1
 80089a6:	2300      	movmi	r3, #0
 80089a8:	f04f 0800 	movpl.w	r8, #0
 80089ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80089ae:	bf48      	it	mi
 80089b0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80089b2:	2f00      	cmp	r7, #0
 80089b4:	db3b      	blt.n	8008a2e <_dtoa_r+0x21e>
 80089b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089b8:	970e      	str	r7, [sp, #56]	@ 0x38
 80089ba:	443b      	add	r3, r7
 80089bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80089be:	2300      	movs	r3, #0
 80089c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80089c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80089c4:	2b09      	cmp	r3, #9
 80089c6:	d866      	bhi.n	8008a96 <_dtoa_r+0x286>
 80089c8:	2b05      	cmp	r3, #5
 80089ca:	bfc4      	itt	gt
 80089cc:	3b04      	subgt	r3, #4
 80089ce:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80089d0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80089d2:	bfc8      	it	gt
 80089d4:	2400      	movgt	r4, #0
 80089d6:	f1a3 0302 	sub.w	r3, r3, #2
 80089da:	bfd8      	it	le
 80089dc:	2401      	movle	r4, #1
 80089de:	2b03      	cmp	r3, #3
 80089e0:	d864      	bhi.n	8008aac <_dtoa_r+0x29c>
 80089e2:	e8df f003 	tbb	[pc, r3]
 80089e6:	382b      	.short	0x382b
 80089e8:	5636      	.short	0x5636
 80089ea:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80089ee:	441e      	add	r6, r3
 80089f0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80089f4:	2b20      	cmp	r3, #32
 80089f6:	bfc1      	itttt	gt
 80089f8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80089fc:	fa08 f803 	lslgt.w	r8, r8, r3
 8008a00:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008a04:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008a08:	bfd6      	itet	le
 8008a0a:	f1c3 0320 	rsble	r3, r3, #32
 8008a0e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008a12:	fa04 f003 	lslle.w	r0, r4, r3
 8008a16:	f7f7 fcef 	bl	80003f8 <__aeabi_ui2d>
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008a20:	3e01      	subs	r6, #1
 8008a22:	9212      	str	r2, [sp, #72]	@ 0x48
 8008a24:	e775      	b.n	8008912 <_dtoa_r+0x102>
 8008a26:	2301      	movs	r3, #1
 8008a28:	e7b6      	b.n	8008998 <_dtoa_r+0x188>
 8008a2a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008a2c:	e7b5      	b.n	800899a <_dtoa_r+0x18a>
 8008a2e:	427b      	negs	r3, r7
 8008a30:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a32:	2300      	movs	r3, #0
 8008a34:	eba8 0807 	sub.w	r8, r8, r7
 8008a38:	930e      	str	r3, [sp, #56]	@ 0x38
 8008a3a:	e7c2      	b.n	80089c2 <_dtoa_r+0x1b2>
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a40:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	dc35      	bgt.n	8008ab2 <_dtoa_r+0x2a2>
 8008a46:	2301      	movs	r3, #1
 8008a48:	461a      	mov	r2, r3
 8008a4a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008a4e:	9221      	str	r2, [sp, #132]	@ 0x84
 8008a50:	e00b      	b.n	8008a6a <_dtoa_r+0x25a>
 8008a52:	2301      	movs	r3, #1
 8008a54:	e7f3      	b.n	8008a3e <_dtoa_r+0x22e>
 8008a56:	2300      	movs	r3, #0
 8008a58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a5a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008a5c:	18fb      	adds	r3, r7, r3
 8008a5e:	9308      	str	r3, [sp, #32]
 8008a60:	3301      	adds	r3, #1
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	9307      	str	r3, [sp, #28]
 8008a66:	bfb8      	it	lt
 8008a68:	2301      	movlt	r3, #1
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	2204      	movs	r2, #4
 8008a6e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008a72:	f102 0514 	add.w	r5, r2, #20
 8008a76:	429d      	cmp	r5, r3
 8008a78:	d91f      	bls.n	8008aba <_dtoa_r+0x2aa>
 8008a7a:	6041      	str	r1, [r0, #4]
 8008a7c:	4658      	mov	r0, fp
 8008a7e:	f000 fd8d 	bl	800959c <_Balloc>
 8008a82:	4682      	mov	sl, r0
 8008a84:	2800      	cmp	r0, #0
 8008a86:	d139      	bne.n	8008afc <_dtoa_r+0x2ec>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	f240 11af 	movw	r1, #431	@ 0x1af
 8008a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8008af8 <_dtoa_r+0x2e8>)
 8008a90:	e6d2      	b.n	8008838 <_dtoa_r+0x28>
 8008a92:	2301      	movs	r3, #1
 8008a94:	e7e0      	b.n	8008a58 <_dtoa_r+0x248>
 8008a96:	2401      	movs	r4, #1
 8008a98:	2300      	movs	r3, #0
 8008a9a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008a9c:	9320      	str	r3, [sp, #128]	@ 0x80
 8008a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008aa8:	2312      	movs	r3, #18
 8008aaa:	e7d0      	b.n	8008a4e <_dtoa_r+0x23e>
 8008aac:	2301      	movs	r3, #1
 8008aae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ab0:	e7f5      	b.n	8008a9e <_dtoa_r+0x28e>
 8008ab2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008ab4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008ab8:	e7d7      	b.n	8008a6a <_dtoa_r+0x25a>
 8008aba:	3101      	adds	r1, #1
 8008abc:	0052      	lsls	r2, r2, #1
 8008abe:	e7d8      	b.n	8008a72 <_dtoa_r+0x262>
 8008ac0:	636f4361 	.word	0x636f4361
 8008ac4:	3fd287a7 	.word	0x3fd287a7
 8008ac8:	8b60c8b3 	.word	0x8b60c8b3
 8008acc:	3fc68a28 	.word	0x3fc68a28
 8008ad0:	509f79fb 	.word	0x509f79fb
 8008ad4:	3fd34413 	.word	0x3fd34413
 8008ad8:	0800be0c 	.word	0x0800be0c
 8008adc:	0800be23 	.word	0x0800be23
 8008ae0:	7ff00000 	.word	0x7ff00000
 8008ae4:	0800be08 	.word	0x0800be08
 8008ae8:	0800bdd7 	.word	0x0800bdd7
 8008aec:	0800bdd6 	.word	0x0800bdd6
 8008af0:	3ff80000 	.word	0x3ff80000
 8008af4:	0800bf20 	.word	0x0800bf20
 8008af8:	0800be7b 	.word	0x0800be7b
 8008afc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008b00:	6018      	str	r0, [r3, #0]
 8008b02:	9b07      	ldr	r3, [sp, #28]
 8008b04:	2b0e      	cmp	r3, #14
 8008b06:	f200 80a4 	bhi.w	8008c52 <_dtoa_r+0x442>
 8008b0a:	2c00      	cmp	r4, #0
 8008b0c:	f000 80a1 	beq.w	8008c52 <_dtoa_r+0x442>
 8008b10:	2f00      	cmp	r7, #0
 8008b12:	dd33      	ble.n	8008b7c <_dtoa_r+0x36c>
 8008b14:	4b86      	ldr	r3, [pc, #536]	@ (8008d30 <_dtoa_r+0x520>)
 8008b16:	f007 020f 	and.w	r2, r7, #15
 8008b1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b1e:	05f8      	lsls	r0, r7, #23
 8008b20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008b24:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008b28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008b2c:	d516      	bpl.n	8008b5c <_dtoa_r+0x34c>
 8008b2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b32:	4b80      	ldr	r3, [pc, #512]	@ (8008d34 <_dtoa_r+0x524>)
 8008b34:	2603      	movs	r6, #3
 8008b36:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b3a:	f7f7 fe01 	bl	8000740 <__aeabi_ddiv>
 8008b3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b42:	f004 040f 	and.w	r4, r4, #15
 8008b46:	4d7b      	ldr	r5, [pc, #492]	@ (8008d34 <_dtoa_r+0x524>)
 8008b48:	b954      	cbnz	r4, 8008b60 <_dtoa_r+0x350>
 8008b4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b52:	f7f7 fdf5 	bl	8000740 <__aeabi_ddiv>
 8008b56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b5a:	e028      	b.n	8008bae <_dtoa_r+0x39e>
 8008b5c:	2602      	movs	r6, #2
 8008b5e:	e7f2      	b.n	8008b46 <_dtoa_r+0x336>
 8008b60:	07e1      	lsls	r1, r4, #31
 8008b62:	d508      	bpl.n	8008b76 <_dtoa_r+0x366>
 8008b64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008b6c:	f7f7 fcbe 	bl	80004ec <__aeabi_dmul>
 8008b70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b74:	3601      	adds	r6, #1
 8008b76:	1064      	asrs	r4, r4, #1
 8008b78:	3508      	adds	r5, #8
 8008b7a:	e7e5      	b.n	8008b48 <_dtoa_r+0x338>
 8008b7c:	f000 80d2 	beq.w	8008d24 <_dtoa_r+0x514>
 8008b80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b84:	427c      	negs	r4, r7
 8008b86:	4b6a      	ldr	r3, [pc, #424]	@ (8008d30 <_dtoa_r+0x520>)
 8008b88:	f004 020f 	and.w	r2, r4, #15
 8008b8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b94:	f7f7 fcaa 	bl	80004ec <__aeabi_dmul>
 8008b98:	2602      	movs	r6, #2
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ba0:	4d64      	ldr	r5, [pc, #400]	@ (8008d34 <_dtoa_r+0x524>)
 8008ba2:	1124      	asrs	r4, r4, #4
 8008ba4:	2c00      	cmp	r4, #0
 8008ba6:	f040 80b2 	bne.w	8008d0e <_dtoa_r+0x4fe>
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d1d3      	bne.n	8008b56 <_dtoa_r+0x346>
 8008bae:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008bb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	f000 80b7 	beq.w	8008d28 <_dtoa_r+0x518>
 8008bba:	2200      	movs	r2, #0
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	4629      	mov	r1, r5
 8008bc0:	4b5d      	ldr	r3, [pc, #372]	@ (8008d38 <_dtoa_r+0x528>)
 8008bc2:	f7f7 ff05 	bl	80009d0 <__aeabi_dcmplt>
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	f000 80ae 	beq.w	8008d28 <_dtoa_r+0x518>
 8008bcc:	9b07      	ldr	r3, [sp, #28]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	f000 80aa 	beq.w	8008d28 <_dtoa_r+0x518>
 8008bd4:	9b08      	ldr	r3, [sp, #32]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	dd37      	ble.n	8008c4a <_dtoa_r+0x43a>
 8008bda:	1e7b      	subs	r3, r7, #1
 8008bdc:	4620      	mov	r0, r4
 8008bde:	9304      	str	r3, [sp, #16]
 8008be0:	2200      	movs	r2, #0
 8008be2:	4629      	mov	r1, r5
 8008be4:	4b55      	ldr	r3, [pc, #340]	@ (8008d3c <_dtoa_r+0x52c>)
 8008be6:	f7f7 fc81 	bl	80004ec <__aeabi_dmul>
 8008bea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bee:	9c08      	ldr	r4, [sp, #32]
 8008bf0:	3601      	adds	r6, #1
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	f7f7 fc10 	bl	8000418 <__aeabi_i2d>
 8008bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bfc:	f7f7 fc76 	bl	80004ec <__aeabi_dmul>
 8008c00:	2200      	movs	r2, #0
 8008c02:	4b4f      	ldr	r3, [pc, #316]	@ (8008d40 <_dtoa_r+0x530>)
 8008c04:	f7f7 fabc 	bl	8000180 <__adddf3>
 8008c08:	4605      	mov	r5, r0
 8008c0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008c0e:	2c00      	cmp	r4, #0
 8008c10:	f040 809a 	bne.w	8008d48 <_dtoa_r+0x538>
 8008c14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	4b4a      	ldr	r3, [pc, #296]	@ (8008d44 <_dtoa_r+0x534>)
 8008c1c:	f7f7 faae 	bl	800017c <__aeabi_dsub>
 8008c20:	4602      	mov	r2, r0
 8008c22:	460b      	mov	r3, r1
 8008c24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c28:	462a      	mov	r2, r5
 8008c2a:	4633      	mov	r3, r6
 8008c2c:	f7f7 feee 	bl	8000a0c <__aeabi_dcmpgt>
 8008c30:	2800      	cmp	r0, #0
 8008c32:	f040 828e 	bne.w	8009152 <_dtoa_r+0x942>
 8008c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c3a:	462a      	mov	r2, r5
 8008c3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008c40:	f7f7 fec6 	bl	80009d0 <__aeabi_dcmplt>
 8008c44:	2800      	cmp	r0, #0
 8008c46:	f040 8127 	bne.w	8008e98 <_dtoa_r+0x688>
 8008c4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008c4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008c52:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f2c0 8163 	blt.w	8008f20 <_dtoa_r+0x710>
 8008c5a:	2f0e      	cmp	r7, #14
 8008c5c:	f300 8160 	bgt.w	8008f20 <_dtoa_r+0x710>
 8008c60:	4b33      	ldr	r3, [pc, #204]	@ (8008d30 <_dtoa_r+0x520>)
 8008c62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c6a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008c6e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	da03      	bge.n	8008c7c <_dtoa_r+0x46c>
 8008c74:	9b07      	ldr	r3, [sp, #28]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f340 8100 	ble.w	8008e7c <_dtoa_r+0x66c>
 8008c7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008c80:	4656      	mov	r6, sl
 8008c82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c86:	4620      	mov	r0, r4
 8008c88:	4629      	mov	r1, r5
 8008c8a:	f7f7 fd59 	bl	8000740 <__aeabi_ddiv>
 8008c8e:	f7f7 fedd 	bl	8000a4c <__aeabi_d2iz>
 8008c92:	4680      	mov	r8, r0
 8008c94:	f7f7 fbc0 	bl	8000418 <__aeabi_i2d>
 8008c98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c9c:	f7f7 fc26 	bl	80004ec <__aeabi_dmul>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	4629      	mov	r1, r5
 8008ca8:	f7f7 fa68 	bl	800017c <__aeabi_dsub>
 8008cac:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008cb0:	9d07      	ldr	r5, [sp, #28]
 8008cb2:	f806 4b01 	strb.w	r4, [r6], #1
 8008cb6:	eba6 040a 	sub.w	r4, r6, sl
 8008cba:	42a5      	cmp	r5, r4
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	f040 8116 	bne.w	8008ef0 <_dtoa_r+0x6e0>
 8008cc4:	f7f7 fa5c 	bl	8000180 <__adddf3>
 8008cc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ccc:	4604      	mov	r4, r0
 8008cce:	460d      	mov	r5, r1
 8008cd0:	f7f7 fe9c 	bl	8000a0c <__aeabi_dcmpgt>
 8008cd4:	2800      	cmp	r0, #0
 8008cd6:	f040 80f8 	bne.w	8008eca <_dtoa_r+0x6ba>
 8008cda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cde:	4620      	mov	r0, r4
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	f7f7 fe6b 	bl	80009bc <__aeabi_dcmpeq>
 8008ce6:	b118      	cbz	r0, 8008cf0 <_dtoa_r+0x4e0>
 8008ce8:	f018 0f01 	tst.w	r8, #1
 8008cec:	f040 80ed 	bne.w	8008eca <_dtoa_r+0x6ba>
 8008cf0:	4649      	mov	r1, r9
 8008cf2:	4658      	mov	r0, fp
 8008cf4:	f000 fc92 	bl	800961c <_Bfree>
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	7033      	strb	r3, [r6, #0]
 8008cfc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008cfe:	3701      	adds	r7, #1
 8008d00:	601f      	str	r7, [r3, #0]
 8008d02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	f000 8320 	beq.w	800934a <_dtoa_r+0xb3a>
 8008d0a:	601e      	str	r6, [r3, #0]
 8008d0c:	e31d      	b.n	800934a <_dtoa_r+0xb3a>
 8008d0e:	07e2      	lsls	r2, r4, #31
 8008d10:	d505      	bpl.n	8008d1e <_dtoa_r+0x50e>
 8008d12:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d16:	f7f7 fbe9 	bl	80004ec <__aeabi_dmul>
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	3601      	adds	r6, #1
 8008d1e:	1064      	asrs	r4, r4, #1
 8008d20:	3508      	adds	r5, #8
 8008d22:	e73f      	b.n	8008ba4 <_dtoa_r+0x394>
 8008d24:	2602      	movs	r6, #2
 8008d26:	e742      	b.n	8008bae <_dtoa_r+0x39e>
 8008d28:	9c07      	ldr	r4, [sp, #28]
 8008d2a:	9704      	str	r7, [sp, #16]
 8008d2c:	e761      	b.n	8008bf2 <_dtoa_r+0x3e2>
 8008d2e:	bf00      	nop
 8008d30:	0800bf20 	.word	0x0800bf20
 8008d34:	0800bef8 	.word	0x0800bef8
 8008d38:	3ff00000 	.word	0x3ff00000
 8008d3c:	40240000 	.word	0x40240000
 8008d40:	401c0000 	.word	0x401c0000
 8008d44:	40140000 	.word	0x40140000
 8008d48:	4b70      	ldr	r3, [pc, #448]	@ (8008f0c <_dtoa_r+0x6fc>)
 8008d4a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d54:	4454      	add	r4, sl
 8008d56:	2900      	cmp	r1, #0
 8008d58:	d045      	beq.n	8008de6 <_dtoa_r+0x5d6>
 8008d5a:	2000      	movs	r0, #0
 8008d5c:	496c      	ldr	r1, [pc, #432]	@ (8008f10 <_dtoa_r+0x700>)
 8008d5e:	f7f7 fcef 	bl	8000740 <__aeabi_ddiv>
 8008d62:	4633      	mov	r3, r6
 8008d64:	462a      	mov	r2, r5
 8008d66:	f7f7 fa09 	bl	800017c <__aeabi_dsub>
 8008d6a:	4656      	mov	r6, sl
 8008d6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008d70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d74:	f7f7 fe6a 	bl	8000a4c <__aeabi_d2iz>
 8008d78:	4605      	mov	r5, r0
 8008d7a:	f7f7 fb4d 	bl	8000418 <__aeabi_i2d>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	460b      	mov	r3, r1
 8008d82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d86:	f7f7 f9f9 	bl	800017c <__aeabi_dsub>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	3530      	adds	r5, #48	@ 0x30
 8008d90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008d94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008d98:	f806 5b01 	strb.w	r5, [r6], #1
 8008d9c:	f7f7 fe18 	bl	80009d0 <__aeabi_dcmplt>
 8008da0:	2800      	cmp	r0, #0
 8008da2:	d163      	bne.n	8008e6c <_dtoa_r+0x65c>
 8008da4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008da8:	2000      	movs	r0, #0
 8008daa:	495a      	ldr	r1, [pc, #360]	@ (8008f14 <_dtoa_r+0x704>)
 8008dac:	f7f7 f9e6 	bl	800017c <__aeabi_dsub>
 8008db0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008db4:	f7f7 fe0c 	bl	80009d0 <__aeabi_dcmplt>
 8008db8:	2800      	cmp	r0, #0
 8008dba:	f040 8087 	bne.w	8008ecc <_dtoa_r+0x6bc>
 8008dbe:	42a6      	cmp	r6, r4
 8008dc0:	f43f af43 	beq.w	8008c4a <_dtoa_r+0x43a>
 8008dc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008dc8:	2200      	movs	r2, #0
 8008dca:	4b53      	ldr	r3, [pc, #332]	@ (8008f18 <_dtoa_r+0x708>)
 8008dcc:	f7f7 fb8e 	bl	80004ec <__aeabi_dmul>
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008dd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dda:	4b4f      	ldr	r3, [pc, #316]	@ (8008f18 <_dtoa_r+0x708>)
 8008ddc:	f7f7 fb86 	bl	80004ec <__aeabi_dmul>
 8008de0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008de4:	e7c4      	b.n	8008d70 <_dtoa_r+0x560>
 8008de6:	4631      	mov	r1, r6
 8008de8:	4628      	mov	r0, r5
 8008dea:	f7f7 fb7f 	bl	80004ec <__aeabi_dmul>
 8008dee:	4656      	mov	r6, sl
 8008df0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008df4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008df6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dfa:	f7f7 fe27 	bl	8000a4c <__aeabi_d2iz>
 8008dfe:	4605      	mov	r5, r0
 8008e00:	f7f7 fb0a 	bl	8000418 <__aeabi_i2d>
 8008e04:	4602      	mov	r2, r0
 8008e06:	460b      	mov	r3, r1
 8008e08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e0c:	f7f7 f9b6 	bl	800017c <__aeabi_dsub>
 8008e10:	4602      	mov	r2, r0
 8008e12:	460b      	mov	r3, r1
 8008e14:	3530      	adds	r5, #48	@ 0x30
 8008e16:	f806 5b01 	strb.w	r5, [r6], #1
 8008e1a:	42a6      	cmp	r6, r4
 8008e1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e20:	f04f 0200 	mov.w	r2, #0
 8008e24:	d124      	bne.n	8008e70 <_dtoa_r+0x660>
 8008e26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008e2a:	4b39      	ldr	r3, [pc, #228]	@ (8008f10 <_dtoa_r+0x700>)
 8008e2c:	f7f7 f9a8 	bl	8000180 <__adddf3>
 8008e30:	4602      	mov	r2, r0
 8008e32:	460b      	mov	r3, r1
 8008e34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e38:	f7f7 fde8 	bl	8000a0c <__aeabi_dcmpgt>
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	d145      	bne.n	8008ecc <_dtoa_r+0x6bc>
 8008e40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e44:	2000      	movs	r0, #0
 8008e46:	4932      	ldr	r1, [pc, #200]	@ (8008f10 <_dtoa_r+0x700>)
 8008e48:	f7f7 f998 	bl	800017c <__aeabi_dsub>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	460b      	mov	r3, r1
 8008e50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e54:	f7f7 fdbc 	bl	80009d0 <__aeabi_dcmplt>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	f43f aef6 	beq.w	8008c4a <_dtoa_r+0x43a>
 8008e5e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008e60:	1e73      	subs	r3, r6, #1
 8008e62:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008e64:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008e68:	2b30      	cmp	r3, #48	@ 0x30
 8008e6a:	d0f8      	beq.n	8008e5e <_dtoa_r+0x64e>
 8008e6c:	9f04      	ldr	r7, [sp, #16]
 8008e6e:	e73f      	b.n	8008cf0 <_dtoa_r+0x4e0>
 8008e70:	4b29      	ldr	r3, [pc, #164]	@ (8008f18 <_dtoa_r+0x708>)
 8008e72:	f7f7 fb3b 	bl	80004ec <__aeabi_dmul>
 8008e76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e7a:	e7bc      	b.n	8008df6 <_dtoa_r+0x5e6>
 8008e7c:	d10c      	bne.n	8008e98 <_dtoa_r+0x688>
 8008e7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e82:	2200      	movs	r2, #0
 8008e84:	4b25      	ldr	r3, [pc, #148]	@ (8008f1c <_dtoa_r+0x70c>)
 8008e86:	f7f7 fb31 	bl	80004ec <__aeabi_dmul>
 8008e8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e8e:	f7f7 fdb3 	bl	80009f8 <__aeabi_dcmpge>
 8008e92:	2800      	cmp	r0, #0
 8008e94:	f000 815b 	beq.w	800914e <_dtoa_r+0x93e>
 8008e98:	2400      	movs	r4, #0
 8008e9a:	4625      	mov	r5, r4
 8008e9c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008e9e:	4656      	mov	r6, sl
 8008ea0:	43db      	mvns	r3, r3
 8008ea2:	9304      	str	r3, [sp, #16]
 8008ea4:	2700      	movs	r7, #0
 8008ea6:	4621      	mov	r1, r4
 8008ea8:	4658      	mov	r0, fp
 8008eaa:	f000 fbb7 	bl	800961c <_Bfree>
 8008eae:	2d00      	cmp	r5, #0
 8008eb0:	d0dc      	beq.n	8008e6c <_dtoa_r+0x65c>
 8008eb2:	b12f      	cbz	r7, 8008ec0 <_dtoa_r+0x6b0>
 8008eb4:	42af      	cmp	r7, r5
 8008eb6:	d003      	beq.n	8008ec0 <_dtoa_r+0x6b0>
 8008eb8:	4639      	mov	r1, r7
 8008eba:	4658      	mov	r0, fp
 8008ebc:	f000 fbae 	bl	800961c <_Bfree>
 8008ec0:	4629      	mov	r1, r5
 8008ec2:	4658      	mov	r0, fp
 8008ec4:	f000 fbaa 	bl	800961c <_Bfree>
 8008ec8:	e7d0      	b.n	8008e6c <_dtoa_r+0x65c>
 8008eca:	9704      	str	r7, [sp, #16]
 8008ecc:	4633      	mov	r3, r6
 8008ece:	461e      	mov	r6, r3
 8008ed0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ed4:	2a39      	cmp	r2, #57	@ 0x39
 8008ed6:	d107      	bne.n	8008ee8 <_dtoa_r+0x6d8>
 8008ed8:	459a      	cmp	sl, r3
 8008eda:	d1f8      	bne.n	8008ece <_dtoa_r+0x6be>
 8008edc:	9a04      	ldr	r2, [sp, #16]
 8008ede:	3201      	adds	r2, #1
 8008ee0:	9204      	str	r2, [sp, #16]
 8008ee2:	2230      	movs	r2, #48	@ 0x30
 8008ee4:	f88a 2000 	strb.w	r2, [sl]
 8008ee8:	781a      	ldrb	r2, [r3, #0]
 8008eea:	3201      	adds	r2, #1
 8008eec:	701a      	strb	r2, [r3, #0]
 8008eee:	e7bd      	b.n	8008e6c <_dtoa_r+0x65c>
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	4b09      	ldr	r3, [pc, #36]	@ (8008f18 <_dtoa_r+0x708>)
 8008ef4:	f7f7 fafa 	bl	80004ec <__aeabi_dmul>
 8008ef8:	2200      	movs	r2, #0
 8008efa:	2300      	movs	r3, #0
 8008efc:	4604      	mov	r4, r0
 8008efe:	460d      	mov	r5, r1
 8008f00:	f7f7 fd5c 	bl	80009bc <__aeabi_dcmpeq>
 8008f04:	2800      	cmp	r0, #0
 8008f06:	f43f aebc 	beq.w	8008c82 <_dtoa_r+0x472>
 8008f0a:	e6f1      	b.n	8008cf0 <_dtoa_r+0x4e0>
 8008f0c:	0800bf20 	.word	0x0800bf20
 8008f10:	3fe00000 	.word	0x3fe00000
 8008f14:	3ff00000 	.word	0x3ff00000
 8008f18:	40240000 	.word	0x40240000
 8008f1c:	40140000 	.word	0x40140000
 8008f20:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008f22:	2a00      	cmp	r2, #0
 8008f24:	f000 80db 	beq.w	80090de <_dtoa_r+0x8ce>
 8008f28:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008f2a:	2a01      	cmp	r2, #1
 8008f2c:	f300 80bf 	bgt.w	80090ae <_dtoa_r+0x89e>
 8008f30:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008f32:	2a00      	cmp	r2, #0
 8008f34:	f000 80b7 	beq.w	80090a6 <_dtoa_r+0x896>
 8008f38:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008f3c:	4646      	mov	r6, r8
 8008f3e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008f40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f42:	2101      	movs	r1, #1
 8008f44:	441a      	add	r2, r3
 8008f46:	4658      	mov	r0, fp
 8008f48:	4498      	add	r8, r3
 8008f4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f4c:	f000 fc64 	bl	8009818 <__i2b>
 8008f50:	4605      	mov	r5, r0
 8008f52:	b15e      	cbz	r6, 8008f6c <_dtoa_r+0x75c>
 8008f54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	dd08      	ble.n	8008f6c <_dtoa_r+0x75c>
 8008f5a:	42b3      	cmp	r3, r6
 8008f5c:	bfa8      	it	ge
 8008f5e:	4633      	movge	r3, r6
 8008f60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f62:	eba8 0803 	sub.w	r8, r8, r3
 8008f66:	1af6      	subs	r6, r6, r3
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f6e:	b1f3      	cbz	r3, 8008fae <_dtoa_r+0x79e>
 8008f70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f000 80b7 	beq.w	80090e6 <_dtoa_r+0x8d6>
 8008f78:	b18c      	cbz	r4, 8008f9e <_dtoa_r+0x78e>
 8008f7a:	4629      	mov	r1, r5
 8008f7c:	4622      	mov	r2, r4
 8008f7e:	4658      	mov	r0, fp
 8008f80:	f000 fd08 	bl	8009994 <__pow5mult>
 8008f84:	464a      	mov	r2, r9
 8008f86:	4601      	mov	r1, r0
 8008f88:	4605      	mov	r5, r0
 8008f8a:	4658      	mov	r0, fp
 8008f8c:	f000 fc5a 	bl	8009844 <__multiply>
 8008f90:	4649      	mov	r1, r9
 8008f92:	9004      	str	r0, [sp, #16]
 8008f94:	4658      	mov	r0, fp
 8008f96:	f000 fb41 	bl	800961c <_Bfree>
 8008f9a:	9b04      	ldr	r3, [sp, #16]
 8008f9c:	4699      	mov	r9, r3
 8008f9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fa0:	1b1a      	subs	r2, r3, r4
 8008fa2:	d004      	beq.n	8008fae <_dtoa_r+0x79e>
 8008fa4:	4649      	mov	r1, r9
 8008fa6:	4658      	mov	r0, fp
 8008fa8:	f000 fcf4 	bl	8009994 <__pow5mult>
 8008fac:	4681      	mov	r9, r0
 8008fae:	2101      	movs	r1, #1
 8008fb0:	4658      	mov	r0, fp
 8008fb2:	f000 fc31 	bl	8009818 <__i2b>
 8008fb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fb8:	4604      	mov	r4, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	f000 81c9 	beq.w	8009352 <_dtoa_r+0xb42>
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	4601      	mov	r1, r0
 8008fc4:	4658      	mov	r0, fp
 8008fc6:	f000 fce5 	bl	8009994 <__pow5mult>
 8008fca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008fcc:	4604      	mov	r4, r0
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	f300 808f 	bgt.w	80090f2 <_dtoa_r+0x8e2>
 8008fd4:	9b02      	ldr	r3, [sp, #8]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f040 8087 	bne.w	80090ea <_dtoa_r+0x8da>
 8008fdc:	9b03      	ldr	r3, [sp, #12]
 8008fde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f040 8083 	bne.w	80090ee <_dtoa_r+0x8de>
 8008fe8:	9b03      	ldr	r3, [sp, #12]
 8008fea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008fee:	0d1b      	lsrs	r3, r3, #20
 8008ff0:	051b      	lsls	r3, r3, #20
 8008ff2:	b12b      	cbz	r3, 8009000 <_dtoa_r+0x7f0>
 8008ff4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ff6:	f108 0801 	add.w	r8, r8, #1
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ffe:	2301      	movs	r3, #1
 8009000:	930a      	str	r3, [sp, #40]	@ 0x28
 8009002:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009004:	2b00      	cmp	r3, #0
 8009006:	f000 81aa 	beq.w	800935e <_dtoa_r+0xb4e>
 800900a:	6923      	ldr	r3, [r4, #16]
 800900c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009010:	6918      	ldr	r0, [r3, #16]
 8009012:	f000 fbb5 	bl	8009780 <__hi0bits>
 8009016:	f1c0 0020 	rsb	r0, r0, #32
 800901a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800901c:	4418      	add	r0, r3
 800901e:	f010 001f 	ands.w	r0, r0, #31
 8009022:	d071      	beq.n	8009108 <_dtoa_r+0x8f8>
 8009024:	f1c0 0320 	rsb	r3, r0, #32
 8009028:	2b04      	cmp	r3, #4
 800902a:	dd65      	ble.n	80090f8 <_dtoa_r+0x8e8>
 800902c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800902e:	f1c0 001c 	rsb	r0, r0, #28
 8009032:	4403      	add	r3, r0
 8009034:	4480      	add	r8, r0
 8009036:	4406      	add	r6, r0
 8009038:	9309      	str	r3, [sp, #36]	@ 0x24
 800903a:	f1b8 0f00 	cmp.w	r8, #0
 800903e:	dd05      	ble.n	800904c <_dtoa_r+0x83c>
 8009040:	4649      	mov	r1, r9
 8009042:	4642      	mov	r2, r8
 8009044:	4658      	mov	r0, fp
 8009046:	f000 fcff 	bl	8009a48 <__lshift>
 800904a:	4681      	mov	r9, r0
 800904c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800904e:	2b00      	cmp	r3, #0
 8009050:	dd05      	ble.n	800905e <_dtoa_r+0x84e>
 8009052:	4621      	mov	r1, r4
 8009054:	461a      	mov	r2, r3
 8009056:	4658      	mov	r0, fp
 8009058:	f000 fcf6 	bl	8009a48 <__lshift>
 800905c:	4604      	mov	r4, r0
 800905e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009060:	2b00      	cmp	r3, #0
 8009062:	d053      	beq.n	800910c <_dtoa_r+0x8fc>
 8009064:	4621      	mov	r1, r4
 8009066:	4648      	mov	r0, r9
 8009068:	f000 fd5a 	bl	8009b20 <__mcmp>
 800906c:	2800      	cmp	r0, #0
 800906e:	da4d      	bge.n	800910c <_dtoa_r+0x8fc>
 8009070:	1e7b      	subs	r3, r7, #1
 8009072:	4649      	mov	r1, r9
 8009074:	9304      	str	r3, [sp, #16]
 8009076:	220a      	movs	r2, #10
 8009078:	2300      	movs	r3, #0
 800907a:	4658      	mov	r0, fp
 800907c:	f000 faf0 	bl	8009660 <__multadd>
 8009080:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009082:	4681      	mov	r9, r0
 8009084:	2b00      	cmp	r3, #0
 8009086:	f000 816c 	beq.w	8009362 <_dtoa_r+0xb52>
 800908a:	2300      	movs	r3, #0
 800908c:	4629      	mov	r1, r5
 800908e:	220a      	movs	r2, #10
 8009090:	4658      	mov	r0, fp
 8009092:	f000 fae5 	bl	8009660 <__multadd>
 8009096:	9b08      	ldr	r3, [sp, #32]
 8009098:	4605      	mov	r5, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	dc61      	bgt.n	8009162 <_dtoa_r+0x952>
 800909e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	dc3b      	bgt.n	800911c <_dtoa_r+0x90c>
 80090a4:	e05d      	b.n	8009162 <_dtoa_r+0x952>
 80090a6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80090a8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80090ac:	e746      	b.n	8008f3c <_dtoa_r+0x72c>
 80090ae:	9b07      	ldr	r3, [sp, #28]
 80090b0:	1e5c      	subs	r4, r3, #1
 80090b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090b4:	42a3      	cmp	r3, r4
 80090b6:	bfbf      	itttt	lt
 80090b8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80090ba:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80090bc:	1ae3      	sublt	r3, r4, r3
 80090be:	18d2      	addlt	r2, r2, r3
 80090c0:	bfa8      	it	ge
 80090c2:	1b1c      	subge	r4, r3, r4
 80090c4:	9b07      	ldr	r3, [sp, #28]
 80090c6:	bfbe      	ittt	lt
 80090c8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80090ca:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80090cc:	2400      	movlt	r4, #0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	bfb5      	itete	lt
 80090d2:	eba8 0603 	sublt.w	r6, r8, r3
 80090d6:	4646      	movge	r6, r8
 80090d8:	2300      	movlt	r3, #0
 80090da:	9b07      	ldrge	r3, [sp, #28]
 80090dc:	e730      	b.n	8008f40 <_dtoa_r+0x730>
 80090de:	4646      	mov	r6, r8
 80090e0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80090e2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80090e4:	e735      	b.n	8008f52 <_dtoa_r+0x742>
 80090e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090e8:	e75c      	b.n	8008fa4 <_dtoa_r+0x794>
 80090ea:	2300      	movs	r3, #0
 80090ec:	e788      	b.n	8009000 <_dtoa_r+0x7f0>
 80090ee:	9b02      	ldr	r3, [sp, #8]
 80090f0:	e786      	b.n	8009000 <_dtoa_r+0x7f0>
 80090f2:	2300      	movs	r3, #0
 80090f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80090f6:	e788      	b.n	800900a <_dtoa_r+0x7fa>
 80090f8:	d09f      	beq.n	800903a <_dtoa_r+0x82a>
 80090fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090fc:	331c      	adds	r3, #28
 80090fe:	441a      	add	r2, r3
 8009100:	4498      	add	r8, r3
 8009102:	441e      	add	r6, r3
 8009104:	9209      	str	r2, [sp, #36]	@ 0x24
 8009106:	e798      	b.n	800903a <_dtoa_r+0x82a>
 8009108:	4603      	mov	r3, r0
 800910a:	e7f6      	b.n	80090fa <_dtoa_r+0x8ea>
 800910c:	9b07      	ldr	r3, [sp, #28]
 800910e:	9704      	str	r7, [sp, #16]
 8009110:	2b00      	cmp	r3, #0
 8009112:	dc20      	bgt.n	8009156 <_dtoa_r+0x946>
 8009114:	9308      	str	r3, [sp, #32]
 8009116:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009118:	2b02      	cmp	r3, #2
 800911a:	dd1e      	ble.n	800915a <_dtoa_r+0x94a>
 800911c:	9b08      	ldr	r3, [sp, #32]
 800911e:	2b00      	cmp	r3, #0
 8009120:	f47f aebc 	bne.w	8008e9c <_dtoa_r+0x68c>
 8009124:	4621      	mov	r1, r4
 8009126:	2205      	movs	r2, #5
 8009128:	4658      	mov	r0, fp
 800912a:	f000 fa99 	bl	8009660 <__multadd>
 800912e:	4601      	mov	r1, r0
 8009130:	4604      	mov	r4, r0
 8009132:	4648      	mov	r0, r9
 8009134:	f000 fcf4 	bl	8009b20 <__mcmp>
 8009138:	2800      	cmp	r0, #0
 800913a:	f77f aeaf 	ble.w	8008e9c <_dtoa_r+0x68c>
 800913e:	2331      	movs	r3, #49	@ 0x31
 8009140:	4656      	mov	r6, sl
 8009142:	f806 3b01 	strb.w	r3, [r6], #1
 8009146:	9b04      	ldr	r3, [sp, #16]
 8009148:	3301      	adds	r3, #1
 800914a:	9304      	str	r3, [sp, #16]
 800914c:	e6aa      	b.n	8008ea4 <_dtoa_r+0x694>
 800914e:	9c07      	ldr	r4, [sp, #28]
 8009150:	9704      	str	r7, [sp, #16]
 8009152:	4625      	mov	r5, r4
 8009154:	e7f3      	b.n	800913e <_dtoa_r+0x92e>
 8009156:	9b07      	ldr	r3, [sp, #28]
 8009158:	9308      	str	r3, [sp, #32]
 800915a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800915c:	2b00      	cmp	r3, #0
 800915e:	f000 8104 	beq.w	800936a <_dtoa_r+0xb5a>
 8009162:	2e00      	cmp	r6, #0
 8009164:	dd05      	ble.n	8009172 <_dtoa_r+0x962>
 8009166:	4629      	mov	r1, r5
 8009168:	4632      	mov	r2, r6
 800916a:	4658      	mov	r0, fp
 800916c:	f000 fc6c 	bl	8009a48 <__lshift>
 8009170:	4605      	mov	r5, r0
 8009172:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009174:	2b00      	cmp	r3, #0
 8009176:	d05a      	beq.n	800922e <_dtoa_r+0xa1e>
 8009178:	4658      	mov	r0, fp
 800917a:	6869      	ldr	r1, [r5, #4]
 800917c:	f000 fa0e 	bl	800959c <_Balloc>
 8009180:	4606      	mov	r6, r0
 8009182:	b928      	cbnz	r0, 8009190 <_dtoa_r+0x980>
 8009184:	4602      	mov	r2, r0
 8009186:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800918a:	4b83      	ldr	r3, [pc, #524]	@ (8009398 <_dtoa_r+0xb88>)
 800918c:	f7ff bb54 	b.w	8008838 <_dtoa_r+0x28>
 8009190:	692a      	ldr	r2, [r5, #16]
 8009192:	f105 010c 	add.w	r1, r5, #12
 8009196:	3202      	adds	r2, #2
 8009198:	0092      	lsls	r2, r2, #2
 800919a:	300c      	adds	r0, #12
 800919c:	f7ff fa9d 	bl	80086da <memcpy>
 80091a0:	2201      	movs	r2, #1
 80091a2:	4631      	mov	r1, r6
 80091a4:	4658      	mov	r0, fp
 80091a6:	f000 fc4f 	bl	8009a48 <__lshift>
 80091aa:	462f      	mov	r7, r5
 80091ac:	4605      	mov	r5, r0
 80091ae:	f10a 0301 	add.w	r3, sl, #1
 80091b2:	9307      	str	r3, [sp, #28]
 80091b4:	9b08      	ldr	r3, [sp, #32]
 80091b6:	4453      	add	r3, sl
 80091b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091ba:	9b02      	ldr	r3, [sp, #8]
 80091bc:	f003 0301 	and.w	r3, r3, #1
 80091c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80091c2:	9b07      	ldr	r3, [sp, #28]
 80091c4:	4621      	mov	r1, r4
 80091c6:	3b01      	subs	r3, #1
 80091c8:	4648      	mov	r0, r9
 80091ca:	9302      	str	r3, [sp, #8]
 80091cc:	f7ff fa98 	bl	8008700 <quorem>
 80091d0:	4639      	mov	r1, r7
 80091d2:	9008      	str	r0, [sp, #32]
 80091d4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80091d8:	4648      	mov	r0, r9
 80091da:	f000 fca1 	bl	8009b20 <__mcmp>
 80091de:	462a      	mov	r2, r5
 80091e0:	9009      	str	r0, [sp, #36]	@ 0x24
 80091e2:	4621      	mov	r1, r4
 80091e4:	4658      	mov	r0, fp
 80091e6:	f000 fcb7 	bl	8009b58 <__mdiff>
 80091ea:	68c2      	ldr	r2, [r0, #12]
 80091ec:	4606      	mov	r6, r0
 80091ee:	bb02      	cbnz	r2, 8009232 <_dtoa_r+0xa22>
 80091f0:	4601      	mov	r1, r0
 80091f2:	4648      	mov	r0, r9
 80091f4:	f000 fc94 	bl	8009b20 <__mcmp>
 80091f8:	4602      	mov	r2, r0
 80091fa:	4631      	mov	r1, r6
 80091fc:	4658      	mov	r0, fp
 80091fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8009200:	f000 fa0c 	bl	800961c <_Bfree>
 8009204:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009206:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009208:	9e07      	ldr	r6, [sp, #28]
 800920a:	ea43 0102 	orr.w	r1, r3, r2
 800920e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009210:	4319      	orrs	r1, r3
 8009212:	d110      	bne.n	8009236 <_dtoa_r+0xa26>
 8009214:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009218:	d029      	beq.n	800926e <_dtoa_r+0xa5e>
 800921a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800921c:	2b00      	cmp	r3, #0
 800921e:	dd02      	ble.n	8009226 <_dtoa_r+0xa16>
 8009220:	9b08      	ldr	r3, [sp, #32]
 8009222:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009226:	9b02      	ldr	r3, [sp, #8]
 8009228:	f883 8000 	strb.w	r8, [r3]
 800922c:	e63b      	b.n	8008ea6 <_dtoa_r+0x696>
 800922e:	4628      	mov	r0, r5
 8009230:	e7bb      	b.n	80091aa <_dtoa_r+0x99a>
 8009232:	2201      	movs	r2, #1
 8009234:	e7e1      	b.n	80091fa <_dtoa_r+0x9ea>
 8009236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009238:	2b00      	cmp	r3, #0
 800923a:	db04      	blt.n	8009246 <_dtoa_r+0xa36>
 800923c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800923e:	430b      	orrs	r3, r1
 8009240:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009242:	430b      	orrs	r3, r1
 8009244:	d120      	bne.n	8009288 <_dtoa_r+0xa78>
 8009246:	2a00      	cmp	r2, #0
 8009248:	dded      	ble.n	8009226 <_dtoa_r+0xa16>
 800924a:	4649      	mov	r1, r9
 800924c:	2201      	movs	r2, #1
 800924e:	4658      	mov	r0, fp
 8009250:	f000 fbfa 	bl	8009a48 <__lshift>
 8009254:	4621      	mov	r1, r4
 8009256:	4681      	mov	r9, r0
 8009258:	f000 fc62 	bl	8009b20 <__mcmp>
 800925c:	2800      	cmp	r0, #0
 800925e:	dc03      	bgt.n	8009268 <_dtoa_r+0xa58>
 8009260:	d1e1      	bne.n	8009226 <_dtoa_r+0xa16>
 8009262:	f018 0f01 	tst.w	r8, #1
 8009266:	d0de      	beq.n	8009226 <_dtoa_r+0xa16>
 8009268:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800926c:	d1d8      	bne.n	8009220 <_dtoa_r+0xa10>
 800926e:	2339      	movs	r3, #57	@ 0x39
 8009270:	9a02      	ldr	r2, [sp, #8]
 8009272:	7013      	strb	r3, [r2, #0]
 8009274:	4633      	mov	r3, r6
 8009276:	461e      	mov	r6, r3
 8009278:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800927c:	3b01      	subs	r3, #1
 800927e:	2a39      	cmp	r2, #57	@ 0x39
 8009280:	d052      	beq.n	8009328 <_dtoa_r+0xb18>
 8009282:	3201      	adds	r2, #1
 8009284:	701a      	strb	r2, [r3, #0]
 8009286:	e60e      	b.n	8008ea6 <_dtoa_r+0x696>
 8009288:	2a00      	cmp	r2, #0
 800928a:	dd07      	ble.n	800929c <_dtoa_r+0xa8c>
 800928c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009290:	d0ed      	beq.n	800926e <_dtoa_r+0xa5e>
 8009292:	9a02      	ldr	r2, [sp, #8]
 8009294:	f108 0301 	add.w	r3, r8, #1
 8009298:	7013      	strb	r3, [r2, #0]
 800929a:	e604      	b.n	8008ea6 <_dtoa_r+0x696>
 800929c:	9b07      	ldr	r3, [sp, #28]
 800929e:	9a07      	ldr	r2, [sp, #28]
 80092a0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80092a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d028      	beq.n	80092fc <_dtoa_r+0xaec>
 80092aa:	4649      	mov	r1, r9
 80092ac:	2300      	movs	r3, #0
 80092ae:	220a      	movs	r2, #10
 80092b0:	4658      	mov	r0, fp
 80092b2:	f000 f9d5 	bl	8009660 <__multadd>
 80092b6:	42af      	cmp	r7, r5
 80092b8:	4681      	mov	r9, r0
 80092ba:	f04f 0300 	mov.w	r3, #0
 80092be:	f04f 020a 	mov.w	r2, #10
 80092c2:	4639      	mov	r1, r7
 80092c4:	4658      	mov	r0, fp
 80092c6:	d107      	bne.n	80092d8 <_dtoa_r+0xac8>
 80092c8:	f000 f9ca 	bl	8009660 <__multadd>
 80092cc:	4607      	mov	r7, r0
 80092ce:	4605      	mov	r5, r0
 80092d0:	9b07      	ldr	r3, [sp, #28]
 80092d2:	3301      	adds	r3, #1
 80092d4:	9307      	str	r3, [sp, #28]
 80092d6:	e774      	b.n	80091c2 <_dtoa_r+0x9b2>
 80092d8:	f000 f9c2 	bl	8009660 <__multadd>
 80092dc:	4629      	mov	r1, r5
 80092de:	4607      	mov	r7, r0
 80092e0:	2300      	movs	r3, #0
 80092e2:	220a      	movs	r2, #10
 80092e4:	4658      	mov	r0, fp
 80092e6:	f000 f9bb 	bl	8009660 <__multadd>
 80092ea:	4605      	mov	r5, r0
 80092ec:	e7f0      	b.n	80092d0 <_dtoa_r+0xac0>
 80092ee:	9b08      	ldr	r3, [sp, #32]
 80092f0:	2700      	movs	r7, #0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	bfcc      	ite	gt
 80092f6:	461e      	movgt	r6, r3
 80092f8:	2601      	movle	r6, #1
 80092fa:	4456      	add	r6, sl
 80092fc:	4649      	mov	r1, r9
 80092fe:	2201      	movs	r2, #1
 8009300:	4658      	mov	r0, fp
 8009302:	f000 fba1 	bl	8009a48 <__lshift>
 8009306:	4621      	mov	r1, r4
 8009308:	4681      	mov	r9, r0
 800930a:	f000 fc09 	bl	8009b20 <__mcmp>
 800930e:	2800      	cmp	r0, #0
 8009310:	dcb0      	bgt.n	8009274 <_dtoa_r+0xa64>
 8009312:	d102      	bne.n	800931a <_dtoa_r+0xb0a>
 8009314:	f018 0f01 	tst.w	r8, #1
 8009318:	d1ac      	bne.n	8009274 <_dtoa_r+0xa64>
 800931a:	4633      	mov	r3, r6
 800931c:	461e      	mov	r6, r3
 800931e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009322:	2a30      	cmp	r2, #48	@ 0x30
 8009324:	d0fa      	beq.n	800931c <_dtoa_r+0xb0c>
 8009326:	e5be      	b.n	8008ea6 <_dtoa_r+0x696>
 8009328:	459a      	cmp	sl, r3
 800932a:	d1a4      	bne.n	8009276 <_dtoa_r+0xa66>
 800932c:	9b04      	ldr	r3, [sp, #16]
 800932e:	3301      	adds	r3, #1
 8009330:	9304      	str	r3, [sp, #16]
 8009332:	2331      	movs	r3, #49	@ 0x31
 8009334:	f88a 3000 	strb.w	r3, [sl]
 8009338:	e5b5      	b.n	8008ea6 <_dtoa_r+0x696>
 800933a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800933c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800939c <_dtoa_r+0xb8c>
 8009340:	b11b      	cbz	r3, 800934a <_dtoa_r+0xb3a>
 8009342:	f10a 0308 	add.w	r3, sl, #8
 8009346:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009348:	6013      	str	r3, [r2, #0]
 800934a:	4650      	mov	r0, sl
 800934c:	b017      	add	sp, #92	@ 0x5c
 800934e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009352:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009354:	2b01      	cmp	r3, #1
 8009356:	f77f ae3d 	ble.w	8008fd4 <_dtoa_r+0x7c4>
 800935a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800935c:	930a      	str	r3, [sp, #40]	@ 0x28
 800935e:	2001      	movs	r0, #1
 8009360:	e65b      	b.n	800901a <_dtoa_r+0x80a>
 8009362:	9b08      	ldr	r3, [sp, #32]
 8009364:	2b00      	cmp	r3, #0
 8009366:	f77f aed6 	ble.w	8009116 <_dtoa_r+0x906>
 800936a:	4656      	mov	r6, sl
 800936c:	4621      	mov	r1, r4
 800936e:	4648      	mov	r0, r9
 8009370:	f7ff f9c6 	bl	8008700 <quorem>
 8009374:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009378:	9b08      	ldr	r3, [sp, #32]
 800937a:	f806 8b01 	strb.w	r8, [r6], #1
 800937e:	eba6 020a 	sub.w	r2, r6, sl
 8009382:	4293      	cmp	r3, r2
 8009384:	ddb3      	ble.n	80092ee <_dtoa_r+0xade>
 8009386:	4649      	mov	r1, r9
 8009388:	2300      	movs	r3, #0
 800938a:	220a      	movs	r2, #10
 800938c:	4658      	mov	r0, fp
 800938e:	f000 f967 	bl	8009660 <__multadd>
 8009392:	4681      	mov	r9, r0
 8009394:	e7ea      	b.n	800936c <_dtoa_r+0xb5c>
 8009396:	bf00      	nop
 8009398:	0800be7b 	.word	0x0800be7b
 800939c:	0800bdff 	.word	0x0800bdff

080093a0 <_free_r>:
 80093a0:	b538      	push	{r3, r4, r5, lr}
 80093a2:	4605      	mov	r5, r0
 80093a4:	2900      	cmp	r1, #0
 80093a6:	d040      	beq.n	800942a <_free_r+0x8a>
 80093a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093ac:	1f0c      	subs	r4, r1, #4
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	bfb8      	it	lt
 80093b2:	18e4      	addlt	r4, r4, r3
 80093b4:	f000 f8e6 	bl	8009584 <__malloc_lock>
 80093b8:	4a1c      	ldr	r2, [pc, #112]	@ (800942c <_free_r+0x8c>)
 80093ba:	6813      	ldr	r3, [r2, #0]
 80093bc:	b933      	cbnz	r3, 80093cc <_free_r+0x2c>
 80093be:	6063      	str	r3, [r4, #4]
 80093c0:	6014      	str	r4, [r2, #0]
 80093c2:	4628      	mov	r0, r5
 80093c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093c8:	f000 b8e2 	b.w	8009590 <__malloc_unlock>
 80093cc:	42a3      	cmp	r3, r4
 80093ce:	d908      	bls.n	80093e2 <_free_r+0x42>
 80093d0:	6820      	ldr	r0, [r4, #0]
 80093d2:	1821      	adds	r1, r4, r0
 80093d4:	428b      	cmp	r3, r1
 80093d6:	bf01      	itttt	eq
 80093d8:	6819      	ldreq	r1, [r3, #0]
 80093da:	685b      	ldreq	r3, [r3, #4]
 80093dc:	1809      	addeq	r1, r1, r0
 80093de:	6021      	streq	r1, [r4, #0]
 80093e0:	e7ed      	b.n	80093be <_free_r+0x1e>
 80093e2:	461a      	mov	r2, r3
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	b10b      	cbz	r3, 80093ec <_free_r+0x4c>
 80093e8:	42a3      	cmp	r3, r4
 80093ea:	d9fa      	bls.n	80093e2 <_free_r+0x42>
 80093ec:	6811      	ldr	r1, [r2, #0]
 80093ee:	1850      	adds	r0, r2, r1
 80093f0:	42a0      	cmp	r0, r4
 80093f2:	d10b      	bne.n	800940c <_free_r+0x6c>
 80093f4:	6820      	ldr	r0, [r4, #0]
 80093f6:	4401      	add	r1, r0
 80093f8:	1850      	adds	r0, r2, r1
 80093fa:	4283      	cmp	r3, r0
 80093fc:	6011      	str	r1, [r2, #0]
 80093fe:	d1e0      	bne.n	80093c2 <_free_r+0x22>
 8009400:	6818      	ldr	r0, [r3, #0]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	4408      	add	r0, r1
 8009406:	6010      	str	r0, [r2, #0]
 8009408:	6053      	str	r3, [r2, #4]
 800940a:	e7da      	b.n	80093c2 <_free_r+0x22>
 800940c:	d902      	bls.n	8009414 <_free_r+0x74>
 800940e:	230c      	movs	r3, #12
 8009410:	602b      	str	r3, [r5, #0]
 8009412:	e7d6      	b.n	80093c2 <_free_r+0x22>
 8009414:	6820      	ldr	r0, [r4, #0]
 8009416:	1821      	adds	r1, r4, r0
 8009418:	428b      	cmp	r3, r1
 800941a:	bf01      	itttt	eq
 800941c:	6819      	ldreq	r1, [r3, #0]
 800941e:	685b      	ldreq	r3, [r3, #4]
 8009420:	1809      	addeq	r1, r1, r0
 8009422:	6021      	streq	r1, [r4, #0]
 8009424:	6063      	str	r3, [r4, #4]
 8009426:	6054      	str	r4, [r2, #4]
 8009428:	e7cb      	b.n	80093c2 <_free_r+0x22>
 800942a:	bd38      	pop	{r3, r4, r5, pc}
 800942c:	20002678 	.word	0x20002678

08009430 <malloc>:
 8009430:	4b02      	ldr	r3, [pc, #8]	@ (800943c <malloc+0xc>)
 8009432:	4601      	mov	r1, r0
 8009434:	6818      	ldr	r0, [r3, #0]
 8009436:	f000 b825 	b.w	8009484 <_malloc_r>
 800943a:	bf00      	nop
 800943c:	2000001c 	.word	0x2000001c

08009440 <sbrk_aligned>:
 8009440:	b570      	push	{r4, r5, r6, lr}
 8009442:	4e0f      	ldr	r6, [pc, #60]	@ (8009480 <sbrk_aligned+0x40>)
 8009444:	460c      	mov	r4, r1
 8009446:	6831      	ldr	r1, [r6, #0]
 8009448:	4605      	mov	r5, r0
 800944a:	b911      	cbnz	r1, 8009452 <sbrk_aligned+0x12>
 800944c:	f001 ffee 	bl	800b42c <_sbrk_r>
 8009450:	6030      	str	r0, [r6, #0]
 8009452:	4621      	mov	r1, r4
 8009454:	4628      	mov	r0, r5
 8009456:	f001 ffe9 	bl	800b42c <_sbrk_r>
 800945a:	1c43      	adds	r3, r0, #1
 800945c:	d103      	bne.n	8009466 <sbrk_aligned+0x26>
 800945e:	f04f 34ff 	mov.w	r4, #4294967295
 8009462:	4620      	mov	r0, r4
 8009464:	bd70      	pop	{r4, r5, r6, pc}
 8009466:	1cc4      	adds	r4, r0, #3
 8009468:	f024 0403 	bic.w	r4, r4, #3
 800946c:	42a0      	cmp	r0, r4
 800946e:	d0f8      	beq.n	8009462 <sbrk_aligned+0x22>
 8009470:	1a21      	subs	r1, r4, r0
 8009472:	4628      	mov	r0, r5
 8009474:	f001 ffda 	bl	800b42c <_sbrk_r>
 8009478:	3001      	adds	r0, #1
 800947a:	d1f2      	bne.n	8009462 <sbrk_aligned+0x22>
 800947c:	e7ef      	b.n	800945e <sbrk_aligned+0x1e>
 800947e:	bf00      	nop
 8009480:	20002674 	.word	0x20002674

08009484 <_malloc_r>:
 8009484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009488:	1ccd      	adds	r5, r1, #3
 800948a:	f025 0503 	bic.w	r5, r5, #3
 800948e:	3508      	adds	r5, #8
 8009490:	2d0c      	cmp	r5, #12
 8009492:	bf38      	it	cc
 8009494:	250c      	movcc	r5, #12
 8009496:	2d00      	cmp	r5, #0
 8009498:	4606      	mov	r6, r0
 800949a:	db01      	blt.n	80094a0 <_malloc_r+0x1c>
 800949c:	42a9      	cmp	r1, r5
 800949e:	d904      	bls.n	80094aa <_malloc_r+0x26>
 80094a0:	230c      	movs	r3, #12
 80094a2:	6033      	str	r3, [r6, #0]
 80094a4:	2000      	movs	r0, #0
 80094a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009580 <_malloc_r+0xfc>
 80094ae:	f000 f869 	bl	8009584 <__malloc_lock>
 80094b2:	f8d8 3000 	ldr.w	r3, [r8]
 80094b6:	461c      	mov	r4, r3
 80094b8:	bb44      	cbnz	r4, 800950c <_malloc_r+0x88>
 80094ba:	4629      	mov	r1, r5
 80094bc:	4630      	mov	r0, r6
 80094be:	f7ff ffbf 	bl	8009440 <sbrk_aligned>
 80094c2:	1c43      	adds	r3, r0, #1
 80094c4:	4604      	mov	r4, r0
 80094c6:	d158      	bne.n	800957a <_malloc_r+0xf6>
 80094c8:	f8d8 4000 	ldr.w	r4, [r8]
 80094cc:	4627      	mov	r7, r4
 80094ce:	2f00      	cmp	r7, #0
 80094d0:	d143      	bne.n	800955a <_malloc_r+0xd6>
 80094d2:	2c00      	cmp	r4, #0
 80094d4:	d04b      	beq.n	800956e <_malloc_r+0xea>
 80094d6:	6823      	ldr	r3, [r4, #0]
 80094d8:	4639      	mov	r1, r7
 80094da:	4630      	mov	r0, r6
 80094dc:	eb04 0903 	add.w	r9, r4, r3
 80094e0:	f001 ffa4 	bl	800b42c <_sbrk_r>
 80094e4:	4581      	cmp	r9, r0
 80094e6:	d142      	bne.n	800956e <_malloc_r+0xea>
 80094e8:	6821      	ldr	r1, [r4, #0]
 80094ea:	4630      	mov	r0, r6
 80094ec:	1a6d      	subs	r5, r5, r1
 80094ee:	4629      	mov	r1, r5
 80094f0:	f7ff ffa6 	bl	8009440 <sbrk_aligned>
 80094f4:	3001      	adds	r0, #1
 80094f6:	d03a      	beq.n	800956e <_malloc_r+0xea>
 80094f8:	6823      	ldr	r3, [r4, #0]
 80094fa:	442b      	add	r3, r5
 80094fc:	6023      	str	r3, [r4, #0]
 80094fe:	f8d8 3000 	ldr.w	r3, [r8]
 8009502:	685a      	ldr	r2, [r3, #4]
 8009504:	bb62      	cbnz	r2, 8009560 <_malloc_r+0xdc>
 8009506:	f8c8 7000 	str.w	r7, [r8]
 800950a:	e00f      	b.n	800952c <_malloc_r+0xa8>
 800950c:	6822      	ldr	r2, [r4, #0]
 800950e:	1b52      	subs	r2, r2, r5
 8009510:	d420      	bmi.n	8009554 <_malloc_r+0xd0>
 8009512:	2a0b      	cmp	r2, #11
 8009514:	d917      	bls.n	8009546 <_malloc_r+0xc2>
 8009516:	1961      	adds	r1, r4, r5
 8009518:	42a3      	cmp	r3, r4
 800951a:	6025      	str	r5, [r4, #0]
 800951c:	bf18      	it	ne
 800951e:	6059      	strne	r1, [r3, #4]
 8009520:	6863      	ldr	r3, [r4, #4]
 8009522:	bf08      	it	eq
 8009524:	f8c8 1000 	streq.w	r1, [r8]
 8009528:	5162      	str	r2, [r4, r5]
 800952a:	604b      	str	r3, [r1, #4]
 800952c:	4630      	mov	r0, r6
 800952e:	f000 f82f 	bl	8009590 <__malloc_unlock>
 8009532:	f104 000b 	add.w	r0, r4, #11
 8009536:	1d23      	adds	r3, r4, #4
 8009538:	f020 0007 	bic.w	r0, r0, #7
 800953c:	1ac2      	subs	r2, r0, r3
 800953e:	bf1c      	itt	ne
 8009540:	1a1b      	subne	r3, r3, r0
 8009542:	50a3      	strne	r3, [r4, r2]
 8009544:	e7af      	b.n	80094a6 <_malloc_r+0x22>
 8009546:	6862      	ldr	r2, [r4, #4]
 8009548:	42a3      	cmp	r3, r4
 800954a:	bf0c      	ite	eq
 800954c:	f8c8 2000 	streq.w	r2, [r8]
 8009550:	605a      	strne	r2, [r3, #4]
 8009552:	e7eb      	b.n	800952c <_malloc_r+0xa8>
 8009554:	4623      	mov	r3, r4
 8009556:	6864      	ldr	r4, [r4, #4]
 8009558:	e7ae      	b.n	80094b8 <_malloc_r+0x34>
 800955a:	463c      	mov	r4, r7
 800955c:	687f      	ldr	r7, [r7, #4]
 800955e:	e7b6      	b.n	80094ce <_malloc_r+0x4a>
 8009560:	461a      	mov	r2, r3
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	42a3      	cmp	r3, r4
 8009566:	d1fb      	bne.n	8009560 <_malloc_r+0xdc>
 8009568:	2300      	movs	r3, #0
 800956a:	6053      	str	r3, [r2, #4]
 800956c:	e7de      	b.n	800952c <_malloc_r+0xa8>
 800956e:	230c      	movs	r3, #12
 8009570:	4630      	mov	r0, r6
 8009572:	6033      	str	r3, [r6, #0]
 8009574:	f000 f80c 	bl	8009590 <__malloc_unlock>
 8009578:	e794      	b.n	80094a4 <_malloc_r+0x20>
 800957a:	6005      	str	r5, [r0, #0]
 800957c:	e7d6      	b.n	800952c <_malloc_r+0xa8>
 800957e:	bf00      	nop
 8009580:	20002678 	.word	0x20002678

08009584 <__malloc_lock>:
 8009584:	4801      	ldr	r0, [pc, #4]	@ (800958c <__malloc_lock+0x8>)
 8009586:	f7ff b890 	b.w	80086aa <__retarget_lock_acquire_recursive>
 800958a:	bf00      	nop
 800958c:	20002670 	.word	0x20002670

08009590 <__malloc_unlock>:
 8009590:	4801      	ldr	r0, [pc, #4]	@ (8009598 <__malloc_unlock+0x8>)
 8009592:	f7ff b88b 	b.w	80086ac <__retarget_lock_release_recursive>
 8009596:	bf00      	nop
 8009598:	20002670 	.word	0x20002670

0800959c <_Balloc>:
 800959c:	b570      	push	{r4, r5, r6, lr}
 800959e:	69c6      	ldr	r6, [r0, #28]
 80095a0:	4604      	mov	r4, r0
 80095a2:	460d      	mov	r5, r1
 80095a4:	b976      	cbnz	r6, 80095c4 <_Balloc+0x28>
 80095a6:	2010      	movs	r0, #16
 80095a8:	f7ff ff42 	bl	8009430 <malloc>
 80095ac:	4602      	mov	r2, r0
 80095ae:	61e0      	str	r0, [r4, #28]
 80095b0:	b920      	cbnz	r0, 80095bc <_Balloc+0x20>
 80095b2:	216b      	movs	r1, #107	@ 0x6b
 80095b4:	4b17      	ldr	r3, [pc, #92]	@ (8009614 <_Balloc+0x78>)
 80095b6:	4818      	ldr	r0, [pc, #96]	@ (8009618 <_Balloc+0x7c>)
 80095b8:	f001 ff4e 	bl	800b458 <__assert_func>
 80095bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095c0:	6006      	str	r6, [r0, #0]
 80095c2:	60c6      	str	r6, [r0, #12]
 80095c4:	69e6      	ldr	r6, [r4, #28]
 80095c6:	68f3      	ldr	r3, [r6, #12]
 80095c8:	b183      	cbz	r3, 80095ec <_Balloc+0x50>
 80095ca:	69e3      	ldr	r3, [r4, #28]
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095d2:	b9b8      	cbnz	r0, 8009604 <_Balloc+0x68>
 80095d4:	2101      	movs	r1, #1
 80095d6:	fa01 f605 	lsl.w	r6, r1, r5
 80095da:	1d72      	adds	r2, r6, #5
 80095dc:	4620      	mov	r0, r4
 80095de:	0092      	lsls	r2, r2, #2
 80095e0:	f001 ff58 	bl	800b494 <_calloc_r>
 80095e4:	b160      	cbz	r0, 8009600 <_Balloc+0x64>
 80095e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80095ea:	e00e      	b.n	800960a <_Balloc+0x6e>
 80095ec:	2221      	movs	r2, #33	@ 0x21
 80095ee:	2104      	movs	r1, #4
 80095f0:	4620      	mov	r0, r4
 80095f2:	f001 ff4f 	bl	800b494 <_calloc_r>
 80095f6:	69e3      	ldr	r3, [r4, #28]
 80095f8:	60f0      	str	r0, [r6, #12]
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1e4      	bne.n	80095ca <_Balloc+0x2e>
 8009600:	2000      	movs	r0, #0
 8009602:	bd70      	pop	{r4, r5, r6, pc}
 8009604:	6802      	ldr	r2, [r0, #0]
 8009606:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800960a:	2300      	movs	r3, #0
 800960c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009610:	e7f7      	b.n	8009602 <_Balloc+0x66>
 8009612:	bf00      	nop
 8009614:	0800be0c 	.word	0x0800be0c
 8009618:	0800be8c 	.word	0x0800be8c

0800961c <_Bfree>:
 800961c:	b570      	push	{r4, r5, r6, lr}
 800961e:	69c6      	ldr	r6, [r0, #28]
 8009620:	4605      	mov	r5, r0
 8009622:	460c      	mov	r4, r1
 8009624:	b976      	cbnz	r6, 8009644 <_Bfree+0x28>
 8009626:	2010      	movs	r0, #16
 8009628:	f7ff ff02 	bl	8009430 <malloc>
 800962c:	4602      	mov	r2, r0
 800962e:	61e8      	str	r0, [r5, #28]
 8009630:	b920      	cbnz	r0, 800963c <_Bfree+0x20>
 8009632:	218f      	movs	r1, #143	@ 0x8f
 8009634:	4b08      	ldr	r3, [pc, #32]	@ (8009658 <_Bfree+0x3c>)
 8009636:	4809      	ldr	r0, [pc, #36]	@ (800965c <_Bfree+0x40>)
 8009638:	f001 ff0e 	bl	800b458 <__assert_func>
 800963c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009640:	6006      	str	r6, [r0, #0]
 8009642:	60c6      	str	r6, [r0, #12]
 8009644:	b13c      	cbz	r4, 8009656 <_Bfree+0x3a>
 8009646:	69eb      	ldr	r3, [r5, #28]
 8009648:	6862      	ldr	r2, [r4, #4]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009650:	6021      	str	r1, [r4, #0]
 8009652:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009656:	bd70      	pop	{r4, r5, r6, pc}
 8009658:	0800be0c 	.word	0x0800be0c
 800965c:	0800be8c 	.word	0x0800be8c

08009660 <__multadd>:
 8009660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009664:	4607      	mov	r7, r0
 8009666:	460c      	mov	r4, r1
 8009668:	461e      	mov	r6, r3
 800966a:	2000      	movs	r0, #0
 800966c:	690d      	ldr	r5, [r1, #16]
 800966e:	f101 0c14 	add.w	ip, r1, #20
 8009672:	f8dc 3000 	ldr.w	r3, [ip]
 8009676:	3001      	adds	r0, #1
 8009678:	b299      	uxth	r1, r3
 800967a:	fb02 6101 	mla	r1, r2, r1, r6
 800967e:	0c1e      	lsrs	r6, r3, #16
 8009680:	0c0b      	lsrs	r3, r1, #16
 8009682:	fb02 3306 	mla	r3, r2, r6, r3
 8009686:	b289      	uxth	r1, r1
 8009688:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800968c:	4285      	cmp	r5, r0
 800968e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009692:	f84c 1b04 	str.w	r1, [ip], #4
 8009696:	dcec      	bgt.n	8009672 <__multadd+0x12>
 8009698:	b30e      	cbz	r6, 80096de <__multadd+0x7e>
 800969a:	68a3      	ldr	r3, [r4, #8]
 800969c:	42ab      	cmp	r3, r5
 800969e:	dc19      	bgt.n	80096d4 <__multadd+0x74>
 80096a0:	6861      	ldr	r1, [r4, #4]
 80096a2:	4638      	mov	r0, r7
 80096a4:	3101      	adds	r1, #1
 80096a6:	f7ff ff79 	bl	800959c <_Balloc>
 80096aa:	4680      	mov	r8, r0
 80096ac:	b928      	cbnz	r0, 80096ba <__multadd+0x5a>
 80096ae:	4602      	mov	r2, r0
 80096b0:	21ba      	movs	r1, #186	@ 0xba
 80096b2:	4b0c      	ldr	r3, [pc, #48]	@ (80096e4 <__multadd+0x84>)
 80096b4:	480c      	ldr	r0, [pc, #48]	@ (80096e8 <__multadd+0x88>)
 80096b6:	f001 fecf 	bl	800b458 <__assert_func>
 80096ba:	6922      	ldr	r2, [r4, #16]
 80096bc:	f104 010c 	add.w	r1, r4, #12
 80096c0:	3202      	adds	r2, #2
 80096c2:	0092      	lsls	r2, r2, #2
 80096c4:	300c      	adds	r0, #12
 80096c6:	f7ff f808 	bl	80086da <memcpy>
 80096ca:	4621      	mov	r1, r4
 80096cc:	4638      	mov	r0, r7
 80096ce:	f7ff ffa5 	bl	800961c <_Bfree>
 80096d2:	4644      	mov	r4, r8
 80096d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80096d8:	3501      	adds	r5, #1
 80096da:	615e      	str	r6, [r3, #20]
 80096dc:	6125      	str	r5, [r4, #16]
 80096de:	4620      	mov	r0, r4
 80096e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096e4:	0800be7b 	.word	0x0800be7b
 80096e8:	0800be8c 	.word	0x0800be8c

080096ec <__s2b>:
 80096ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096f0:	4615      	mov	r5, r2
 80096f2:	2209      	movs	r2, #9
 80096f4:	461f      	mov	r7, r3
 80096f6:	3308      	adds	r3, #8
 80096f8:	460c      	mov	r4, r1
 80096fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80096fe:	4606      	mov	r6, r0
 8009700:	2201      	movs	r2, #1
 8009702:	2100      	movs	r1, #0
 8009704:	429a      	cmp	r2, r3
 8009706:	db09      	blt.n	800971c <__s2b+0x30>
 8009708:	4630      	mov	r0, r6
 800970a:	f7ff ff47 	bl	800959c <_Balloc>
 800970e:	b940      	cbnz	r0, 8009722 <__s2b+0x36>
 8009710:	4602      	mov	r2, r0
 8009712:	21d3      	movs	r1, #211	@ 0xd3
 8009714:	4b18      	ldr	r3, [pc, #96]	@ (8009778 <__s2b+0x8c>)
 8009716:	4819      	ldr	r0, [pc, #100]	@ (800977c <__s2b+0x90>)
 8009718:	f001 fe9e 	bl	800b458 <__assert_func>
 800971c:	0052      	lsls	r2, r2, #1
 800971e:	3101      	adds	r1, #1
 8009720:	e7f0      	b.n	8009704 <__s2b+0x18>
 8009722:	9b08      	ldr	r3, [sp, #32]
 8009724:	2d09      	cmp	r5, #9
 8009726:	6143      	str	r3, [r0, #20]
 8009728:	f04f 0301 	mov.w	r3, #1
 800972c:	6103      	str	r3, [r0, #16]
 800972e:	dd16      	ble.n	800975e <__s2b+0x72>
 8009730:	f104 0909 	add.w	r9, r4, #9
 8009734:	46c8      	mov	r8, r9
 8009736:	442c      	add	r4, r5
 8009738:	f818 3b01 	ldrb.w	r3, [r8], #1
 800973c:	4601      	mov	r1, r0
 800973e:	220a      	movs	r2, #10
 8009740:	4630      	mov	r0, r6
 8009742:	3b30      	subs	r3, #48	@ 0x30
 8009744:	f7ff ff8c 	bl	8009660 <__multadd>
 8009748:	45a0      	cmp	r8, r4
 800974a:	d1f5      	bne.n	8009738 <__s2b+0x4c>
 800974c:	f1a5 0408 	sub.w	r4, r5, #8
 8009750:	444c      	add	r4, r9
 8009752:	1b2d      	subs	r5, r5, r4
 8009754:	1963      	adds	r3, r4, r5
 8009756:	42bb      	cmp	r3, r7
 8009758:	db04      	blt.n	8009764 <__s2b+0x78>
 800975a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800975e:	2509      	movs	r5, #9
 8009760:	340a      	adds	r4, #10
 8009762:	e7f6      	b.n	8009752 <__s2b+0x66>
 8009764:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009768:	4601      	mov	r1, r0
 800976a:	220a      	movs	r2, #10
 800976c:	4630      	mov	r0, r6
 800976e:	3b30      	subs	r3, #48	@ 0x30
 8009770:	f7ff ff76 	bl	8009660 <__multadd>
 8009774:	e7ee      	b.n	8009754 <__s2b+0x68>
 8009776:	bf00      	nop
 8009778:	0800be7b 	.word	0x0800be7b
 800977c:	0800be8c 	.word	0x0800be8c

08009780 <__hi0bits>:
 8009780:	4603      	mov	r3, r0
 8009782:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009786:	bf3a      	itte	cc
 8009788:	0403      	lslcc	r3, r0, #16
 800978a:	2010      	movcc	r0, #16
 800978c:	2000      	movcs	r0, #0
 800978e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009792:	bf3c      	itt	cc
 8009794:	021b      	lslcc	r3, r3, #8
 8009796:	3008      	addcc	r0, #8
 8009798:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800979c:	bf3c      	itt	cc
 800979e:	011b      	lslcc	r3, r3, #4
 80097a0:	3004      	addcc	r0, #4
 80097a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097a6:	bf3c      	itt	cc
 80097a8:	009b      	lslcc	r3, r3, #2
 80097aa:	3002      	addcc	r0, #2
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	db05      	blt.n	80097bc <__hi0bits+0x3c>
 80097b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80097b4:	f100 0001 	add.w	r0, r0, #1
 80097b8:	bf08      	it	eq
 80097ba:	2020      	moveq	r0, #32
 80097bc:	4770      	bx	lr

080097be <__lo0bits>:
 80097be:	6803      	ldr	r3, [r0, #0]
 80097c0:	4602      	mov	r2, r0
 80097c2:	f013 0007 	ands.w	r0, r3, #7
 80097c6:	d00b      	beq.n	80097e0 <__lo0bits+0x22>
 80097c8:	07d9      	lsls	r1, r3, #31
 80097ca:	d421      	bmi.n	8009810 <__lo0bits+0x52>
 80097cc:	0798      	lsls	r0, r3, #30
 80097ce:	bf49      	itett	mi
 80097d0:	085b      	lsrmi	r3, r3, #1
 80097d2:	089b      	lsrpl	r3, r3, #2
 80097d4:	2001      	movmi	r0, #1
 80097d6:	6013      	strmi	r3, [r2, #0]
 80097d8:	bf5c      	itt	pl
 80097da:	2002      	movpl	r0, #2
 80097dc:	6013      	strpl	r3, [r2, #0]
 80097de:	4770      	bx	lr
 80097e0:	b299      	uxth	r1, r3
 80097e2:	b909      	cbnz	r1, 80097e8 <__lo0bits+0x2a>
 80097e4:	2010      	movs	r0, #16
 80097e6:	0c1b      	lsrs	r3, r3, #16
 80097e8:	b2d9      	uxtb	r1, r3
 80097ea:	b909      	cbnz	r1, 80097f0 <__lo0bits+0x32>
 80097ec:	3008      	adds	r0, #8
 80097ee:	0a1b      	lsrs	r3, r3, #8
 80097f0:	0719      	lsls	r1, r3, #28
 80097f2:	bf04      	itt	eq
 80097f4:	091b      	lsreq	r3, r3, #4
 80097f6:	3004      	addeq	r0, #4
 80097f8:	0799      	lsls	r1, r3, #30
 80097fa:	bf04      	itt	eq
 80097fc:	089b      	lsreq	r3, r3, #2
 80097fe:	3002      	addeq	r0, #2
 8009800:	07d9      	lsls	r1, r3, #31
 8009802:	d403      	bmi.n	800980c <__lo0bits+0x4e>
 8009804:	085b      	lsrs	r3, r3, #1
 8009806:	f100 0001 	add.w	r0, r0, #1
 800980a:	d003      	beq.n	8009814 <__lo0bits+0x56>
 800980c:	6013      	str	r3, [r2, #0]
 800980e:	4770      	bx	lr
 8009810:	2000      	movs	r0, #0
 8009812:	4770      	bx	lr
 8009814:	2020      	movs	r0, #32
 8009816:	4770      	bx	lr

08009818 <__i2b>:
 8009818:	b510      	push	{r4, lr}
 800981a:	460c      	mov	r4, r1
 800981c:	2101      	movs	r1, #1
 800981e:	f7ff febd 	bl	800959c <_Balloc>
 8009822:	4602      	mov	r2, r0
 8009824:	b928      	cbnz	r0, 8009832 <__i2b+0x1a>
 8009826:	f240 1145 	movw	r1, #325	@ 0x145
 800982a:	4b04      	ldr	r3, [pc, #16]	@ (800983c <__i2b+0x24>)
 800982c:	4804      	ldr	r0, [pc, #16]	@ (8009840 <__i2b+0x28>)
 800982e:	f001 fe13 	bl	800b458 <__assert_func>
 8009832:	2301      	movs	r3, #1
 8009834:	6144      	str	r4, [r0, #20]
 8009836:	6103      	str	r3, [r0, #16]
 8009838:	bd10      	pop	{r4, pc}
 800983a:	bf00      	nop
 800983c:	0800be7b 	.word	0x0800be7b
 8009840:	0800be8c 	.word	0x0800be8c

08009844 <__multiply>:
 8009844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009848:	4614      	mov	r4, r2
 800984a:	690a      	ldr	r2, [r1, #16]
 800984c:	6923      	ldr	r3, [r4, #16]
 800984e:	460f      	mov	r7, r1
 8009850:	429a      	cmp	r2, r3
 8009852:	bfa2      	ittt	ge
 8009854:	4623      	movge	r3, r4
 8009856:	460c      	movge	r4, r1
 8009858:	461f      	movge	r7, r3
 800985a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800985e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009862:	68a3      	ldr	r3, [r4, #8]
 8009864:	6861      	ldr	r1, [r4, #4]
 8009866:	eb0a 0609 	add.w	r6, sl, r9
 800986a:	42b3      	cmp	r3, r6
 800986c:	b085      	sub	sp, #20
 800986e:	bfb8      	it	lt
 8009870:	3101      	addlt	r1, #1
 8009872:	f7ff fe93 	bl	800959c <_Balloc>
 8009876:	b930      	cbnz	r0, 8009886 <__multiply+0x42>
 8009878:	4602      	mov	r2, r0
 800987a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800987e:	4b43      	ldr	r3, [pc, #268]	@ (800998c <__multiply+0x148>)
 8009880:	4843      	ldr	r0, [pc, #268]	@ (8009990 <__multiply+0x14c>)
 8009882:	f001 fde9 	bl	800b458 <__assert_func>
 8009886:	f100 0514 	add.w	r5, r0, #20
 800988a:	462b      	mov	r3, r5
 800988c:	2200      	movs	r2, #0
 800988e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009892:	4543      	cmp	r3, r8
 8009894:	d321      	bcc.n	80098da <__multiply+0x96>
 8009896:	f107 0114 	add.w	r1, r7, #20
 800989a:	f104 0214 	add.w	r2, r4, #20
 800989e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80098a2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80098a6:	9302      	str	r3, [sp, #8]
 80098a8:	1b13      	subs	r3, r2, r4
 80098aa:	3b15      	subs	r3, #21
 80098ac:	f023 0303 	bic.w	r3, r3, #3
 80098b0:	3304      	adds	r3, #4
 80098b2:	f104 0715 	add.w	r7, r4, #21
 80098b6:	42ba      	cmp	r2, r7
 80098b8:	bf38      	it	cc
 80098ba:	2304      	movcc	r3, #4
 80098bc:	9301      	str	r3, [sp, #4]
 80098be:	9b02      	ldr	r3, [sp, #8]
 80098c0:	9103      	str	r1, [sp, #12]
 80098c2:	428b      	cmp	r3, r1
 80098c4:	d80c      	bhi.n	80098e0 <__multiply+0x9c>
 80098c6:	2e00      	cmp	r6, #0
 80098c8:	dd03      	ble.n	80098d2 <__multiply+0x8e>
 80098ca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d05a      	beq.n	8009988 <__multiply+0x144>
 80098d2:	6106      	str	r6, [r0, #16]
 80098d4:	b005      	add	sp, #20
 80098d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098da:	f843 2b04 	str.w	r2, [r3], #4
 80098de:	e7d8      	b.n	8009892 <__multiply+0x4e>
 80098e0:	f8b1 a000 	ldrh.w	sl, [r1]
 80098e4:	f1ba 0f00 	cmp.w	sl, #0
 80098e8:	d023      	beq.n	8009932 <__multiply+0xee>
 80098ea:	46a9      	mov	r9, r5
 80098ec:	f04f 0c00 	mov.w	ip, #0
 80098f0:	f104 0e14 	add.w	lr, r4, #20
 80098f4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80098f8:	f8d9 3000 	ldr.w	r3, [r9]
 80098fc:	fa1f fb87 	uxth.w	fp, r7
 8009900:	b29b      	uxth	r3, r3
 8009902:	fb0a 330b 	mla	r3, sl, fp, r3
 8009906:	4463      	add	r3, ip
 8009908:	f8d9 c000 	ldr.w	ip, [r9]
 800990c:	0c3f      	lsrs	r7, r7, #16
 800990e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009912:	fb0a c707 	mla	r7, sl, r7, ip
 8009916:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800991a:	b29b      	uxth	r3, r3
 800991c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009920:	4572      	cmp	r2, lr
 8009922:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009926:	f849 3b04 	str.w	r3, [r9], #4
 800992a:	d8e3      	bhi.n	80098f4 <__multiply+0xb0>
 800992c:	9b01      	ldr	r3, [sp, #4]
 800992e:	f845 c003 	str.w	ip, [r5, r3]
 8009932:	9b03      	ldr	r3, [sp, #12]
 8009934:	3104      	adds	r1, #4
 8009936:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800993a:	f1b9 0f00 	cmp.w	r9, #0
 800993e:	d021      	beq.n	8009984 <__multiply+0x140>
 8009940:	46ae      	mov	lr, r5
 8009942:	f04f 0a00 	mov.w	sl, #0
 8009946:	682b      	ldr	r3, [r5, #0]
 8009948:	f104 0c14 	add.w	ip, r4, #20
 800994c:	f8bc b000 	ldrh.w	fp, [ip]
 8009950:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009954:	b29b      	uxth	r3, r3
 8009956:	fb09 770b 	mla	r7, r9, fp, r7
 800995a:	4457      	add	r7, sl
 800995c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009960:	f84e 3b04 	str.w	r3, [lr], #4
 8009964:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009968:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800996c:	f8be 3000 	ldrh.w	r3, [lr]
 8009970:	4562      	cmp	r2, ip
 8009972:	fb09 330a 	mla	r3, r9, sl, r3
 8009976:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800997a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800997e:	d8e5      	bhi.n	800994c <__multiply+0x108>
 8009980:	9f01      	ldr	r7, [sp, #4]
 8009982:	51eb      	str	r3, [r5, r7]
 8009984:	3504      	adds	r5, #4
 8009986:	e79a      	b.n	80098be <__multiply+0x7a>
 8009988:	3e01      	subs	r6, #1
 800998a:	e79c      	b.n	80098c6 <__multiply+0x82>
 800998c:	0800be7b 	.word	0x0800be7b
 8009990:	0800be8c 	.word	0x0800be8c

08009994 <__pow5mult>:
 8009994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009998:	4615      	mov	r5, r2
 800999a:	f012 0203 	ands.w	r2, r2, #3
 800999e:	4607      	mov	r7, r0
 80099a0:	460e      	mov	r6, r1
 80099a2:	d007      	beq.n	80099b4 <__pow5mult+0x20>
 80099a4:	4c25      	ldr	r4, [pc, #148]	@ (8009a3c <__pow5mult+0xa8>)
 80099a6:	3a01      	subs	r2, #1
 80099a8:	2300      	movs	r3, #0
 80099aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099ae:	f7ff fe57 	bl	8009660 <__multadd>
 80099b2:	4606      	mov	r6, r0
 80099b4:	10ad      	asrs	r5, r5, #2
 80099b6:	d03d      	beq.n	8009a34 <__pow5mult+0xa0>
 80099b8:	69fc      	ldr	r4, [r7, #28]
 80099ba:	b97c      	cbnz	r4, 80099dc <__pow5mult+0x48>
 80099bc:	2010      	movs	r0, #16
 80099be:	f7ff fd37 	bl	8009430 <malloc>
 80099c2:	4602      	mov	r2, r0
 80099c4:	61f8      	str	r0, [r7, #28]
 80099c6:	b928      	cbnz	r0, 80099d4 <__pow5mult+0x40>
 80099c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80099cc:	4b1c      	ldr	r3, [pc, #112]	@ (8009a40 <__pow5mult+0xac>)
 80099ce:	481d      	ldr	r0, [pc, #116]	@ (8009a44 <__pow5mult+0xb0>)
 80099d0:	f001 fd42 	bl	800b458 <__assert_func>
 80099d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80099d8:	6004      	str	r4, [r0, #0]
 80099da:	60c4      	str	r4, [r0, #12]
 80099dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80099e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80099e4:	b94c      	cbnz	r4, 80099fa <__pow5mult+0x66>
 80099e6:	f240 2171 	movw	r1, #625	@ 0x271
 80099ea:	4638      	mov	r0, r7
 80099ec:	f7ff ff14 	bl	8009818 <__i2b>
 80099f0:	2300      	movs	r3, #0
 80099f2:	4604      	mov	r4, r0
 80099f4:	f8c8 0008 	str.w	r0, [r8, #8]
 80099f8:	6003      	str	r3, [r0, #0]
 80099fa:	f04f 0900 	mov.w	r9, #0
 80099fe:	07eb      	lsls	r3, r5, #31
 8009a00:	d50a      	bpl.n	8009a18 <__pow5mult+0x84>
 8009a02:	4631      	mov	r1, r6
 8009a04:	4622      	mov	r2, r4
 8009a06:	4638      	mov	r0, r7
 8009a08:	f7ff ff1c 	bl	8009844 <__multiply>
 8009a0c:	4680      	mov	r8, r0
 8009a0e:	4631      	mov	r1, r6
 8009a10:	4638      	mov	r0, r7
 8009a12:	f7ff fe03 	bl	800961c <_Bfree>
 8009a16:	4646      	mov	r6, r8
 8009a18:	106d      	asrs	r5, r5, #1
 8009a1a:	d00b      	beq.n	8009a34 <__pow5mult+0xa0>
 8009a1c:	6820      	ldr	r0, [r4, #0]
 8009a1e:	b938      	cbnz	r0, 8009a30 <__pow5mult+0x9c>
 8009a20:	4622      	mov	r2, r4
 8009a22:	4621      	mov	r1, r4
 8009a24:	4638      	mov	r0, r7
 8009a26:	f7ff ff0d 	bl	8009844 <__multiply>
 8009a2a:	6020      	str	r0, [r4, #0]
 8009a2c:	f8c0 9000 	str.w	r9, [r0]
 8009a30:	4604      	mov	r4, r0
 8009a32:	e7e4      	b.n	80099fe <__pow5mult+0x6a>
 8009a34:	4630      	mov	r0, r6
 8009a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a3a:	bf00      	nop
 8009a3c:	0800bee8 	.word	0x0800bee8
 8009a40:	0800be0c 	.word	0x0800be0c
 8009a44:	0800be8c 	.word	0x0800be8c

08009a48 <__lshift>:
 8009a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a4c:	460c      	mov	r4, r1
 8009a4e:	4607      	mov	r7, r0
 8009a50:	4691      	mov	r9, r2
 8009a52:	6923      	ldr	r3, [r4, #16]
 8009a54:	6849      	ldr	r1, [r1, #4]
 8009a56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a5a:	68a3      	ldr	r3, [r4, #8]
 8009a5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a60:	f108 0601 	add.w	r6, r8, #1
 8009a64:	42b3      	cmp	r3, r6
 8009a66:	db0b      	blt.n	8009a80 <__lshift+0x38>
 8009a68:	4638      	mov	r0, r7
 8009a6a:	f7ff fd97 	bl	800959c <_Balloc>
 8009a6e:	4605      	mov	r5, r0
 8009a70:	b948      	cbnz	r0, 8009a86 <__lshift+0x3e>
 8009a72:	4602      	mov	r2, r0
 8009a74:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009a78:	4b27      	ldr	r3, [pc, #156]	@ (8009b18 <__lshift+0xd0>)
 8009a7a:	4828      	ldr	r0, [pc, #160]	@ (8009b1c <__lshift+0xd4>)
 8009a7c:	f001 fcec 	bl	800b458 <__assert_func>
 8009a80:	3101      	adds	r1, #1
 8009a82:	005b      	lsls	r3, r3, #1
 8009a84:	e7ee      	b.n	8009a64 <__lshift+0x1c>
 8009a86:	2300      	movs	r3, #0
 8009a88:	f100 0114 	add.w	r1, r0, #20
 8009a8c:	f100 0210 	add.w	r2, r0, #16
 8009a90:	4618      	mov	r0, r3
 8009a92:	4553      	cmp	r3, sl
 8009a94:	db33      	blt.n	8009afe <__lshift+0xb6>
 8009a96:	6920      	ldr	r0, [r4, #16]
 8009a98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a9c:	f104 0314 	add.w	r3, r4, #20
 8009aa0:	f019 091f 	ands.w	r9, r9, #31
 8009aa4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009aa8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009aac:	d02b      	beq.n	8009b06 <__lshift+0xbe>
 8009aae:	468a      	mov	sl, r1
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f1c9 0e20 	rsb	lr, r9, #32
 8009ab6:	6818      	ldr	r0, [r3, #0]
 8009ab8:	fa00 f009 	lsl.w	r0, r0, r9
 8009abc:	4310      	orrs	r0, r2
 8009abe:	f84a 0b04 	str.w	r0, [sl], #4
 8009ac2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ac6:	459c      	cmp	ip, r3
 8009ac8:	fa22 f20e 	lsr.w	r2, r2, lr
 8009acc:	d8f3      	bhi.n	8009ab6 <__lshift+0x6e>
 8009ace:	ebac 0304 	sub.w	r3, ip, r4
 8009ad2:	3b15      	subs	r3, #21
 8009ad4:	f023 0303 	bic.w	r3, r3, #3
 8009ad8:	3304      	adds	r3, #4
 8009ada:	f104 0015 	add.w	r0, r4, #21
 8009ade:	4584      	cmp	ip, r0
 8009ae0:	bf38      	it	cc
 8009ae2:	2304      	movcc	r3, #4
 8009ae4:	50ca      	str	r2, [r1, r3]
 8009ae6:	b10a      	cbz	r2, 8009aec <__lshift+0xa4>
 8009ae8:	f108 0602 	add.w	r6, r8, #2
 8009aec:	3e01      	subs	r6, #1
 8009aee:	4638      	mov	r0, r7
 8009af0:	4621      	mov	r1, r4
 8009af2:	612e      	str	r6, [r5, #16]
 8009af4:	f7ff fd92 	bl	800961c <_Bfree>
 8009af8:	4628      	mov	r0, r5
 8009afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009afe:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b02:	3301      	adds	r3, #1
 8009b04:	e7c5      	b.n	8009a92 <__lshift+0x4a>
 8009b06:	3904      	subs	r1, #4
 8009b08:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b0c:	459c      	cmp	ip, r3
 8009b0e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b12:	d8f9      	bhi.n	8009b08 <__lshift+0xc0>
 8009b14:	e7ea      	b.n	8009aec <__lshift+0xa4>
 8009b16:	bf00      	nop
 8009b18:	0800be7b 	.word	0x0800be7b
 8009b1c:	0800be8c 	.word	0x0800be8c

08009b20 <__mcmp>:
 8009b20:	4603      	mov	r3, r0
 8009b22:	690a      	ldr	r2, [r1, #16]
 8009b24:	6900      	ldr	r0, [r0, #16]
 8009b26:	b530      	push	{r4, r5, lr}
 8009b28:	1a80      	subs	r0, r0, r2
 8009b2a:	d10e      	bne.n	8009b4a <__mcmp+0x2a>
 8009b2c:	3314      	adds	r3, #20
 8009b2e:	3114      	adds	r1, #20
 8009b30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009b34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009b38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009b3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009b40:	4295      	cmp	r5, r2
 8009b42:	d003      	beq.n	8009b4c <__mcmp+0x2c>
 8009b44:	d205      	bcs.n	8009b52 <__mcmp+0x32>
 8009b46:	f04f 30ff 	mov.w	r0, #4294967295
 8009b4a:	bd30      	pop	{r4, r5, pc}
 8009b4c:	42a3      	cmp	r3, r4
 8009b4e:	d3f3      	bcc.n	8009b38 <__mcmp+0x18>
 8009b50:	e7fb      	b.n	8009b4a <__mcmp+0x2a>
 8009b52:	2001      	movs	r0, #1
 8009b54:	e7f9      	b.n	8009b4a <__mcmp+0x2a>
	...

08009b58 <__mdiff>:
 8009b58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b5c:	4689      	mov	r9, r1
 8009b5e:	4606      	mov	r6, r0
 8009b60:	4611      	mov	r1, r2
 8009b62:	4648      	mov	r0, r9
 8009b64:	4614      	mov	r4, r2
 8009b66:	f7ff ffdb 	bl	8009b20 <__mcmp>
 8009b6a:	1e05      	subs	r5, r0, #0
 8009b6c:	d112      	bne.n	8009b94 <__mdiff+0x3c>
 8009b6e:	4629      	mov	r1, r5
 8009b70:	4630      	mov	r0, r6
 8009b72:	f7ff fd13 	bl	800959c <_Balloc>
 8009b76:	4602      	mov	r2, r0
 8009b78:	b928      	cbnz	r0, 8009b86 <__mdiff+0x2e>
 8009b7a:	f240 2137 	movw	r1, #567	@ 0x237
 8009b7e:	4b3e      	ldr	r3, [pc, #248]	@ (8009c78 <__mdiff+0x120>)
 8009b80:	483e      	ldr	r0, [pc, #248]	@ (8009c7c <__mdiff+0x124>)
 8009b82:	f001 fc69 	bl	800b458 <__assert_func>
 8009b86:	2301      	movs	r3, #1
 8009b88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b8c:	4610      	mov	r0, r2
 8009b8e:	b003      	add	sp, #12
 8009b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b94:	bfbc      	itt	lt
 8009b96:	464b      	movlt	r3, r9
 8009b98:	46a1      	movlt	r9, r4
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009ba0:	bfba      	itte	lt
 8009ba2:	461c      	movlt	r4, r3
 8009ba4:	2501      	movlt	r5, #1
 8009ba6:	2500      	movge	r5, #0
 8009ba8:	f7ff fcf8 	bl	800959c <_Balloc>
 8009bac:	4602      	mov	r2, r0
 8009bae:	b918      	cbnz	r0, 8009bb8 <__mdiff+0x60>
 8009bb0:	f240 2145 	movw	r1, #581	@ 0x245
 8009bb4:	4b30      	ldr	r3, [pc, #192]	@ (8009c78 <__mdiff+0x120>)
 8009bb6:	e7e3      	b.n	8009b80 <__mdiff+0x28>
 8009bb8:	f100 0b14 	add.w	fp, r0, #20
 8009bbc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009bc0:	f109 0310 	add.w	r3, r9, #16
 8009bc4:	60c5      	str	r5, [r0, #12]
 8009bc6:	f04f 0c00 	mov.w	ip, #0
 8009bca:	f109 0514 	add.w	r5, r9, #20
 8009bce:	46d9      	mov	r9, fp
 8009bd0:	6926      	ldr	r6, [r4, #16]
 8009bd2:	f104 0e14 	add.w	lr, r4, #20
 8009bd6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009bda:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009bde:	9301      	str	r3, [sp, #4]
 8009be0:	9b01      	ldr	r3, [sp, #4]
 8009be2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009be6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009bea:	b281      	uxth	r1, r0
 8009bec:	9301      	str	r3, [sp, #4]
 8009bee:	fa1f f38a 	uxth.w	r3, sl
 8009bf2:	1a5b      	subs	r3, r3, r1
 8009bf4:	0c00      	lsrs	r0, r0, #16
 8009bf6:	4463      	add	r3, ip
 8009bf8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009bfc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009c06:	4576      	cmp	r6, lr
 8009c08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c0c:	f849 3b04 	str.w	r3, [r9], #4
 8009c10:	d8e6      	bhi.n	8009be0 <__mdiff+0x88>
 8009c12:	1b33      	subs	r3, r6, r4
 8009c14:	3b15      	subs	r3, #21
 8009c16:	f023 0303 	bic.w	r3, r3, #3
 8009c1a:	3415      	adds	r4, #21
 8009c1c:	3304      	adds	r3, #4
 8009c1e:	42a6      	cmp	r6, r4
 8009c20:	bf38      	it	cc
 8009c22:	2304      	movcc	r3, #4
 8009c24:	441d      	add	r5, r3
 8009c26:	445b      	add	r3, fp
 8009c28:	461e      	mov	r6, r3
 8009c2a:	462c      	mov	r4, r5
 8009c2c:	4544      	cmp	r4, r8
 8009c2e:	d30e      	bcc.n	8009c4e <__mdiff+0xf6>
 8009c30:	f108 0103 	add.w	r1, r8, #3
 8009c34:	1b49      	subs	r1, r1, r5
 8009c36:	f021 0103 	bic.w	r1, r1, #3
 8009c3a:	3d03      	subs	r5, #3
 8009c3c:	45a8      	cmp	r8, r5
 8009c3e:	bf38      	it	cc
 8009c40:	2100      	movcc	r1, #0
 8009c42:	440b      	add	r3, r1
 8009c44:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c48:	b199      	cbz	r1, 8009c72 <__mdiff+0x11a>
 8009c4a:	6117      	str	r7, [r2, #16]
 8009c4c:	e79e      	b.n	8009b8c <__mdiff+0x34>
 8009c4e:	46e6      	mov	lr, ip
 8009c50:	f854 1b04 	ldr.w	r1, [r4], #4
 8009c54:	fa1f fc81 	uxth.w	ip, r1
 8009c58:	44f4      	add	ip, lr
 8009c5a:	0c08      	lsrs	r0, r1, #16
 8009c5c:	4471      	add	r1, lr
 8009c5e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009c62:	b289      	uxth	r1, r1
 8009c64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009c68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c6c:	f846 1b04 	str.w	r1, [r6], #4
 8009c70:	e7dc      	b.n	8009c2c <__mdiff+0xd4>
 8009c72:	3f01      	subs	r7, #1
 8009c74:	e7e6      	b.n	8009c44 <__mdiff+0xec>
 8009c76:	bf00      	nop
 8009c78:	0800be7b 	.word	0x0800be7b
 8009c7c:	0800be8c 	.word	0x0800be8c

08009c80 <__ulp>:
 8009c80:	4b0e      	ldr	r3, [pc, #56]	@ (8009cbc <__ulp+0x3c>)
 8009c82:	400b      	ands	r3, r1
 8009c84:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	dc08      	bgt.n	8009c9e <__ulp+0x1e>
 8009c8c:	425b      	negs	r3, r3
 8009c8e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009c92:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009c96:	da04      	bge.n	8009ca2 <__ulp+0x22>
 8009c98:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009c9c:	4113      	asrs	r3, r2
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	e008      	b.n	8009cb4 <__ulp+0x34>
 8009ca2:	f1a2 0314 	sub.w	r3, r2, #20
 8009ca6:	2b1e      	cmp	r3, #30
 8009ca8:	bfd6      	itet	le
 8009caa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009cae:	2201      	movgt	r2, #1
 8009cb0:	40da      	lsrle	r2, r3
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	4610      	mov	r0, r2
 8009cb8:	4770      	bx	lr
 8009cba:	bf00      	nop
 8009cbc:	7ff00000 	.word	0x7ff00000

08009cc0 <__b2d>:
 8009cc0:	6902      	ldr	r2, [r0, #16]
 8009cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cc4:	f100 0614 	add.w	r6, r0, #20
 8009cc8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009ccc:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009cd0:	4f1e      	ldr	r7, [pc, #120]	@ (8009d4c <__b2d+0x8c>)
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	f7ff fd54 	bl	8009780 <__hi0bits>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	f1c0 0020 	rsb	r0, r0, #32
 8009cde:	2b0a      	cmp	r3, #10
 8009ce0:	f1a2 0504 	sub.w	r5, r2, #4
 8009ce4:	6008      	str	r0, [r1, #0]
 8009ce6:	dc12      	bgt.n	8009d0e <__b2d+0x4e>
 8009ce8:	42ae      	cmp	r6, r5
 8009cea:	bf2c      	ite	cs
 8009cec:	2200      	movcs	r2, #0
 8009cee:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009cf2:	f1c3 0c0b 	rsb	ip, r3, #11
 8009cf6:	3315      	adds	r3, #21
 8009cf8:	fa24 fe0c 	lsr.w	lr, r4, ip
 8009cfc:	fa04 f303 	lsl.w	r3, r4, r3
 8009d00:	fa22 f20c 	lsr.w	r2, r2, ip
 8009d04:	ea4e 0107 	orr.w	r1, lr, r7
 8009d08:	431a      	orrs	r2, r3
 8009d0a:	4610      	mov	r0, r2
 8009d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d0e:	42ae      	cmp	r6, r5
 8009d10:	bf36      	itet	cc
 8009d12:	f1a2 0508 	subcc.w	r5, r2, #8
 8009d16:	2200      	movcs	r2, #0
 8009d18:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009d1c:	3b0b      	subs	r3, #11
 8009d1e:	d012      	beq.n	8009d46 <__b2d+0x86>
 8009d20:	f1c3 0720 	rsb	r7, r3, #32
 8009d24:	fa22 f107 	lsr.w	r1, r2, r7
 8009d28:	409c      	lsls	r4, r3
 8009d2a:	430c      	orrs	r4, r1
 8009d2c:	42b5      	cmp	r5, r6
 8009d2e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8009d32:	bf94      	ite	ls
 8009d34:	2400      	movls	r4, #0
 8009d36:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8009d3a:	409a      	lsls	r2, r3
 8009d3c:	40fc      	lsrs	r4, r7
 8009d3e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009d42:	4322      	orrs	r2, r4
 8009d44:	e7e1      	b.n	8009d0a <__b2d+0x4a>
 8009d46:	ea44 0107 	orr.w	r1, r4, r7
 8009d4a:	e7de      	b.n	8009d0a <__b2d+0x4a>
 8009d4c:	3ff00000 	.word	0x3ff00000

08009d50 <__d2b>:
 8009d50:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009d54:	2101      	movs	r1, #1
 8009d56:	4690      	mov	r8, r2
 8009d58:	4699      	mov	r9, r3
 8009d5a:	9e08      	ldr	r6, [sp, #32]
 8009d5c:	f7ff fc1e 	bl	800959c <_Balloc>
 8009d60:	4604      	mov	r4, r0
 8009d62:	b930      	cbnz	r0, 8009d72 <__d2b+0x22>
 8009d64:	4602      	mov	r2, r0
 8009d66:	f240 310f 	movw	r1, #783	@ 0x30f
 8009d6a:	4b23      	ldr	r3, [pc, #140]	@ (8009df8 <__d2b+0xa8>)
 8009d6c:	4823      	ldr	r0, [pc, #140]	@ (8009dfc <__d2b+0xac>)
 8009d6e:	f001 fb73 	bl	800b458 <__assert_func>
 8009d72:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009d76:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d7a:	b10d      	cbz	r5, 8009d80 <__d2b+0x30>
 8009d7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d80:	9301      	str	r3, [sp, #4]
 8009d82:	f1b8 0300 	subs.w	r3, r8, #0
 8009d86:	d024      	beq.n	8009dd2 <__d2b+0x82>
 8009d88:	4668      	mov	r0, sp
 8009d8a:	9300      	str	r3, [sp, #0]
 8009d8c:	f7ff fd17 	bl	80097be <__lo0bits>
 8009d90:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009d94:	b1d8      	cbz	r0, 8009dce <__d2b+0x7e>
 8009d96:	f1c0 0320 	rsb	r3, r0, #32
 8009d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d9e:	430b      	orrs	r3, r1
 8009da0:	40c2      	lsrs	r2, r0
 8009da2:	6163      	str	r3, [r4, #20]
 8009da4:	9201      	str	r2, [sp, #4]
 8009da6:	9b01      	ldr	r3, [sp, #4]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	bf0c      	ite	eq
 8009dac:	2201      	moveq	r2, #1
 8009dae:	2202      	movne	r2, #2
 8009db0:	61a3      	str	r3, [r4, #24]
 8009db2:	6122      	str	r2, [r4, #16]
 8009db4:	b1ad      	cbz	r5, 8009de2 <__d2b+0x92>
 8009db6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009dba:	4405      	add	r5, r0
 8009dbc:	6035      	str	r5, [r6, #0]
 8009dbe:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009dc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dc4:	6018      	str	r0, [r3, #0]
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	b002      	add	sp, #8
 8009dca:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009dce:	6161      	str	r1, [r4, #20]
 8009dd0:	e7e9      	b.n	8009da6 <__d2b+0x56>
 8009dd2:	a801      	add	r0, sp, #4
 8009dd4:	f7ff fcf3 	bl	80097be <__lo0bits>
 8009dd8:	9b01      	ldr	r3, [sp, #4]
 8009dda:	2201      	movs	r2, #1
 8009ddc:	6163      	str	r3, [r4, #20]
 8009dde:	3020      	adds	r0, #32
 8009de0:	e7e7      	b.n	8009db2 <__d2b+0x62>
 8009de2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009de6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009dea:	6030      	str	r0, [r6, #0]
 8009dec:	6918      	ldr	r0, [r3, #16]
 8009dee:	f7ff fcc7 	bl	8009780 <__hi0bits>
 8009df2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009df6:	e7e4      	b.n	8009dc2 <__d2b+0x72>
 8009df8:	0800be7b 	.word	0x0800be7b
 8009dfc:	0800be8c 	.word	0x0800be8c

08009e00 <__ratio>:
 8009e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e04:	b085      	sub	sp, #20
 8009e06:	e9cd 1000 	strd	r1, r0, [sp]
 8009e0a:	a902      	add	r1, sp, #8
 8009e0c:	f7ff ff58 	bl	8009cc0 <__b2d>
 8009e10:	468b      	mov	fp, r1
 8009e12:	4606      	mov	r6, r0
 8009e14:	460f      	mov	r7, r1
 8009e16:	9800      	ldr	r0, [sp, #0]
 8009e18:	a903      	add	r1, sp, #12
 8009e1a:	f7ff ff51 	bl	8009cc0 <__b2d>
 8009e1e:	460d      	mov	r5, r1
 8009e20:	9b01      	ldr	r3, [sp, #4]
 8009e22:	4689      	mov	r9, r1
 8009e24:	6919      	ldr	r1, [r3, #16]
 8009e26:	9b00      	ldr	r3, [sp, #0]
 8009e28:	4604      	mov	r4, r0
 8009e2a:	691b      	ldr	r3, [r3, #16]
 8009e2c:	4630      	mov	r0, r6
 8009e2e:	1ac9      	subs	r1, r1, r3
 8009e30:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009e34:	1a9b      	subs	r3, r3, r2
 8009e36:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	bfcd      	iteet	gt
 8009e3e:	463a      	movgt	r2, r7
 8009e40:	462a      	movle	r2, r5
 8009e42:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009e46:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009e4a:	bfd8      	it	le
 8009e4c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009e50:	464b      	mov	r3, r9
 8009e52:	4622      	mov	r2, r4
 8009e54:	4659      	mov	r1, fp
 8009e56:	f7f6 fc73 	bl	8000740 <__aeabi_ddiv>
 8009e5a:	b005      	add	sp, #20
 8009e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e60 <__copybits>:
 8009e60:	3901      	subs	r1, #1
 8009e62:	b570      	push	{r4, r5, r6, lr}
 8009e64:	1149      	asrs	r1, r1, #5
 8009e66:	6914      	ldr	r4, [r2, #16]
 8009e68:	3101      	adds	r1, #1
 8009e6a:	f102 0314 	add.w	r3, r2, #20
 8009e6e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009e72:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009e76:	1f05      	subs	r5, r0, #4
 8009e78:	42a3      	cmp	r3, r4
 8009e7a:	d30c      	bcc.n	8009e96 <__copybits+0x36>
 8009e7c:	1aa3      	subs	r3, r4, r2
 8009e7e:	3b11      	subs	r3, #17
 8009e80:	f023 0303 	bic.w	r3, r3, #3
 8009e84:	3211      	adds	r2, #17
 8009e86:	42a2      	cmp	r2, r4
 8009e88:	bf88      	it	hi
 8009e8a:	2300      	movhi	r3, #0
 8009e8c:	4418      	add	r0, r3
 8009e8e:	2300      	movs	r3, #0
 8009e90:	4288      	cmp	r0, r1
 8009e92:	d305      	bcc.n	8009ea0 <__copybits+0x40>
 8009e94:	bd70      	pop	{r4, r5, r6, pc}
 8009e96:	f853 6b04 	ldr.w	r6, [r3], #4
 8009e9a:	f845 6f04 	str.w	r6, [r5, #4]!
 8009e9e:	e7eb      	b.n	8009e78 <__copybits+0x18>
 8009ea0:	f840 3b04 	str.w	r3, [r0], #4
 8009ea4:	e7f4      	b.n	8009e90 <__copybits+0x30>

08009ea6 <__any_on>:
 8009ea6:	f100 0214 	add.w	r2, r0, #20
 8009eaa:	6900      	ldr	r0, [r0, #16]
 8009eac:	114b      	asrs	r3, r1, #5
 8009eae:	4298      	cmp	r0, r3
 8009eb0:	b510      	push	{r4, lr}
 8009eb2:	db11      	blt.n	8009ed8 <__any_on+0x32>
 8009eb4:	dd0a      	ble.n	8009ecc <__any_on+0x26>
 8009eb6:	f011 011f 	ands.w	r1, r1, #31
 8009eba:	d007      	beq.n	8009ecc <__any_on+0x26>
 8009ebc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009ec0:	fa24 f001 	lsr.w	r0, r4, r1
 8009ec4:	fa00 f101 	lsl.w	r1, r0, r1
 8009ec8:	428c      	cmp	r4, r1
 8009eca:	d10b      	bne.n	8009ee4 <__any_on+0x3e>
 8009ecc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d803      	bhi.n	8009edc <__any_on+0x36>
 8009ed4:	2000      	movs	r0, #0
 8009ed6:	bd10      	pop	{r4, pc}
 8009ed8:	4603      	mov	r3, r0
 8009eda:	e7f7      	b.n	8009ecc <__any_on+0x26>
 8009edc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009ee0:	2900      	cmp	r1, #0
 8009ee2:	d0f5      	beq.n	8009ed0 <__any_on+0x2a>
 8009ee4:	2001      	movs	r0, #1
 8009ee6:	e7f6      	b.n	8009ed6 <__any_on+0x30>

08009ee8 <sulp>:
 8009ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eec:	460f      	mov	r7, r1
 8009eee:	4690      	mov	r8, r2
 8009ef0:	f7ff fec6 	bl	8009c80 <__ulp>
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	460d      	mov	r5, r1
 8009ef8:	f1b8 0f00 	cmp.w	r8, #0
 8009efc:	d011      	beq.n	8009f22 <sulp+0x3a>
 8009efe:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009f02:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	dd0b      	ble.n	8009f22 <sulp+0x3a>
 8009f0a:	2400      	movs	r4, #0
 8009f0c:	051b      	lsls	r3, r3, #20
 8009f0e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009f12:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009f16:	4622      	mov	r2, r4
 8009f18:	462b      	mov	r3, r5
 8009f1a:	f7f6 fae7 	bl	80004ec <__aeabi_dmul>
 8009f1e:	4604      	mov	r4, r0
 8009f20:	460d      	mov	r5, r1
 8009f22:	4620      	mov	r0, r4
 8009f24:	4629      	mov	r1, r5
 8009f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f2a:	0000      	movs	r0, r0
 8009f2c:	0000      	movs	r0, r0
	...

08009f30 <_strtod_l>:
 8009f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f34:	b09f      	sub	sp, #124	@ 0x7c
 8009f36:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009f38:	2200      	movs	r2, #0
 8009f3a:	460c      	mov	r4, r1
 8009f3c:	921a      	str	r2, [sp, #104]	@ 0x68
 8009f3e:	f04f 0a00 	mov.w	sl, #0
 8009f42:	f04f 0b00 	mov.w	fp, #0
 8009f46:	460a      	mov	r2, r1
 8009f48:	9005      	str	r0, [sp, #20]
 8009f4a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f4c:	7811      	ldrb	r1, [r2, #0]
 8009f4e:	292b      	cmp	r1, #43	@ 0x2b
 8009f50:	d048      	beq.n	8009fe4 <_strtod_l+0xb4>
 8009f52:	d836      	bhi.n	8009fc2 <_strtod_l+0x92>
 8009f54:	290d      	cmp	r1, #13
 8009f56:	d830      	bhi.n	8009fba <_strtod_l+0x8a>
 8009f58:	2908      	cmp	r1, #8
 8009f5a:	d830      	bhi.n	8009fbe <_strtod_l+0x8e>
 8009f5c:	2900      	cmp	r1, #0
 8009f5e:	d039      	beq.n	8009fd4 <_strtod_l+0xa4>
 8009f60:	2200      	movs	r2, #0
 8009f62:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009f64:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009f66:	782a      	ldrb	r2, [r5, #0]
 8009f68:	2a30      	cmp	r2, #48	@ 0x30
 8009f6a:	f040 80b1 	bne.w	800a0d0 <_strtod_l+0x1a0>
 8009f6e:	786a      	ldrb	r2, [r5, #1]
 8009f70:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009f74:	2a58      	cmp	r2, #88	@ 0x58
 8009f76:	d16c      	bne.n	800a052 <_strtod_l+0x122>
 8009f78:	9302      	str	r3, [sp, #8]
 8009f7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f7c:	4a8e      	ldr	r2, [pc, #568]	@ (800a1b8 <_strtod_l+0x288>)
 8009f7e:	9301      	str	r3, [sp, #4]
 8009f80:	ab1a      	add	r3, sp, #104	@ 0x68
 8009f82:	9300      	str	r3, [sp, #0]
 8009f84:	9805      	ldr	r0, [sp, #20]
 8009f86:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009f88:	a919      	add	r1, sp, #100	@ 0x64
 8009f8a:	f001 faff 	bl	800b58c <__gethex>
 8009f8e:	f010 060f 	ands.w	r6, r0, #15
 8009f92:	4604      	mov	r4, r0
 8009f94:	d005      	beq.n	8009fa2 <_strtod_l+0x72>
 8009f96:	2e06      	cmp	r6, #6
 8009f98:	d126      	bne.n	8009fe8 <_strtod_l+0xb8>
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	3501      	adds	r5, #1
 8009f9e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009fa0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fa2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f040 8584 	bne.w	800aab2 <_strtod_l+0xb82>
 8009faa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fac:	b1bb      	cbz	r3, 8009fde <_strtod_l+0xae>
 8009fae:	4650      	mov	r0, sl
 8009fb0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8009fb4:	b01f      	add	sp, #124	@ 0x7c
 8009fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fba:	2920      	cmp	r1, #32
 8009fbc:	d1d0      	bne.n	8009f60 <_strtod_l+0x30>
 8009fbe:	3201      	adds	r2, #1
 8009fc0:	e7c3      	b.n	8009f4a <_strtod_l+0x1a>
 8009fc2:	292d      	cmp	r1, #45	@ 0x2d
 8009fc4:	d1cc      	bne.n	8009f60 <_strtod_l+0x30>
 8009fc6:	2101      	movs	r1, #1
 8009fc8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009fca:	1c51      	adds	r1, r2, #1
 8009fcc:	9119      	str	r1, [sp, #100]	@ 0x64
 8009fce:	7852      	ldrb	r2, [r2, #1]
 8009fd0:	2a00      	cmp	r2, #0
 8009fd2:	d1c7      	bne.n	8009f64 <_strtod_l+0x34>
 8009fd4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009fd6:	9419      	str	r4, [sp, #100]	@ 0x64
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f040 8568 	bne.w	800aaae <_strtod_l+0xb7e>
 8009fde:	4650      	mov	r0, sl
 8009fe0:	4659      	mov	r1, fp
 8009fe2:	e7e7      	b.n	8009fb4 <_strtod_l+0x84>
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	e7ef      	b.n	8009fc8 <_strtod_l+0x98>
 8009fe8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009fea:	b13a      	cbz	r2, 8009ffc <_strtod_l+0xcc>
 8009fec:	2135      	movs	r1, #53	@ 0x35
 8009fee:	a81c      	add	r0, sp, #112	@ 0x70
 8009ff0:	f7ff ff36 	bl	8009e60 <__copybits>
 8009ff4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ff6:	9805      	ldr	r0, [sp, #20]
 8009ff8:	f7ff fb10 	bl	800961c <_Bfree>
 8009ffc:	3e01      	subs	r6, #1
 8009ffe:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a000:	2e04      	cmp	r6, #4
 800a002:	d806      	bhi.n	800a012 <_strtod_l+0xe2>
 800a004:	e8df f006 	tbb	[pc, r6]
 800a008:	201d0314 	.word	0x201d0314
 800a00c:	14          	.byte	0x14
 800a00d:	00          	.byte	0x00
 800a00e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a012:	05e1      	lsls	r1, r4, #23
 800a014:	bf48      	it	mi
 800a016:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a01a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a01e:	0d1b      	lsrs	r3, r3, #20
 800a020:	051b      	lsls	r3, r3, #20
 800a022:	2b00      	cmp	r3, #0
 800a024:	d1bd      	bne.n	8009fa2 <_strtod_l+0x72>
 800a026:	f7fe fb15 	bl	8008654 <__errno>
 800a02a:	2322      	movs	r3, #34	@ 0x22
 800a02c:	6003      	str	r3, [r0, #0]
 800a02e:	e7b8      	b.n	8009fa2 <_strtod_l+0x72>
 800a030:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a034:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a038:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a03c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a040:	e7e7      	b.n	800a012 <_strtod_l+0xe2>
 800a042:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800a1bc <_strtod_l+0x28c>
 800a046:	e7e4      	b.n	800a012 <_strtod_l+0xe2>
 800a048:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a04c:	f04f 3aff 	mov.w	sl, #4294967295
 800a050:	e7df      	b.n	800a012 <_strtod_l+0xe2>
 800a052:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a054:	1c5a      	adds	r2, r3, #1
 800a056:	9219      	str	r2, [sp, #100]	@ 0x64
 800a058:	785b      	ldrb	r3, [r3, #1]
 800a05a:	2b30      	cmp	r3, #48	@ 0x30
 800a05c:	d0f9      	beq.n	800a052 <_strtod_l+0x122>
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d09f      	beq.n	8009fa2 <_strtod_l+0x72>
 800a062:	2301      	movs	r3, #1
 800a064:	9309      	str	r3, [sp, #36]	@ 0x24
 800a066:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a068:	220a      	movs	r2, #10
 800a06a:	930c      	str	r3, [sp, #48]	@ 0x30
 800a06c:	2300      	movs	r3, #0
 800a06e:	461f      	mov	r7, r3
 800a070:	9308      	str	r3, [sp, #32]
 800a072:	930a      	str	r3, [sp, #40]	@ 0x28
 800a074:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a076:	7805      	ldrb	r5, [r0, #0]
 800a078:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a07c:	b2d9      	uxtb	r1, r3
 800a07e:	2909      	cmp	r1, #9
 800a080:	d928      	bls.n	800a0d4 <_strtod_l+0x1a4>
 800a082:	2201      	movs	r2, #1
 800a084:	494e      	ldr	r1, [pc, #312]	@ (800a1c0 <_strtod_l+0x290>)
 800a086:	f001 f99c 	bl	800b3c2 <strncmp>
 800a08a:	2800      	cmp	r0, #0
 800a08c:	d032      	beq.n	800a0f4 <_strtod_l+0x1c4>
 800a08e:	2000      	movs	r0, #0
 800a090:	462a      	mov	r2, r5
 800a092:	4681      	mov	r9, r0
 800a094:	463d      	mov	r5, r7
 800a096:	4603      	mov	r3, r0
 800a098:	2a65      	cmp	r2, #101	@ 0x65
 800a09a:	d001      	beq.n	800a0a0 <_strtod_l+0x170>
 800a09c:	2a45      	cmp	r2, #69	@ 0x45
 800a09e:	d114      	bne.n	800a0ca <_strtod_l+0x19a>
 800a0a0:	b91d      	cbnz	r5, 800a0aa <_strtod_l+0x17a>
 800a0a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0a4:	4302      	orrs	r2, r0
 800a0a6:	d095      	beq.n	8009fd4 <_strtod_l+0xa4>
 800a0a8:	2500      	movs	r5, #0
 800a0aa:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a0ac:	1c62      	adds	r2, r4, #1
 800a0ae:	9219      	str	r2, [sp, #100]	@ 0x64
 800a0b0:	7862      	ldrb	r2, [r4, #1]
 800a0b2:	2a2b      	cmp	r2, #43	@ 0x2b
 800a0b4:	d077      	beq.n	800a1a6 <_strtod_l+0x276>
 800a0b6:	2a2d      	cmp	r2, #45	@ 0x2d
 800a0b8:	d07b      	beq.n	800a1b2 <_strtod_l+0x282>
 800a0ba:	f04f 0c00 	mov.w	ip, #0
 800a0be:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a0c2:	2909      	cmp	r1, #9
 800a0c4:	f240 8082 	bls.w	800a1cc <_strtod_l+0x29c>
 800a0c8:	9419      	str	r4, [sp, #100]	@ 0x64
 800a0ca:	f04f 0800 	mov.w	r8, #0
 800a0ce:	e0a2      	b.n	800a216 <_strtod_l+0x2e6>
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	e7c7      	b.n	800a064 <_strtod_l+0x134>
 800a0d4:	2f08      	cmp	r7, #8
 800a0d6:	bfd5      	itete	le
 800a0d8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a0da:	9908      	ldrgt	r1, [sp, #32]
 800a0dc:	fb02 3301 	mlale	r3, r2, r1, r3
 800a0e0:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a0e4:	f100 0001 	add.w	r0, r0, #1
 800a0e8:	bfd4      	ite	le
 800a0ea:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a0ec:	9308      	strgt	r3, [sp, #32]
 800a0ee:	3701      	adds	r7, #1
 800a0f0:	9019      	str	r0, [sp, #100]	@ 0x64
 800a0f2:	e7bf      	b.n	800a074 <_strtod_l+0x144>
 800a0f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0f6:	1c5a      	adds	r2, r3, #1
 800a0f8:	9219      	str	r2, [sp, #100]	@ 0x64
 800a0fa:	785a      	ldrb	r2, [r3, #1]
 800a0fc:	b37f      	cbz	r7, 800a15e <_strtod_l+0x22e>
 800a0fe:	4681      	mov	r9, r0
 800a100:	463d      	mov	r5, r7
 800a102:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a106:	2b09      	cmp	r3, #9
 800a108:	d912      	bls.n	800a130 <_strtod_l+0x200>
 800a10a:	2301      	movs	r3, #1
 800a10c:	e7c4      	b.n	800a098 <_strtod_l+0x168>
 800a10e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a110:	3001      	adds	r0, #1
 800a112:	1c5a      	adds	r2, r3, #1
 800a114:	9219      	str	r2, [sp, #100]	@ 0x64
 800a116:	785a      	ldrb	r2, [r3, #1]
 800a118:	2a30      	cmp	r2, #48	@ 0x30
 800a11a:	d0f8      	beq.n	800a10e <_strtod_l+0x1de>
 800a11c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a120:	2b08      	cmp	r3, #8
 800a122:	f200 84cb 	bhi.w	800aabc <_strtod_l+0xb8c>
 800a126:	4681      	mov	r9, r0
 800a128:	2000      	movs	r0, #0
 800a12a:	4605      	mov	r5, r0
 800a12c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a12e:	930c      	str	r3, [sp, #48]	@ 0x30
 800a130:	3a30      	subs	r2, #48	@ 0x30
 800a132:	f100 0301 	add.w	r3, r0, #1
 800a136:	d02a      	beq.n	800a18e <_strtod_l+0x25e>
 800a138:	4499      	add	r9, r3
 800a13a:	210a      	movs	r1, #10
 800a13c:	462b      	mov	r3, r5
 800a13e:	eb00 0c05 	add.w	ip, r0, r5
 800a142:	4563      	cmp	r3, ip
 800a144:	d10d      	bne.n	800a162 <_strtod_l+0x232>
 800a146:	1c69      	adds	r1, r5, #1
 800a148:	4401      	add	r1, r0
 800a14a:	4428      	add	r0, r5
 800a14c:	2808      	cmp	r0, #8
 800a14e:	dc16      	bgt.n	800a17e <_strtod_l+0x24e>
 800a150:	230a      	movs	r3, #10
 800a152:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a154:	fb03 2300 	mla	r3, r3, r0, r2
 800a158:	930a      	str	r3, [sp, #40]	@ 0x28
 800a15a:	2300      	movs	r3, #0
 800a15c:	e018      	b.n	800a190 <_strtod_l+0x260>
 800a15e:	4638      	mov	r0, r7
 800a160:	e7da      	b.n	800a118 <_strtod_l+0x1e8>
 800a162:	2b08      	cmp	r3, #8
 800a164:	f103 0301 	add.w	r3, r3, #1
 800a168:	dc03      	bgt.n	800a172 <_strtod_l+0x242>
 800a16a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a16c:	434e      	muls	r6, r1
 800a16e:	960a      	str	r6, [sp, #40]	@ 0x28
 800a170:	e7e7      	b.n	800a142 <_strtod_l+0x212>
 800a172:	2b10      	cmp	r3, #16
 800a174:	bfde      	ittt	le
 800a176:	9e08      	ldrle	r6, [sp, #32]
 800a178:	434e      	mulle	r6, r1
 800a17a:	9608      	strle	r6, [sp, #32]
 800a17c:	e7e1      	b.n	800a142 <_strtod_l+0x212>
 800a17e:	280f      	cmp	r0, #15
 800a180:	dceb      	bgt.n	800a15a <_strtod_l+0x22a>
 800a182:	230a      	movs	r3, #10
 800a184:	9808      	ldr	r0, [sp, #32]
 800a186:	fb03 2300 	mla	r3, r3, r0, r2
 800a18a:	9308      	str	r3, [sp, #32]
 800a18c:	e7e5      	b.n	800a15a <_strtod_l+0x22a>
 800a18e:	4629      	mov	r1, r5
 800a190:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a192:	460d      	mov	r5, r1
 800a194:	1c50      	adds	r0, r2, #1
 800a196:	9019      	str	r0, [sp, #100]	@ 0x64
 800a198:	7852      	ldrb	r2, [r2, #1]
 800a19a:	4618      	mov	r0, r3
 800a19c:	e7b1      	b.n	800a102 <_strtod_l+0x1d2>
 800a19e:	f04f 0900 	mov.w	r9, #0
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e77d      	b.n	800a0a2 <_strtod_l+0x172>
 800a1a6:	f04f 0c00 	mov.w	ip, #0
 800a1aa:	1ca2      	adds	r2, r4, #2
 800a1ac:	9219      	str	r2, [sp, #100]	@ 0x64
 800a1ae:	78a2      	ldrb	r2, [r4, #2]
 800a1b0:	e785      	b.n	800a0be <_strtod_l+0x18e>
 800a1b2:	f04f 0c01 	mov.w	ip, #1
 800a1b6:	e7f8      	b.n	800a1aa <_strtod_l+0x27a>
 800a1b8:	0800c000 	.word	0x0800c000
 800a1bc:	7ff00000 	.word	0x7ff00000
 800a1c0:	0800bfe8 	.word	0x0800bfe8
 800a1c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a1c6:	1c51      	adds	r1, r2, #1
 800a1c8:	9119      	str	r1, [sp, #100]	@ 0x64
 800a1ca:	7852      	ldrb	r2, [r2, #1]
 800a1cc:	2a30      	cmp	r2, #48	@ 0x30
 800a1ce:	d0f9      	beq.n	800a1c4 <_strtod_l+0x294>
 800a1d0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a1d4:	2908      	cmp	r1, #8
 800a1d6:	f63f af78 	bhi.w	800a0ca <_strtod_l+0x19a>
 800a1da:	f04f 080a 	mov.w	r8, #10
 800a1de:	3a30      	subs	r2, #48	@ 0x30
 800a1e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a1e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a1e4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a1e6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a1e8:	1c56      	adds	r6, r2, #1
 800a1ea:	9619      	str	r6, [sp, #100]	@ 0x64
 800a1ec:	7852      	ldrb	r2, [r2, #1]
 800a1ee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a1f2:	f1be 0f09 	cmp.w	lr, #9
 800a1f6:	d939      	bls.n	800a26c <_strtod_l+0x33c>
 800a1f8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a1fa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a1fe:	1a76      	subs	r6, r6, r1
 800a200:	2e08      	cmp	r6, #8
 800a202:	dc03      	bgt.n	800a20c <_strtod_l+0x2dc>
 800a204:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a206:	4588      	cmp	r8, r1
 800a208:	bfa8      	it	ge
 800a20a:	4688      	movge	r8, r1
 800a20c:	f1bc 0f00 	cmp.w	ip, #0
 800a210:	d001      	beq.n	800a216 <_strtod_l+0x2e6>
 800a212:	f1c8 0800 	rsb	r8, r8, #0
 800a216:	2d00      	cmp	r5, #0
 800a218:	d14e      	bne.n	800a2b8 <_strtod_l+0x388>
 800a21a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a21c:	4308      	orrs	r0, r1
 800a21e:	f47f aec0 	bne.w	8009fa2 <_strtod_l+0x72>
 800a222:	2b00      	cmp	r3, #0
 800a224:	f47f aed6 	bne.w	8009fd4 <_strtod_l+0xa4>
 800a228:	2a69      	cmp	r2, #105	@ 0x69
 800a22a:	d028      	beq.n	800a27e <_strtod_l+0x34e>
 800a22c:	dc25      	bgt.n	800a27a <_strtod_l+0x34a>
 800a22e:	2a49      	cmp	r2, #73	@ 0x49
 800a230:	d025      	beq.n	800a27e <_strtod_l+0x34e>
 800a232:	2a4e      	cmp	r2, #78	@ 0x4e
 800a234:	f47f aece 	bne.w	8009fd4 <_strtod_l+0xa4>
 800a238:	499a      	ldr	r1, [pc, #616]	@ (800a4a4 <_strtod_l+0x574>)
 800a23a:	a819      	add	r0, sp, #100	@ 0x64
 800a23c:	f001 fbc8 	bl	800b9d0 <__match>
 800a240:	2800      	cmp	r0, #0
 800a242:	f43f aec7 	beq.w	8009fd4 <_strtod_l+0xa4>
 800a246:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	2b28      	cmp	r3, #40	@ 0x28
 800a24c:	d12e      	bne.n	800a2ac <_strtod_l+0x37c>
 800a24e:	4996      	ldr	r1, [pc, #600]	@ (800a4a8 <_strtod_l+0x578>)
 800a250:	aa1c      	add	r2, sp, #112	@ 0x70
 800a252:	a819      	add	r0, sp, #100	@ 0x64
 800a254:	f001 fbd0 	bl	800b9f8 <__hexnan>
 800a258:	2805      	cmp	r0, #5
 800a25a:	d127      	bne.n	800a2ac <_strtod_l+0x37c>
 800a25c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a25e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a262:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a266:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a26a:	e69a      	b.n	8009fa2 <_strtod_l+0x72>
 800a26c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a26e:	fb08 2101 	mla	r1, r8, r1, r2
 800a272:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a276:	920e      	str	r2, [sp, #56]	@ 0x38
 800a278:	e7b5      	b.n	800a1e6 <_strtod_l+0x2b6>
 800a27a:	2a6e      	cmp	r2, #110	@ 0x6e
 800a27c:	e7da      	b.n	800a234 <_strtod_l+0x304>
 800a27e:	498b      	ldr	r1, [pc, #556]	@ (800a4ac <_strtod_l+0x57c>)
 800a280:	a819      	add	r0, sp, #100	@ 0x64
 800a282:	f001 fba5 	bl	800b9d0 <__match>
 800a286:	2800      	cmp	r0, #0
 800a288:	f43f aea4 	beq.w	8009fd4 <_strtod_l+0xa4>
 800a28c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a28e:	4988      	ldr	r1, [pc, #544]	@ (800a4b0 <_strtod_l+0x580>)
 800a290:	3b01      	subs	r3, #1
 800a292:	a819      	add	r0, sp, #100	@ 0x64
 800a294:	9319      	str	r3, [sp, #100]	@ 0x64
 800a296:	f001 fb9b 	bl	800b9d0 <__match>
 800a29a:	b910      	cbnz	r0, 800a2a2 <_strtod_l+0x372>
 800a29c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a29e:	3301      	adds	r3, #1
 800a2a0:	9319      	str	r3, [sp, #100]	@ 0x64
 800a2a2:	f04f 0a00 	mov.w	sl, #0
 800a2a6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800a4b4 <_strtod_l+0x584>
 800a2aa:	e67a      	b.n	8009fa2 <_strtod_l+0x72>
 800a2ac:	4882      	ldr	r0, [pc, #520]	@ (800a4b8 <_strtod_l+0x588>)
 800a2ae:	f001 f8cd 	bl	800b44c <nan>
 800a2b2:	4682      	mov	sl, r0
 800a2b4:	468b      	mov	fp, r1
 800a2b6:	e674      	b.n	8009fa2 <_strtod_l+0x72>
 800a2b8:	eba8 0309 	sub.w	r3, r8, r9
 800a2bc:	2f00      	cmp	r7, #0
 800a2be:	bf08      	it	eq
 800a2c0:	462f      	moveq	r7, r5
 800a2c2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a2c4:	2d10      	cmp	r5, #16
 800a2c6:	462c      	mov	r4, r5
 800a2c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2ca:	bfa8      	it	ge
 800a2cc:	2410      	movge	r4, #16
 800a2ce:	f7f6 f893 	bl	80003f8 <__aeabi_ui2d>
 800a2d2:	2d09      	cmp	r5, #9
 800a2d4:	4682      	mov	sl, r0
 800a2d6:	468b      	mov	fp, r1
 800a2d8:	dc11      	bgt.n	800a2fe <_strtod_l+0x3ce>
 800a2da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	f43f ae60 	beq.w	8009fa2 <_strtod_l+0x72>
 800a2e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2e4:	dd76      	ble.n	800a3d4 <_strtod_l+0x4a4>
 800a2e6:	2b16      	cmp	r3, #22
 800a2e8:	dc5d      	bgt.n	800a3a6 <_strtod_l+0x476>
 800a2ea:	4974      	ldr	r1, [pc, #464]	@ (800a4bc <_strtod_l+0x58c>)
 800a2ec:	4652      	mov	r2, sl
 800a2ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a2f2:	465b      	mov	r3, fp
 800a2f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2f8:	f7f6 f8f8 	bl	80004ec <__aeabi_dmul>
 800a2fc:	e7d9      	b.n	800a2b2 <_strtod_l+0x382>
 800a2fe:	4b6f      	ldr	r3, [pc, #444]	@ (800a4bc <_strtod_l+0x58c>)
 800a300:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a304:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a308:	f7f6 f8f0 	bl	80004ec <__aeabi_dmul>
 800a30c:	4682      	mov	sl, r0
 800a30e:	9808      	ldr	r0, [sp, #32]
 800a310:	468b      	mov	fp, r1
 800a312:	f7f6 f871 	bl	80003f8 <__aeabi_ui2d>
 800a316:	4602      	mov	r2, r0
 800a318:	460b      	mov	r3, r1
 800a31a:	4650      	mov	r0, sl
 800a31c:	4659      	mov	r1, fp
 800a31e:	f7f5 ff2f 	bl	8000180 <__adddf3>
 800a322:	2d0f      	cmp	r5, #15
 800a324:	4682      	mov	sl, r0
 800a326:	468b      	mov	fp, r1
 800a328:	ddd7      	ble.n	800a2da <_strtod_l+0x3aa>
 800a32a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a32c:	1b2c      	subs	r4, r5, r4
 800a32e:	441c      	add	r4, r3
 800a330:	2c00      	cmp	r4, #0
 800a332:	f340 8096 	ble.w	800a462 <_strtod_l+0x532>
 800a336:	f014 030f 	ands.w	r3, r4, #15
 800a33a:	d00a      	beq.n	800a352 <_strtod_l+0x422>
 800a33c:	495f      	ldr	r1, [pc, #380]	@ (800a4bc <_strtod_l+0x58c>)
 800a33e:	4652      	mov	r2, sl
 800a340:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a344:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a348:	465b      	mov	r3, fp
 800a34a:	f7f6 f8cf 	bl	80004ec <__aeabi_dmul>
 800a34e:	4682      	mov	sl, r0
 800a350:	468b      	mov	fp, r1
 800a352:	f034 040f 	bics.w	r4, r4, #15
 800a356:	d073      	beq.n	800a440 <_strtod_l+0x510>
 800a358:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a35c:	dd48      	ble.n	800a3f0 <_strtod_l+0x4c0>
 800a35e:	2400      	movs	r4, #0
 800a360:	46a0      	mov	r8, r4
 800a362:	46a1      	mov	r9, r4
 800a364:	940a      	str	r4, [sp, #40]	@ 0x28
 800a366:	2322      	movs	r3, #34	@ 0x22
 800a368:	f04f 0a00 	mov.w	sl, #0
 800a36c:	9a05      	ldr	r2, [sp, #20]
 800a36e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800a4b4 <_strtod_l+0x584>
 800a372:	6013      	str	r3, [r2, #0]
 800a374:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a376:	2b00      	cmp	r3, #0
 800a378:	f43f ae13 	beq.w	8009fa2 <_strtod_l+0x72>
 800a37c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a37e:	9805      	ldr	r0, [sp, #20]
 800a380:	f7ff f94c 	bl	800961c <_Bfree>
 800a384:	4649      	mov	r1, r9
 800a386:	9805      	ldr	r0, [sp, #20]
 800a388:	f7ff f948 	bl	800961c <_Bfree>
 800a38c:	4641      	mov	r1, r8
 800a38e:	9805      	ldr	r0, [sp, #20]
 800a390:	f7ff f944 	bl	800961c <_Bfree>
 800a394:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a396:	9805      	ldr	r0, [sp, #20]
 800a398:	f7ff f940 	bl	800961c <_Bfree>
 800a39c:	4621      	mov	r1, r4
 800a39e:	9805      	ldr	r0, [sp, #20]
 800a3a0:	f7ff f93c 	bl	800961c <_Bfree>
 800a3a4:	e5fd      	b.n	8009fa2 <_strtod_l+0x72>
 800a3a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	dbbc      	blt.n	800a32a <_strtod_l+0x3fa>
 800a3b0:	4c42      	ldr	r4, [pc, #264]	@ (800a4bc <_strtod_l+0x58c>)
 800a3b2:	f1c5 050f 	rsb	r5, r5, #15
 800a3b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a3ba:	4652      	mov	r2, sl
 800a3bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3c0:	465b      	mov	r3, fp
 800a3c2:	f7f6 f893 	bl	80004ec <__aeabi_dmul>
 800a3c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3c8:	1b5d      	subs	r5, r3, r5
 800a3ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a3ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a3d2:	e791      	b.n	800a2f8 <_strtod_l+0x3c8>
 800a3d4:	3316      	adds	r3, #22
 800a3d6:	dba8      	blt.n	800a32a <_strtod_l+0x3fa>
 800a3d8:	4b38      	ldr	r3, [pc, #224]	@ (800a4bc <_strtod_l+0x58c>)
 800a3da:	eba9 0808 	sub.w	r8, r9, r8
 800a3de:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a3e2:	4650      	mov	r0, sl
 800a3e4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a3e8:	4659      	mov	r1, fp
 800a3ea:	f7f6 f9a9 	bl	8000740 <__aeabi_ddiv>
 800a3ee:	e760      	b.n	800a2b2 <_strtod_l+0x382>
 800a3f0:	4b33      	ldr	r3, [pc, #204]	@ (800a4c0 <_strtod_l+0x590>)
 800a3f2:	4650      	mov	r0, sl
 800a3f4:	9308      	str	r3, [sp, #32]
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	4659      	mov	r1, fp
 800a3fa:	461e      	mov	r6, r3
 800a3fc:	1124      	asrs	r4, r4, #4
 800a3fe:	2c01      	cmp	r4, #1
 800a400:	dc21      	bgt.n	800a446 <_strtod_l+0x516>
 800a402:	b10b      	cbz	r3, 800a408 <_strtod_l+0x4d8>
 800a404:	4682      	mov	sl, r0
 800a406:	468b      	mov	fp, r1
 800a408:	492d      	ldr	r1, [pc, #180]	@ (800a4c0 <_strtod_l+0x590>)
 800a40a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a40e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a412:	4652      	mov	r2, sl
 800a414:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a418:	465b      	mov	r3, fp
 800a41a:	f7f6 f867 	bl	80004ec <__aeabi_dmul>
 800a41e:	4b25      	ldr	r3, [pc, #148]	@ (800a4b4 <_strtod_l+0x584>)
 800a420:	460a      	mov	r2, r1
 800a422:	400b      	ands	r3, r1
 800a424:	4927      	ldr	r1, [pc, #156]	@ (800a4c4 <_strtod_l+0x594>)
 800a426:	4682      	mov	sl, r0
 800a428:	428b      	cmp	r3, r1
 800a42a:	d898      	bhi.n	800a35e <_strtod_l+0x42e>
 800a42c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a430:	428b      	cmp	r3, r1
 800a432:	bf86      	itte	hi
 800a434:	f04f 3aff 	movhi.w	sl, #4294967295
 800a438:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800a4c8 <_strtod_l+0x598>
 800a43c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a440:	2300      	movs	r3, #0
 800a442:	9308      	str	r3, [sp, #32]
 800a444:	e07a      	b.n	800a53c <_strtod_l+0x60c>
 800a446:	07e2      	lsls	r2, r4, #31
 800a448:	d505      	bpl.n	800a456 <_strtod_l+0x526>
 800a44a:	9b08      	ldr	r3, [sp, #32]
 800a44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a450:	f7f6 f84c 	bl	80004ec <__aeabi_dmul>
 800a454:	2301      	movs	r3, #1
 800a456:	9a08      	ldr	r2, [sp, #32]
 800a458:	3601      	adds	r6, #1
 800a45a:	3208      	adds	r2, #8
 800a45c:	1064      	asrs	r4, r4, #1
 800a45e:	9208      	str	r2, [sp, #32]
 800a460:	e7cd      	b.n	800a3fe <_strtod_l+0x4ce>
 800a462:	d0ed      	beq.n	800a440 <_strtod_l+0x510>
 800a464:	4264      	negs	r4, r4
 800a466:	f014 020f 	ands.w	r2, r4, #15
 800a46a:	d00a      	beq.n	800a482 <_strtod_l+0x552>
 800a46c:	4b13      	ldr	r3, [pc, #76]	@ (800a4bc <_strtod_l+0x58c>)
 800a46e:	4650      	mov	r0, sl
 800a470:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a474:	4659      	mov	r1, fp
 800a476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47a:	f7f6 f961 	bl	8000740 <__aeabi_ddiv>
 800a47e:	4682      	mov	sl, r0
 800a480:	468b      	mov	fp, r1
 800a482:	1124      	asrs	r4, r4, #4
 800a484:	d0dc      	beq.n	800a440 <_strtod_l+0x510>
 800a486:	2c1f      	cmp	r4, #31
 800a488:	dd20      	ble.n	800a4cc <_strtod_l+0x59c>
 800a48a:	2400      	movs	r4, #0
 800a48c:	46a0      	mov	r8, r4
 800a48e:	46a1      	mov	r9, r4
 800a490:	940a      	str	r4, [sp, #40]	@ 0x28
 800a492:	2322      	movs	r3, #34	@ 0x22
 800a494:	9a05      	ldr	r2, [sp, #20]
 800a496:	f04f 0a00 	mov.w	sl, #0
 800a49a:	f04f 0b00 	mov.w	fp, #0
 800a49e:	6013      	str	r3, [r2, #0]
 800a4a0:	e768      	b.n	800a374 <_strtod_l+0x444>
 800a4a2:	bf00      	nop
 800a4a4:	0800bdd3 	.word	0x0800bdd3
 800a4a8:	0800bfec 	.word	0x0800bfec
 800a4ac:	0800bdcb 	.word	0x0800bdcb
 800a4b0:	0800be02 	.word	0x0800be02
 800a4b4:	7ff00000 	.word	0x7ff00000
 800a4b8:	0800c195 	.word	0x0800c195
 800a4bc:	0800bf20 	.word	0x0800bf20
 800a4c0:	0800bef8 	.word	0x0800bef8
 800a4c4:	7ca00000 	.word	0x7ca00000
 800a4c8:	7fefffff 	.word	0x7fefffff
 800a4cc:	f014 0310 	ands.w	r3, r4, #16
 800a4d0:	bf18      	it	ne
 800a4d2:	236a      	movne	r3, #106	@ 0x6a
 800a4d4:	4650      	mov	r0, sl
 800a4d6:	9308      	str	r3, [sp, #32]
 800a4d8:	4659      	mov	r1, fp
 800a4da:	2300      	movs	r3, #0
 800a4dc:	4ea9      	ldr	r6, [pc, #676]	@ (800a784 <_strtod_l+0x854>)
 800a4de:	07e2      	lsls	r2, r4, #31
 800a4e0:	d504      	bpl.n	800a4ec <_strtod_l+0x5bc>
 800a4e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a4e6:	f7f6 f801 	bl	80004ec <__aeabi_dmul>
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	1064      	asrs	r4, r4, #1
 800a4ee:	f106 0608 	add.w	r6, r6, #8
 800a4f2:	d1f4      	bne.n	800a4de <_strtod_l+0x5ae>
 800a4f4:	b10b      	cbz	r3, 800a4fa <_strtod_l+0x5ca>
 800a4f6:	4682      	mov	sl, r0
 800a4f8:	468b      	mov	fp, r1
 800a4fa:	9b08      	ldr	r3, [sp, #32]
 800a4fc:	b1b3      	cbz	r3, 800a52c <_strtod_l+0x5fc>
 800a4fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a502:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a506:	2b00      	cmp	r3, #0
 800a508:	4659      	mov	r1, fp
 800a50a:	dd0f      	ble.n	800a52c <_strtod_l+0x5fc>
 800a50c:	2b1f      	cmp	r3, #31
 800a50e:	dd57      	ble.n	800a5c0 <_strtod_l+0x690>
 800a510:	2b34      	cmp	r3, #52	@ 0x34
 800a512:	bfd8      	it	le
 800a514:	f04f 33ff 	movle.w	r3, #4294967295
 800a518:	f04f 0a00 	mov.w	sl, #0
 800a51c:	bfcf      	iteee	gt
 800a51e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a522:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a526:	4093      	lslle	r3, r2
 800a528:	ea03 0b01 	andle.w	fp, r3, r1
 800a52c:	2200      	movs	r2, #0
 800a52e:	2300      	movs	r3, #0
 800a530:	4650      	mov	r0, sl
 800a532:	4659      	mov	r1, fp
 800a534:	f7f6 fa42 	bl	80009bc <__aeabi_dcmpeq>
 800a538:	2800      	cmp	r0, #0
 800a53a:	d1a6      	bne.n	800a48a <_strtod_l+0x55a>
 800a53c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a53e:	463a      	mov	r2, r7
 800a540:	9300      	str	r3, [sp, #0]
 800a542:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a544:	462b      	mov	r3, r5
 800a546:	9805      	ldr	r0, [sp, #20]
 800a548:	f7ff f8d0 	bl	80096ec <__s2b>
 800a54c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a54e:	2800      	cmp	r0, #0
 800a550:	f43f af05 	beq.w	800a35e <_strtod_l+0x42e>
 800a554:	2400      	movs	r4, #0
 800a556:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a558:	eba9 0308 	sub.w	r3, r9, r8
 800a55c:	2a00      	cmp	r2, #0
 800a55e:	bfa8      	it	ge
 800a560:	2300      	movge	r3, #0
 800a562:	46a0      	mov	r8, r4
 800a564:	9312      	str	r3, [sp, #72]	@ 0x48
 800a566:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a56a:	9316      	str	r3, [sp, #88]	@ 0x58
 800a56c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a56e:	9805      	ldr	r0, [sp, #20]
 800a570:	6859      	ldr	r1, [r3, #4]
 800a572:	f7ff f813 	bl	800959c <_Balloc>
 800a576:	4681      	mov	r9, r0
 800a578:	2800      	cmp	r0, #0
 800a57a:	f43f aef4 	beq.w	800a366 <_strtod_l+0x436>
 800a57e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a580:	300c      	adds	r0, #12
 800a582:	691a      	ldr	r2, [r3, #16]
 800a584:	f103 010c 	add.w	r1, r3, #12
 800a588:	3202      	adds	r2, #2
 800a58a:	0092      	lsls	r2, r2, #2
 800a58c:	f7fe f8a5 	bl	80086da <memcpy>
 800a590:	ab1c      	add	r3, sp, #112	@ 0x70
 800a592:	9301      	str	r3, [sp, #4]
 800a594:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a596:	9300      	str	r3, [sp, #0]
 800a598:	4652      	mov	r2, sl
 800a59a:	465b      	mov	r3, fp
 800a59c:	9805      	ldr	r0, [sp, #20]
 800a59e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a5a2:	f7ff fbd5 	bl	8009d50 <__d2b>
 800a5a6:	901a      	str	r0, [sp, #104]	@ 0x68
 800a5a8:	2800      	cmp	r0, #0
 800a5aa:	f43f aedc 	beq.w	800a366 <_strtod_l+0x436>
 800a5ae:	2101      	movs	r1, #1
 800a5b0:	9805      	ldr	r0, [sp, #20]
 800a5b2:	f7ff f931 	bl	8009818 <__i2b>
 800a5b6:	4680      	mov	r8, r0
 800a5b8:	b948      	cbnz	r0, 800a5ce <_strtod_l+0x69e>
 800a5ba:	f04f 0800 	mov.w	r8, #0
 800a5be:	e6d2      	b.n	800a366 <_strtod_l+0x436>
 800a5c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a5c8:	ea03 0a0a 	and.w	sl, r3, sl
 800a5cc:	e7ae      	b.n	800a52c <_strtod_l+0x5fc>
 800a5ce:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a5d0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a5d2:	2d00      	cmp	r5, #0
 800a5d4:	bfab      	itete	ge
 800a5d6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a5d8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a5da:	18ef      	addge	r7, r5, r3
 800a5dc:	1b5e      	sublt	r6, r3, r5
 800a5de:	9b08      	ldr	r3, [sp, #32]
 800a5e0:	bfa8      	it	ge
 800a5e2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a5e4:	eba5 0503 	sub.w	r5, r5, r3
 800a5e8:	4415      	add	r5, r2
 800a5ea:	4b67      	ldr	r3, [pc, #412]	@ (800a788 <_strtod_l+0x858>)
 800a5ec:	f105 35ff 	add.w	r5, r5, #4294967295
 800a5f0:	bfb8      	it	lt
 800a5f2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a5f4:	429d      	cmp	r5, r3
 800a5f6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a5fa:	da50      	bge.n	800a69e <_strtod_l+0x76e>
 800a5fc:	1b5b      	subs	r3, r3, r5
 800a5fe:	2b1f      	cmp	r3, #31
 800a600:	f04f 0101 	mov.w	r1, #1
 800a604:	eba2 0203 	sub.w	r2, r2, r3
 800a608:	dc3d      	bgt.n	800a686 <_strtod_l+0x756>
 800a60a:	fa01 f303 	lsl.w	r3, r1, r3
 800a60e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a610:	2300      	movs	r3, #0
 800a612:	9310      	str	r3, [sp, #64]	@ 0x40
 800a614:	18bd      	adds	r5, r7, r2
 800a616:	9b08      	ldr	r3, [sp, #32]
 800a618:	42af      	cmp	r7, r5
 800a61a:	4416      	add	r6, r2
 800a61c:	441e      	add	r6, r3
 800a61e:	463b      	mov	r3, r7
 800a620:	bfa8      	it	ge
 800a622:	462b      	movge	r3, r5
 800a624:	42b3      	cmp	r3, r6
 800a626:	bfa8      	it	ge
 800a628:	4633      	movge	r3, r6
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	bfc2      	ittt	gt
 800a62e:	1aed      	subgt	r5, r5, r3
 800a630:	1af6      	subgt	r6, r6, r3
 800a632:	1aff      	subgt	r7, r7, r3
 800a634:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a636:	2b00      	cmp	r3, #0
 800a638:	dd16      	ble.n	800a668 <_strtod_l+0x738>
 800a63a:	4641      	mov	r1, r8
 800a63c:	461a      	mov	r2, r3
 800a63e:	9805      	ldr	r0, [sp, #20]
 800a640:	f7ff f9a8 	bl	8009994 <__pow5mult>
 800a644:	4680      	mov	r8, r0
 800a646:	2800      	cmp	r0, #0
 800a648:	d0b7      	beq.n	800a5ba <_strtod_l+0x68a>
 800a64a:	4601      	mov	r1, r0
 800a64c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a64e:	9805      	ldr	r0, [sp, #20]
 800a650:	f7ff f8f8 	bl	8009844 <__multiply>
 800a654:	900e      	str	r0, [sp, #56]	@ 0x38
 800a656:	2800      	cmp	r0, #0
 800a658:	f43f ae85 	beq.w	800a366 <_strtod_l+0x436>
 800a65c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a65e:	9805      	ldr	r0, [sp, #20]
 800a660:	f7fe ffdc 	bl	800961c <_Bfree>
 800a664:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a666:	931a      	str	r3, [sp, #104]	@ 0x68
 800a668:	2d00      	cmp	r5, #0
 800a66a:	dc1d      	bgt.n	800a6a8 <_strtod_l+0x778>
 800a66c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a66e:	2b00      	cmp	r3, #0
 800a670:	dd23      	ble.n	800a6ba <_strtod_l+0x78a>
 800a672:	4649      	mov	r1, r9
 800a674:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a676:	9805      	ldr	r0, [sp, #20]
 800a678:	f7ff f98c 	bl	8009994 <__pow5mult>
 800a67c:	4681      	mov	r9, r0
 800a67e:	b9e0      	cbnz	r0, 800a6ba <_strtod_l+0x78a>
 800a680:	f04f 0900 	mov.w	r9, #0
 800a684:	e66f      	b.n	800a366 <_strtod_l+0x436>
 800a686:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a68a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a68e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a692:	35e2      	adds	r5, #226	@ 0xe2
 800a694:	fa01 f305 	lsl.w	r3, r1, r5
 800a698:	9310      	str	r3, [sp, #64]	@ 0x40
 800a69a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a69c:	e7ba      	b.n	800a614 <_strtod_l+0x6e4>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a6a6:	e7b5      	b.n	800a614 <_strtod_l+0x6e4>
 800a6a8:	462a      	mov	r2, r5
 800a6aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a6ac:	9805      	ldr	r0, [sp, #20]
 800a6ae:	f7ff f9cb 	bl	8009a48 <__lshift>
 800a6b2:	901a      	str	r0, [sp, #104]	@ 0x68
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	d1d9      	bne.n	800a66c <_strtod_l+0x73c>
 800a6b8:	e655      	b.n	800a366 <_strtod_l+0x436>
 800a6ba:	2e00      	cmp	r6, #0
 800a6bc:	dd07      	ble.n	800a6ce <_strtod_l+0x79e>
 800a6be:	4649      	mov	r1, r9
 800a6c0:	4632      	mov	r2, r6
 800a6c2:	9805      	ldr	r0, [sp, #20]
 800a6c4:	f7ff f9c0 	bl	8009a48 <__lshift>
 800a6c8:	4681      	mov	r9, r0
 800a6ca:	2800      	cmp	r0, #0
 800a6cc:	d0d8      	beq.n	800a680 <_strtod_l+0x750>
 800a6ce:	2f00      	cmp	r7, #0
 800a6d0:	dd08      	ble.n	800a6e4 <_strtod_l+0x7b4>
 800a6d2:	4641      	mov	r1, r8
 800a6d4:	463a      	mov	r2, r7
 800a6d6:	9805      	ldr	r0, [sp, #20]
 800a6d8:	f7ff f9b6 	bl	8009a48 <__lshift>
 800a6dc:	4680      	mov	r8, r0
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	f43f ae41 	beq.w	800a366 <_strtod_l+0x436>
 800a6e4:	464a      	mov	r2, r9
 800a6e6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a6e8:	9805      	ldr	r0, [sp, #20]
 800a6ea:	f7ff fa35 	bl	8009b58 <__mdiff>
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	f43f ae38 	beq.w	800a366 <_strtod_l+0x436>
 800a6f6:	68c3      	ldr	r3, [r0, #12]
 800a6f8:	4641      	mov	r1, r8
 800a6fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	60c3      	str	r3, [r0, #12]
 800a700:	f7ff fa0e 	bl	8009b20 <__mcmp>
 800a704:	2800      	cmp	r0, #0
 800a706:	da45      	bge.n	800a794 <_strtod_l+0x864>
 800a708:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a70a:	ea53 030a 	orrs.w	r3, r3, sl
 800a70e:	d16b      	bne.n	800a7e8 <_strtod_l+0x8b8>
 800a710:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a714:	2b00      	cmp	r3, #0
 800a716:	d167      	bne.n	800a7e8 <_strtod_l+0x8b8>
 800a718:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a71c:	0d1b      	lsrs	r3, r3, #20
 800a71e:	051b      	lsls	r3, r3, #20
 800a720:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a724:	d960      	bls.n	800a7e8 <_strtod_l+0x8b8>
 800a726:	6963      	ldr	r3, [r4, #20]
 800a728:	b913      	cbnz	r3, 800a730 <_strtod_l+0x800>
 800a72a:	6923      	ldr	r3, [r4, #16]
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	dd5b      	ble.n	800a7e8 <_strtod_l+0x8b8>
 800a730:	4621      	mov	r1, r4
 800a732:	2201      	movs	r2, #1
 800a734:	9805      	ldr	r0, [sp, #20]
 800a736:	f7ff f987 	bl	8009a48 <__lshift>
 800a73a:	4641      	mov	r1, r8
 800a73c:	4604      	mov	r4, r0
 800a73e:	f7ff f9ef 	bl	8009b20 <__mcmp>
 800a742:	2800      	cmp	r0, #0
 800a744:	dd50      	ble.n	800a7e8 <_strtod_l+0x8b8>
 800a746:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a74a:	9a08      	ldr	r2, [sp, #32]
 800a74c:	0d1b      	lsrs	r3, r3, #20
 800a74e:	051b      	lsls	r3, r3, #20
 800a750:	2a00      	cmp	r2, #0
 800a752:	d06a      	beq.n	800a82a <_strtod_l+0x8fa>
 800a754:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a758:	d867      	bhi.n	800a82a <_strtod_l+0x8fa>
 800a75a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a75e:	f67f ae98 	bls.w	800a492 <_strtod_l+0x562>
 800a762:	4650      	mov	r0, sl
 800a764:	4659      	mov	r1, fp
 800a766:	4b09      	ldr	r3, [pc, #36]	@ (800a78c <_strtod_l+0x85c>)
 800a768:	2200      	movs	r2, #0
 800a76a:	f7f5 febf 	bl	80004ec <__aeabi_dmul>
 800a76e:	4b08      	ldr	r3, [pc, #32]	@ (800a790 <_strtod_l+0x860>)
 800a770:	4682      	mov	sl, r0
 800a772:	400b      	ands	r3, r1
 800a774:	468b      	mov	fp, r1
 800a776:	2b00      	cmp	r3, #0
 800a778:	f47f ae00 	bne.w	800a37c <_strtod_l+0x44c>
 800a77c:	2322      	movs	r3, #34	@ 0x22
 800a77e:	9a05      	ldr	r2, [sp, #20]
 800a780:	6013      	str	r3, [r2, #0]
 800a782:	e5fb      	b.n	800a37c <_strtod_l+0x44c>
 800a784:	0800c018 	.word	0x0800c018
 800a788:	fffffc02 	.word	0xfffffc02
 800a78c:	39500000 	.word	0x39500000
 800a790:	7ff00000 	.word	0x7ff00000
 800a794:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a798:	d165      	bne.n	800a866 <_strtod_l+0x936>
 800a79a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a79c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a7a0:	b35a      	cbz	r2, 800a7fa <_strtod_l+0x8ca>
 800a7a2:	4a99      	ldr	r2, [pc, #612]	@ (800aa08 <_strtod_l+0xad8>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d12b      	bne.n	800a800 <_strtod_l+0x8d0>
 800a7a8:	9b08      	ldr	r3, [sp, #32]
 800a7aa:	4651      	mov	r1, sl
 800a7ac:	b303      	cbz	r3, 800a7f0 <_strtod_l+0x8c0>
 800a7ae:	465a      	mov	r2, fp
 800a7b0:	4b96      	ldr	r3, [pc, #600]	@ (800aa0c <_strtod_l+0xadc>)
 800a7b2:	4013      	ands	r3, r2
 800a7b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a7b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a7bc:	d81b      	bhi.n	800a7f6 <_strtod_l+0x8c6>
 800a7be:	0d1b      	lsrs	r3, r3, #20
 800a7c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a7c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7c8:	4299      	cmp	r1, r3
 800a7ca:	d119      	bne.n	800a800 <_strtod_l+0x8d0>
 800a7cc:	4b90      	ldr	r3, [pc, #576]	@ (800aa10 <_strtod_l+0xae0>)
 800a7ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d102      	bne.n	800a7da <_strtod_l+0x8aa>
 800a7d4:	3101      	adds	r1, #1
 800a7d6:	f43f adc6 	beq.w	800a366 <_strtod_l+0x436>
 800a7da:	f04f 0a00 	mov.w	sl, #0
 800a7de:	4b8b      	ldr	r3, [pc, #556]	@ (800aa0c <_strtod_l+0xadc>)
 800a7e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a7e2:	401a      	ands	r2, r3
 800a7e4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a7e8:	9b08      	ldr	r3, [sp, #32]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d1b9      	bne.n	800a762 <_strtod_l+0x832>
 800a7ee:	e5c5      	b.n	800a37c <_strtod_l+0x44c>
 800a7f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7f4:	e7e8      	b.n	800a7c8 <_strtod_l+0x898>
 800a7f6:	4613      	mov	r3, r2
 800a7f8:	e7e6      	b.n	800a7c8 <_strtod_l+0x898>
 800a7fa:	ea53 030a 	orrs.w	r3, r3, sl
 800a7fe:	d0a2      	beq.n	800a746 <_strtod_l+0x816>
 800a800:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a802:	b1db      	cbz	r3, 800a83c <_strtod_l+0x90c>
 800a804:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a806:	4213      	tst	r3, r2
 800a808:	d0ee      	beq.n	800a7e8 <_strtod_l+0x8b8>
 800a80a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a80c:	4650      	mov	r0, sl
 800a80e:	4659      	mov	r1, fp
 800a810:	9a08      	ldr	r2, [sp, #32]
 800a812:	b1bb      	cbz	r3, 800a844 <_strtod_l+0x914>
 800a814:	f7ff fb68 	bl	8009ee8 <sulp>
 800a818:	4602      	mov	r2, r0
 800a81a:	460b      	mov	r3, r1
 800a81c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a820:	f7f5 fcae 	bl	8000180 <__adddf3>
 800a824:	4682      	mov	sl, r0
 800a826:	468b      	mov	fp, r1
 800a828:	e7de      	b.n	800a7e8 <_strtod_l+0x8b8>
 800a82a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a82e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a832:	f04f 3aff 	mov.w	sl, #4294967295
 800a836:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a83a:	e7d5      	b.n	800a7e8 <_strtod_l+0x8b8>
 800a83c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a83e:	ea13 0f0a 	tst.w	r3, sl
 800a842:	e7e1      	b.n	800a808 <_strtod_l+0x8d8>
 800a844:	f7ff fb50 	bl	8009ee8 <sulp>
 800a848:	4602      	mov	r2, r0
 800a84a:	460b      	mov	r3, r1
 800a84c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a850:	f7f5 fc94 	bl	800017c <__aeabi_dsub>
 800a854:	2200      	movs	r2, #0
 800a856:	2300      	movs	r3, #0
 800a858:	4682      	mov	sl, r0
 800a85a:	468b      	mov	fp, r1
 800a85c:	f7f6 f8ae 	bl	80009bc <__aeabi_dcmpeq>
 800a860:	2800      	cmp	r0, #0
 800a862:	d0c1      	beq.n	800a7e8 <_strtod_l+0x8b8>
 800a864:	e615      	b.n	800a492 <_strtod_l+0x562>
 800a866:	4641      	mov	r1, r8
 800a868:	4620      	mov	r0, r4
 800a86a:	f7ff fac9 	bl	8009e00 <__ratio>
 800a86e:	2200      	movs	r2, #0
 800a870:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a874:	4606      	mov	r6, r0
 800a876:	460f      	mov	r7, r1
 800a878:	f7f6 f8b4 	bl	80009e4 <__aeabi_dcmple>
 800a87c:	2800      	cmp	r0, #0
 800a87e:	d06d      	beq.n	800a95c <_strtod_l+0xa2c>
 800a880:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a882:	2b00      	cmp	r3, #0
 800a884:	d178      	bne.n	800a978 <_strtod_l+0xa48>
 800a886:	f1ba 0f00 	cmp.w	sl, #0
 800a88a:	d156      	bne.n	800a93a <_strtod_l+0xa0a>
 800a88c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a88e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a892:	2b00      	cmp	r3, #0
 800a894:	d158      	bne.n	800a948 <_strtod_l+0xa18>
 800a896:	2200      	movs	r2, #0
 800a898:	4630      	mov	r0, r6
 800a89a:	4639      	mov	r1, r7
 800a89c:	4b5d      	ldr	r3, [pc, #372]	@ (800aa14 <_strtod_l+0xae4>)
 800a89e:	f7f6 f897 	bl	80009d0 <__aeabi_dcmplt>
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	d157      	bne.n	800a956 <_strtod_l+0xa26>
 800a8a6:	4630      	mov	r0, r6
 800a8a8:	4639      	mov	r1, r7
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	4b5a      	ldr	r3, [pc, #360]	@ (800aa18 <_strtod_l+0xae8>)
 800a8ae:	f7f5 fe1d 	bl	80004ec <__aeabi_dmul>
 800a8b2:	4606      	mov	r6, r0
 800a8b4:	460f      	mov	r7, r1
 800a8b6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a8ba:	9606      	str	r6, [sp, #24]
 800a8bc:	9307      	str	r3, [sp, #28]
 800a8be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8c2:	4d52      	ldr	r5, [pc, #328]	@ (800aa0c <_strtod_l+0xadc>)
 800a8c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a8c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8ca:	401d      	ands	r5, r3
 800a8cc:	4b53      	ldr	r3, [pc, #332]	@ (800aa1c <_strtod_l+0xaec>)
 800a8ce:	429d      	cmp	r5, r3
 800a8d0:	f040 80aa 	bne.w	800aa28 <_strtod_l+0xaf8>
 800a8d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8d6:	4650      	mov	r0, sl
 800a8d8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a8dc:	4659      	mov	r1, fp
 800a8de:	f7ff f9cf 	bl	8009c80 <__ulp>
 800a8e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8e6:	f7f5 fe01 	bl	80004ec <__aeabi_dmul>
 800a8ea:	4652      	mov	r2, sl
 800a8ec:	465b      	mov	r3, fp
 800a8ee:	f7f5 fc47 	bl	8000180 <__adddf3>
 800a8f2:	460b      	mov	r3, r1
 800a8f4:	4945      	ldr	r1, [pc, #276]	@ (800aa0c <_strtod_l+0xadc>)
 800a8f6:	4a4a      	ldr	r2, [pc, #296]	@ (800aa20 <_strtod_l+0xaf0>)
 800a8f8:	4019      	ands	r1, r3
 800a8fa:	4291      	cmp	r1, r2
 800a8fc:	4682      	mov	sl, r0
 800a8fe:	d942      	bls.n	800a986 <_strtod_l+0xa56>
 800a900:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a902:	4b43      	ldr	r3, [pc, #268]	@ (800aa10 <_strtod_l+0xae0>)
 800a904:	429a      	cmp	r2, r3
 800a906:	d103      	bne.n	800a910 <_strtod_l+0x9e0>
 800a908:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a90a:	3301      	adds	r3, #1
 800a90c:	f43f ad2b 	beq.w	800a366 <_strtod_l+0x436>
 800a910:	f04f 3aff 	mov.w	sl, #4294967295
 800a914:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800aa10 <_strtod_l+0xae0>
 800a918:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a91a:	9805      	ldr	r0, [sp, #20]
 800a91c:	f7fe fe7e 	bl	800961c <_Bfree>
 800a920:	4649      	mov	r1, r9
 800a922:	9805      	ldr	r0, [sp, #20]
 800a924:	f7fe fe7a 	bl	800961c <_Bfree>
 800a928:	4641      	mov	r1, r8
 800a92a:	9805      	ldr	r0, [sp, #20]
 800a92c:	f7fe fe76 	bl	800961c <_Bfree>
 800a930:	4621      	mov	r1, r4
 800a932:	9805      	ldr	r0, [sp, #20]
 800a934:	f7fe fe72 	bl	800961c <_Bfree>
 800a938:	e618      	b.n	800a56c <_strtod_l+0x63c>
 800a93a:	f1ba 0f01 	cmp.w	sl, #1
 800a93e:	d103      	bne.n	800a948 <_strtod_l+0xa18>
 800a940:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a942:	2b00      	cmp	r3, #0
 800a944:	f43f ada5 	beq.w	800a492 <_strtod_l+0x562>
 800a948:	2200      	movs	r2, #0
 800a94a:	4b36      	ldr	r3, [pc, #216]	@ (800aa24 <_strtod_l+0xaf4>)
 800a94c:	2600      	movs	r6, #0
 800a94e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a952:	4f30      	ldr	r7, [pc, #192]	@ (800aa14 <_strtod_l+0xae4>)
 800a954:	e7b3      	b.n	800a8be <_strtod_l+0x98e>
 800a956:	2600      	movs	r6, #0
 800a958:	4f2f      	ldr	r7, [pc, #188]	@ (800aa18 <_strtod_l+0xae8>)
 800a95a:	e7ac      	b.n	800a8b6 <_strtod_l+0x986>
 800a95c:	4630      	mov	r0, r6
 800a95e:	4639      	mov	r1, r7
 800a960:	4b2d      	ldr	r3, [pc, #180]	@ (800aa18 <_strtod_l+0xae8>)
 800a962:	2200      	movs	r2, #0
 800a964:	f7f5 fdc2 	bl	80004ec <__aeabi_dmul>
 800a968:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a96a:	4606      	mov	r6, r0
 800a96c:	460f      	mov	r7, r1
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d0a1      	beq.n	800a8b6 <_strtod_l+0x986>
 800a972:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a976:	e7a2      	b.n	800a8be <_strtod_l+0x98e>
 800a978:	2200      	movs	r2, #0
 800a97a:	4b26      	ldr	r3, [pc, #152]	@ (800aa14 <_strtod_l+0xae4>)
 800a97c:	4616      	mov	r6, r2
 800a97e:	461f      	mov	r7, r3
 800a980:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a984:	e79b      	b.n	800a8be <_strtod_l+0x98e>
 800a986:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a98a:	9b08      	ldr	r3, [sp, #32]
 800a98c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a990:	2b00      	cmp	r3, #0
 800a992:	d1c1      	bne.n	800a918 <_strtod_l+0x9e8>
 800a994:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a998:	0d1b      	lsrs	r3, r3, #20
 800a99a:	051b      	lsls	r3, r3, #20
 800a99c:	429d      	cmp	r5, r3
 800a99e:	d1bb      	bne.n	800a918 <_strtod_l+0x9e8>
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	4639      	mov	r1, r7
 800a9a4:	f7f6 fb48 	bl	8001038 <__aeabi_d2lz>
 800a9a8:	f7f5 fd72 	bl	8000490 <__aeabi_l2d>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	4630      	mov	r0, r6
 800a9b2:	4639      	mov	r1, r7
 800a9b4:	f7f5 fbe2 	bl	800017c <__aeabi_dsub>
 800a9b8:	460b      	mov	r3, r1
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a9c0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a9c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9c6:	ea46 060a 	orr.w	r6, r6, sl
 800a9ca:	431e      	orrs	r6, r3
 800a9cc:	d069      	beq.n	800aaa2 <_strtod_l+0xb72>
 800a9ce:	a30a      	add	r3, pc, #40	@ (adr r3, 800a9f8 <_strtod_l+0xac8>)
 800a9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d4:	f7f5 fffc 	bl	80009d0 <__aeabi_dcmplt>
 800a9d8:	2800      	cmp	r0, #0
 800a9da:	f47f accf 	bne.w	800a37c <_strtod_l+0x44c>
 800a9de:	a308      	add	r3, pc, #32	@ (adr r3, 800aa00 <_strtod_l+0xad0>)
 800a9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9e8:	f7f6 f810 	bl	8000a0c <__aeabi_dcmpgt>
 800a9ec:	2800      	cmp	r0, #0
 800a9ee:	d093      	beq.n	800a918 <_strtod_l+0x9e8>
 800a9f0:	e4c4      	b.n	800a37c <_strtod_l+0x44c>
 800a9f2:	bf00      	nop
 800a9f4:	f3af 8000 	nop.w
 800a9f8:	94a03595 	.word	0x94a03595
 800a9fc:	3fdfffff 	.word	0x3fdfffff
 800aa00:	35afe535 	.word	0x35afe535
 800aa04:	3fe00000 	.word	0x3fe00000
 800aa08:	000fffff 	.word	0x000fffff
 800aa0c:	7ff00000 	.word	0x7ff00000
 800aa10:	7fefffff 	.word	0x7fefffff
 800aa14:	3ff00000 	.word	0x3ff00000
 800aa18:	3fe00000 	.word	0x3fe00000
 800aa1c:	7fe00000 	.word	0x7fe00000
 800aa20:	7c9fffff 	.word	0x7c9fffff
 800aa24:	bff00000 	.word	0xbff00000
 800aa28:	9b08      	ldr	r3, [sp, #32]
 800aa2a:	b323      	cbz	r3, 800aa76 <_strtod_l+0xb46>
 800aa2c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800aa30:	d821      	bhi.n	800aa76 <_strtod_l+0xb46>
 800aa32:	a327      	add	r3, pc, #156	@ (adr r3, 800aad0 <_strtod_l+0xba0>)
 800aa34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa38:	4630      	mov	r0, r6
 800aa3a:	4639      	mov	r1, r7
 800aa3c:	f7f5 ffd2 	bl	80009e4 <__aeabi_dcmple>
 800aa40:	b1a0      	cbz	r0, 800aa6c <_strtod_l+0xb3c>
 800aa42:	4639      	mov	r1, r7
 800aa44:	4630      	mov	r0, r6
 800aa46:	f7f6 f829 	bl	8000a9c <__aeabi_d2uiz>
 800aa4a:	2801      	cmp	r0, #1
 800aa4c:	bf38      	it	cc
 800aa4e:	2001      	movcc	r0, #1
 800aa50:	f7f5 fcd2 	bl	80003f8 <__aeabi_ui2d>
 800aa54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa56:	4606      	mov	r6, r0
 800aa58:	460f      	mov	r7, r1
 800aa5a:	b9fb      	cbnz	r3, 800aa9c <_strtod_l+0xb6c>
 800aa5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aa60:	9014      	str	r0, [sp, #80]	@ 0x50
 800aa62:	9315      	str	r3, [sp, #84]	@ 0x54
 800aa64:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800aa68:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800aa6c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aa6e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800aa72:	1b5b      	subs	r3, r3, r5
 800aa74:	9311      	str	r3, [sp, #68]	@ 0x44
 800aa76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa7a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800aa7e:	f7ff f8ff 	bl	8009c80 <__ulp>
 800aa82:	4602      	mov	r2, r0
 800aa84:	460b      	mov	r3, r1
 800aa86:	4650      	mov	r0, sl
 800aa88:	4659      	mov	r1, fp
 800aa8a:	f7f5 fd2f 	bl	80004ec <__aeabi_dmul>
 800aa8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800aa92:	f7f5 fb75 	bl	8000180 <__adddf3>
 800aa96:	4682      	mov	sl, r0
 800aa98:	468b      	mov	fp, r1
 800aa9a:	e776      	b.n	800a98a <_strtod_l+0xa5a>
 800aa9c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800aaa0:	e7e0      	b.n	800aa64 <_strtod_l+0xb34>
 800aaa2:	a30d      	add	r3, pc, #52	@ (adr r3, 800aad8 <_strtod_l+0xba8>)
 800aaa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa8:	f7f5 ff92 	bl	80009d0 <__aeabi_dcmplt>
 800aaac:	e79e      	b.n	800a9ec <_strtod_l+0xabc>
 800aaae:	2300      	movs	r3, #0
 800aab0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aab2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aab4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800aab6:	6013      	str	r3, [r2, #0]
 800aab8:	f7ff ba77 	b.w	8009faa <_strtod_l+0x7a>
 800aabc:	2a65      	cmp	r2, #101	@ 0x65
 800aabe:	f43f ab6e 	beq.w	800a19e <_strtod_l+0x26e>
 800aac2:	2a45      	cmp	r2, #69	@ 0x45
 800aac4:	f43f ab6b 	beq.w	800a19e <_strtod_l+0x26e>
 800aac8:	2301      	movs	r3, #1
 800aaca:	f7ff bba6 	b.w	800a21a <_strtod_l+0x2ea>
 800aace:	bf00      	nop
 800aad0:	ffc00000 	.word	0xffc00000
 800aad4:	41dfffff 	.word	0x41dfffff
 800aad8:	94a03595 	.word	0x94a03595
 800aadc:	3fcfffff 	.word	0x3fcfffff

0800aae0 <_strtod_r>:
 800aae0:	4b01      	ldr	r3, [pc, #4]	@ (800aae8 <_strtod_r+0x8>)
 800aae2:	f7ff ba25 	b.w	8009f30 <_strtod_l>
 800aae6:	bf00      	nop
 800aae8:	2000006c 	.word	0x2000006c

0800aaec <_strtol_l.constprop.0>:
 800aaec:	2b24      	cmp	r3, #36	@ 0x24
 800aaee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaf2:	4686      	mov	lr, r0
 800aaf4:	4690      	mov	r8, r2
 800aaf6:	d801      	bhi.n	800aafc <_strtol_l.constprop.0+0x10>
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d106      	bne.n	800ab0a <_strtol_l.constprop.0+0x1e>
 800aafc:	f7fd fdaa 	bl	8008654 <__errno>
 800ab00:	2316      	movs	r3, #22
 800ab02:	6003      	str	r3, [r0, #0]
 800ab04:	2000      	movs	r0, #0
 800ab06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab0a:	460d      	mov	r5, r1
 800ab0c:	4833      	ldr	r0, [pc, #204]	@ (800abdc <_strtol_l.constprop.0+0xf0>)
 800ab0e:	462a      	mov	r2, r5
 800ab10:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab14:	5d06      	ldrb	r6, [r0, r4]
 800ab16:	f016 0608 	ands.w	r6, r6, #8
 800ab1a:	d1f8      	bne.n	800ab0e <_strtol_l.constprop.0+0x22>
 800ab1c:	2c2d      	cmp	r4, #45	@ 0x2d
 800ab1e:	d12d      	bne.n	800ab7c <_strtol_l.constprop.0+0x90>
 800ab20:	2601      	movs	r6, #1
 800ab22:	782c      	ldrb	r4, [r5, #0]
 800ab24:	1c95      	adds	r5, r2, #2
 800ab26:	f033 0210 	bics.w	r2, r3, #16
 800ab2a:	d109      	bne.n	800ab40 <_strtol_l.constprop.0+0x54>
 800ab2c:	2c30      	cmp	r4, #48	@ 0x30
 800ab2e:	d12a      	bne.n	800ab86 <_strtol_l.constprop.0+0x9a>
 800ab30:	782a      	ldrb	r2, [r5, #0]
 800ab32:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ab36:	2a58      	cmp	r2, #88	@ 0x58
 800ab38:	d125      	bne.n	800ab86 <_strtol_l.constprop.0+0x9a>
 800ab3a:	2310      	movs	r3, #16
 800ab3c:	786c      	ldrb	r4, [r5, #1]
 800ab3e:	3502      	adds	r5, #2
 800ab40:	2200      	movs	r2, #0
 800ab42:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ab46:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ab4a:	fbbc f9f3 	udiv	r9, ip, r3
 800ab4e:	4610      	mov	r0, r2
 800ab50:	fb03 ca19 	mls	sl, r3, r9, ip
 800ab54:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ab58:	2f09      	cmp	r7, #9
 800ab5a:	d81b      	bhi.n	800ab94 <_strtol_l.constprop.0+0xa8>
 800ab5c:	463c      	mov	r4, r7
 800ab5e:	42a3      	cmp	r3, r4
 800ab60:	dd27      	ble.n	800abb2 <_strtol_l.constprop.0+0xc6>
 800ab62:	1c57      	adds	r7, r2, #1
 800ab64:	d007      	beq.n	800ab76 <_strtol_l.constprop.0+0x8a>
 800ab66:	4581      	cmp	r9, r0
 800ab68:	d320      	bcc.n	800abac <_strtol_l.constprop.0+0xc0>
 800ab6a:	d101      	bne.n	800ab70 <_strtol_l.constprop.0+0x84>
 800ab6c:	45a2      	cmp	sl, r4
 800ab6e:	db1d      	blt.n	800abac <_strtol_l.constprop.0+0xc0>
 800ab70:	2201      	movs	r2, #1
 800ab72:	fb00 4003 	mla	r0, r0, r3, r4
 800ab76:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab7a:	e7eb      	b.n	800ab54 <_strtol_l.constprop.0+0x68>
 800ab7c:	2c2b      	cmp	r4, #43	@ 0x2b
 800ab7e:	bf04      	itt	eq
 800ab80:	782c      	ldrbeq	r4, [r5, #0]
 800ab82:	1c95      	addeq	r5, r2, #2
 800ab84:	e7cf      	b.n	800ab26 <_strtol_l.constprop.0+0x3a>
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d1da      	bne.n	800ab40 <_strtol_l.constprop.0+0x54>
 800ab8a:	2c30      	cmp	r4, #48	@ 0x30
 800ab8c:	bf0c      	ite	eq
 800ab8e:	2308      	moveq	r3, #8
 800ab90:	230a      	movne	r3, #10
 800ab92:	e7d5      	b.n	800ab40 <_strtol_l.constprop.0+0x54>
 800ab94:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ab98:	2f19      	cmp	r7, #25
 800ab9a:	d801      	bhi.n	800aba0 <_strtol_l.constprop.0+0xb4>
 800ab9c:	3c37      	subs	r4, #55	@ 0x37
 800ab9e:	e7de      	b.n	800ab5e <_strtol_l.constprop.0+0x72>
 800aba0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800aba4:	2f19      	cmp	r7, #25
 800aba6:	d804      	bhi.n	800abb2 <_strtol_l.constprop.0+0xc6>
 800aba8:	3c57      	subs	r4, #87	@ 0x57
 800abaa:	e7d8      	b.n	800ab5e <_strtol_l.constprop.0+0x72>
 800abac:	f04f 32ff 	mov.w	r2, #4294967295
 800abb0:	e7e1      	b.n	800ab76 <_strtol_l.constprop.0+0x8a>
 800abb2:	1c53      	adds	r3, r2, #1
 800abb4:	d108      	bne.n	800abc8 <_strtol_l.constprop.0+0xdc>
 800abb6:	2322      	movs	r3, #34	@ 0x22
 800abb8:	4660      	mov	r0, ip
 800abba:	f8ce 3000 	str.w	r3, [lr]
 800abbe:	f1b8 0f00 	cmp.w	r8, #0
 800abc2:	d0a0      	beq.n	800ab06 <_strtol_l.constprop.0+0x1a>
 800abc4:	1e69      	subs	r1, r5, #1
 800abc6:	e006      	b.n	800abd6 <_strtol_l.constprop.0+0xea>
 800abc8:	b106      	cbz	r6, 800abcc <_strtol_l.constprop.0+0xe0>
 800abca:	4240      	negs	r0, r0
 800abcc:	f1b8 0f00 	cmp.w	r8, #0
 800abd0:	d099      	beq.n	800ab06 <_strtol_l.constprop.0+0x1a>
 800abd2:	2a00      	cmp	r2, #0
 800abd4:	d1f6      	bne.n	800abc4 <_strtol_l.constprop.0+0xd8>
 800abd6:	f8c8 1000 	str.w	r1, [r8]
 800abda:	e794      	b.n	800ab06 <_strtol_l.constprop.0+0x1a>
 800abdc:	0800c041 	.word	0x0800c041

0800abe0 <_strtol_r>:
 800abe0:	f7ff bf84 	b.w	800aaec <_strtol_l.constprop.0>

0800abe4 <__ssputs_r>:
 800abe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abe8:	461f      	mov	r7, r3
 800abea:	688e      	ldr	r6, [r1, #8]
 800abec:	4682      	mov	sl, r0
 800abee:	42be      	cmp	r6, r7
 800abf0:	460c      	mov	r4, r1
 800abf2:	4690      	mov	r8, r2
 800abf4:	680b      	ldr	r3, [r1, #0]
 800abf6:	d82d      	bhi.n	800ac54 <__ssputs_r+0x70>
 800abf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800abfc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ac00:	d026      	beq.n	800ac50 <__ssputs_r+0x6c>
 800ac02:	6965      	ldr	r5, [r4, #20]
 800ac04:	6909      	ldr	r1, [r1, #16]
 800ac06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac0a:	eba3 0901 	sub.w	r9, r3, r1
 800ac0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac12:	1c7b      	adds	r3, r7, #1
 800ac14:	444b      	add	r3, r9
 800ac16:	106d      	asrs	r5, r5, #1
 800ac18:	429d      	cmp	r5, r3
 800ac1a:	bf38      	it	cc
 800ac1c:	461d      	movcc	r5, r3
 800ac1e:	0553      	lsls	r3, r2, #21
 800ac20:	d527      	bpl.n	800ac72 <__ssputs_r+0x8e>
 800ac22:	4629      	mov	r1, r5
 800ac24:	f7fe fc2e 	bl	8009484 <_malloc_r>
 800ac28:	4606      	mov	r6, r0
 800ac2a:	b360      	cbz	r0, 800ac86 <__ssputs_r+0xa2>
 800ac2c:	464a      	mov	r2, r9
 800ac2e:	6921      	ldr	r1, [r4, #16]
 800ac30:	f7fd fd53 	bl	80086da <memcpy>
 800ac34:	89a3      	ldrh	r3, [r4, #12]
 800ac36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ac3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac3e:	81a3      	strh	r3, [r4, #12]
 800ac40:	6126      	str	r6, [r4, #16]
 800ac42:	444e      	add	r6, r9
 800ac44:	6026      	str	r6, [r4, #0]
 800ac46:	463e      	mov	r6, r7
 800ac48:	6165      	str	r5, [r4, #20]
 800ac4a:	eba5 0509 	sub.w	r5, r5, r9
 800ac4e:	60a5      	str	r5, [r4, #8]
 800ac50:	42be      	cmp	r6, r7
 800ac52:	d900      	bls.n	800ac56 <__ssputs_r+0x72>
 800ac54:	463e      	mov	r6, r7
 800ac56:	4632      	mov	r2, r6
 800ac58:	4641      	mov	r1, r8
 800ac5a:	6820      	ldr	r0, [r4, #0]
 800ac5c:	f000 fb97 	bl	800b38e <memmove>
 800ac60:	2000      	movs	r0, #0
 800ac62:	68a3      	ldr	r3, [r4, #8]
 800ac64:	1b9b      	subs	r3, r3, r6
 800ac66:	60a3      	str	r3, [r4, #8]
 800ac68:	6823      	ldr	r3, [r4, #0]
 800ac6a:	4433      	add	r3, r6
 800ac6c:	6023      	str	r3, [r4, #0]
 800ac6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac72:	462a      	mov	r2, r5
 800ac74:	f000 ff6d 	bl	800bb52 <_realloc_r>
 800ac78:	4606      	mov	r6, r0
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	d1e0      	bne.n	800ac40 <__ssputs_r+0x5c>
 800ac7e:	4650      	mov	r0, sl
 800ac80:	6921      	ldr	r1, [r4, #16]
 800ac82:	f7fe fb8d 	bl	80093a0 <_free_r>
 800ac86:	230c      	movs	r3, #12
 800ac88:	f8ca 3000 	str.w	r3, [sl]
 800ac8c:	89a3      	ldrh	r3, [r4, #12]
 800ac8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac96:	81a3      	strh	r3, [r4, #12]
 800ac98:	e7e9      	b.n	800ac6e <__ssputs_r+0x8a>
	...

0800ac9c <_svfiprintf_r>:
 800ac9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca0:	4698      	mov	r8, r3
 800aca2:	898b      	ldrh	r3, [r1, #12]
 800aca4:	4607      	mov	r7, r0
 800aca6:	061b      	lsls	r3, r3, #24
 800aca8:	460d      	mov	r5, r1
 800acaa:	4614      	mov	r4, r2
 800acac:	b09d      	sub	sp, #116	@ 0x74
 800acae:	d510      	bpl.n	800acd2 <_svfiprintf_r+0x36>
 800acb0:	690b      	ldr	r3, [r1, #16]
 800acb2:	b973      	cbnz	r3, 800acd2 <_svfiprintf_r+0x36>
 800acb4:	2140      	movs	r1, #64	@ 0x40
 800acb6:	f7fe fbe5 	bl	8009484 <_malloc_r>
 800acba:	6028      	str	r0, [r5, #0]
 800acbc:	6128      	str	r0, [r5, #16]
 800acbe:	b930      	cbnz	r0, 800acce <_svfiprintf_r+0x32>
 800acc0:	230c      	movs	r3, #12
 800acc2:	603b      	str	r3, [r7, #0]
 800acc4:	f04f 30ff 	mov.w	r0, #4294967295
 800acc8:	b01d      	add	sp, #116	@ 0x74
 800acca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acce:	2340      	movs	r3, #64	@ 0x40
 800acd0:	616b      	str	r3, [r5, #20]
 800acd2:	2300      	movs	r3, #0
 800acd4:	9309      	str	r3, [sp, #36]	@ 0x24
 800acd6:	2320      	movs	r3, #32
 800acd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800acdc:	2330      	movs	r3, #48	@ 0x30
 800acde:	f04f 0901 	mov.w	r9, #1
 800ace2:	f8cd 800c 	str.w	r8, [sp, #12]
 800ace6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800ae80 <_svfiprintf_r+0x1e4>
 800acea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800acee:	4623      	mov	r3, r4
 800acf0:	469a      	mov	sl, r3
 800acf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acf6:	b10a      	cbz	r2, 800acfc <_svfiprintf_r+0x60>
 800acf8:	2a25      	cmp	r2, #37	@ 0x25
 800acfa:	d1f9      	bne.n	800acf0 <_svfiprintf_r+0x54>
 800acfc:	ebba 0b04 	subs.w	fp, sl, r4
 800ad00:	d00b      	beq.n	800ad1a <_svfiprintf_r+0x7e>
 800ad02:	465b      	mov	r3, fp
 800ad04:	4622      	mov	r2, r4
 800ad06:	4629      	mov	r1, r5
 800ad08:	4638      	mov	r0, r7
 800ad0a:	f7ff ff6b 	bl	800abe4 <__ssputs_r>
 800ad0e:	3001      	adds	r0, #1
 800ad10:	f000 80a7 	beq.w	800ae62 <_svfiprintf_r+0x1c6>
 800ad14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad16:	445a      	add	r2, fp
 800ad18:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad1a:	f89a 3000 	ldrb.w	r3, [sl]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	f000 809f 	beq.w	800ae62 <_svfiprintf_r+0x1c6>
 800ad24:	2300      	movs	r3, #0
 800ad26:	f04f 32ff 	mov.w	r2, #4294967295
 800ad2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad2e:	f10a 0a01 	add.w	sl, sl, #1
 800ad32:	9304      	str	r3, [sp, #16]
 800ad34:	9307      	str	r3, [sp, #28]
 800ad36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ad3a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad3c:	4654      	mov	r4, sl
 800ad3e:	2205      	movs	r2, #5
 800ad40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad44:	484e      	ldr	r0, [pc, #312]	@ (800ae80 <_svfiprintf_r+0x1e4>)
 800ad46:	f7fd fcba 	bl	80086be <memchr>
 800ad4a:	9a04      	ldr	r2, [sp, #16]
 800ad4c:	b9d8      	cbnz	r0, 800ad86 <_svfiprintf_r+0xea>
 800ad4e:	06d0      	lsls	r0, r2, #27
 800ad50:	bf44      	itt	mi
 800ad52:	2320      	movmi	r3, #32
 800ad54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad58:	0711      	lsls	r1, r2, #28
 800ad5a:	bf44      	itt	mi
 800ad5c:	232b      	movmi	r3, #43	@ 0x2b
 800ad5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad62:	f89a 3000 	ldrb.w	r3, [sl]
 800ad66:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad68:	d015      	beq.n	800ad96 <_svfiprintf_r+0xfa>
 800ad6a:	4654      	mov	r4, sl
 800ad6c:	2000      	movs	r0, #0
 800ad6e:	f04f 0c0a 	mov.w	ip, #10
 800ad72:	9a07      	ldr	r2, [sp, #28]
 800ad74:	4621      	mov	r1, r4
 800ad76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad7a:	3b30      	subs	r3, #48	@ 0x30
 800ad7c:	2b09      	cmp	r3, #9
 800ad7e:	d94b      	bls.n	800ae18 <_svfiprintf_r+0x17c>
 800ad80:	b1b0      	cbz	r0, 800adb0 <_svfiprintf_r+0x114>
 800ad82:	9207      	str	r2, [sp, #28]
 800ad84:	e014      	b.n	800adb0 <_svfiprintf_r+0x114>
 800ad86:	eba0 0308 	sub.w	r3, r0, r8
 800ad8a:	fa09 f303 	lsl.w	r3, r9, r3
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	46a2      	mov	sl, r4
 800ad92:	9304      	str	r3, [sp, #16]
 800ad94:	e7d2      	b.n	800ad3c <_svfiprintf_r+0xa0>
 800ad96:	9b03      	ldr	r3, [sp, #12]
 800ad98:	1d19      	adds	r1, r3, #4
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	9103      	str	r1, [sp, #12]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	bfbb      	ittet	lt
 800ada2:	425b      	neglt	r3, r3
 800ada4:	f042 0202 	orrlt.w	r2, r2, #2
 800ada8:	9307      	strge	r3, [sp, #28]
 800adaa:	9307      	strlt	r3, [sp, #28]
 800adac:	bfb8      	it	lt
 800adae:	9204      	strlt	r2, [sp, #16]
 800adb0:	7823      	ldrb	r3, [r4, #0]
 800adb2:	2b2e      	cmp	r3, #46	@ 0x2e
 800adb4:	d10a      	bne.n	800adcc <_svfiprintf_r+0x130>
 800adb6:	7863      	ldrb	r3, [r4, #1]
 800adb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800adba:	d132      	bne.n	800ae22 <_svfiprintf_r+0x186>
 800adbc:	9b03      	ldr	r3, [sp, #12]
 800adbe:	3402      	adds	r4, #2
 800adc0:	1d1a      	adds	r2, r3, #4
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	9203      	str	r2, [sp, #12]
 800adc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800adca:	9305      	str	r3, [sp, #20]
 800adcc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800ae84 <_svfiprintf_r+0x1e8>
 800add0:	2203      	movs	r2, #3
 800add2:	4650      	mov	r0, sl
 800add4:	7821      	ldrb	r1, [r4, #0]
 800add6:	f7fd fc72 	bl	80086be <memchr>
 800adda:	b138      	cbz	r0, 800adec <_svfiprintf_r+0x150>
 800addc:	2240      	movs	r2, #64	@ 0x40
 800adde:	9b04      	ldr	r3, [sp, #16]
 800ade0:	eba0 000a 	sub.w	r0, r0, sl
 800ade4:	4082      	lsls	r2, r0
 800ade6:	4313      	orrs	r3, r2
 800ade8:	3401      	adds	r4, #1
 800adea:	9304      	str	r3, [sp, #16]
 800adec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adf0:	2206      	movs	r2, #6
 800adf2:	4825      	ldr	r0, [pc, #148]	@ (800ae88 <_svfiprintf_r+0x1ec>)
 800adf4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800adf8:	f7fd fc61 	bl	80086be <memchr>
 800adfc:	2800      	cmp	r0, #0
 800adfe:	d036      	beq.n	800ae6e <_svfiprintf_r+0x1d2>
 800ae00:	4b22      	ldr	r3, [pc, #136]	@ (800ae8c <_svfiprintf_r+0x1f0>)
 800ae02:	bb1b      	cbnz	r3, 800ae4c <_svfiprintf_r+0x1b0>
 800ae04:	9b03      	ldr	r3, [sp, #12]
 800ae06:	3307      	adds	r3, #7
 800ae08:	f023 0307 	bic.w	r3, r3, #7
 800ae0c:	3308      	adds	r3, #8
 800ae0e:	9303      	str	r3, [sp, #12]
 800ae10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae12:	4433      	add	r3, r6
 800ae14:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae16:	e76a      	b.n	800acee <_svfiprintf_r+0x52>
 800ae18:	460c      	mov	r4, r1
 800ae1a:	2001      	movs	r0, #1
 800ae1c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae20:	e7a8      	b.n	800ad74 <_svfiprintf_r+0xd8>
 800ae22:	2300      	movs	r3, #0
 800ae24:	f04f 0c0a 	mov.w	ip, #10
 800ae28:	4619      	mov	r1, r3
 800ae2a:	3401      	adds	r4, #1
 800ae2c:	9305      	str	r3, [sp, #20]
 800ae2e:	4620      	mov	r0, r4
 800ae30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae34:	3a30      	subs	r2, #48	@ 0x30
 800ae36:	2a09      	cmp	r2, #9
 800ae38:	d903      	bls.n	800ae42 <_svfiprintf_r+0x1a6>
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d0c6      	beq.n	800adcc <_svfiprintf_r+0x130>
 800ae3e:	9105      	str	r1, [sp, #20]
 800ae40:	e7c4      	b.n	800adcc <_svfiprintf_r+0x130>
 800ae42:	4604      	mov	r4, r0
 800ae44:	2301      	movs	r3, #1
 800ae46:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae4a:	e7f0      	b.n	800ae2e <_svfiprintf_r+0x192>
 800ae4c:	ab03      	add	r3, sp, #12
 800ae4e:	9300      	str	r3, [sp, #0]
 800ae50:	462a      	mov	r2, r5
 800ae52:	4638      	mov	r0, r7
 800ae54:	4b0e      	ldr	r3, [pc, #56]	@ (800ae90 <_svfiprintf_r+0x1f4>)
 800ae56:	a904      	add	r1, sp, #16
 800ae58:	f7fc fbaa 	bl	80075b0 <_printf_float>
 800ae5c:	1c42      	adds	r2, r0, #1
 800ae5e:	4606      	mov	r6, r0
 800ae60:	d1d6      	bne.n	800ae10 <_svfiprintf_r+0x174>
 800ae62:	89ab      	ldrh	r3, [r5, #12]
 800ae64:	065b      	lsls	r3, r3, #25
 800ae66:	f53f af2d 	bmi.w	800acc4 <_svfiprintf_r+0x28>
 800ae6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae6c:	e72c      	b.n	800acc8 <_svfiprintf_r+0x2c>
 800ae6e:	ab03      	add	r3, sp, #12
 800ae70:	9300      	str	r3, [sp, #0]
 800ae72:	462a      	mov	r2, r5
 800ae74:	4638      	mov	r0, r7
 800ae76:	4b06      	ldr	r3, [pc, #24]	@ (800ae90 <_svfiprintf_r+0x1f4>)
 800ae78:	a904      	add	r1, sp, #16
 800ae7a:	f7fc fe37 	bl	8007aec <_printf_i>
 800ae7e:	e7ed      	b.n	800ae5c <_svfiprintf_r+0x1c0>
 800ae80:	0800c141 	.word	0x0800c141
 800ae84:	0800c147 	.word	0x0800c147
 800ae88:	0800c14b 	.word	0x0800c14b
 800ae8c:	080075b1 	.word	0x080075b1
 800ae90:	0800abe5 	.word	0x0800abe5

0800ae94 <__sfputc_r>:
 800ae94:	6893      	ldr	r3, [r2, #8]
 800ae96:	b410      	push	{r4}
 800ae98:	3b01      	subs	r3, #1
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	6093      	str	r3, [r2, #8]
 800ae9e:	da07      	bge.n	800aeb0 <__sfputc_r+0x1c>
 800aea0:	6994      	ldr	r4, [r2, #24]
 800aea2:	42a3      	cmp	r3, r4
 800aea4:	db01      	blt.n	800aeaa <__sfputc_r+0x16>
 800aea6:	290a      	cmp	r1, #10
 800aea8:	d102      	bne.n	800aeb0 <__sfputc_r+0x1c>
 800aeaa:	bc10      	pop	{r4}
 800aeac:	f7fd baeb 	b.w	8008486 <__swbuf_r>
 800aeb0:	6813      	ldr	r3, [r2, #0]
 800aeb2:	1c58      	adds	r0, r3, #1
 800aeb4:	6010      	str	r0, [r2, #0]
 800aeb6:	7019      	strb	r1, [r3, #0]
 800aeb8:	4608      	mov	r0, r1
 800aeba:	bc10      	pop	{r4}
 800aebc:	4770      	bx	lr

0800aebe <__sfputs_r>:
 800aebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aec0:	4606      	mov	r6, r0
 800aec2:	460f      	mov	r7, r1
 800aec4:	4614      	mov	r4, r2
 800aec6:	18d5      	adds	r5, r2, r3
 800aec8:	42ac      	cmp	r4, r5
 800aeca:	d101      	bne.n	800aed0 <__sfputs_r+0x12>
 800aecc:	2000      	movs	r0, #0
 800aece:	e007      	b.n	800aee0 <__sfputs_r+0x22>
 800aed0:	463a      	mov	r2, r7
 800aed2:	4630      	mov	r0, r6
 800aed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aed8:	f7ff ffdc 	bl	800ae94 <__sfputc_r>
 800aedc:	1c43      	adds	r3, r0, #1
 800aede:	d1f3      	bne.n	800aec8 <__sfputs_r+0xa>
 800aee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aee4 <_vfiprintf_r>:
 800aee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee8:	460d      	mov	r5, r1
 800aeea:	4614      	mov	r4, r2
 800aeec:	4698      	mov	r8, r3
 800aeee:	4606      	mov	r6, r0
 800aef0:	b09d      	sub	sp, #116	@ 0x74
 800aef2:	b118      	cbz	r0, 800aefc <_vfiprintf_r+0x18>
 800aef4:	6a03      	ldr	r3, [r0, #32]
 800aef6:	b90b      	cbnz	r3, 800aefc <_vfiprintf_r+0x18>
 800aef8:	f7fd f9b4 	bl	8008264 <__sinit>
 800aefc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aefe:	07d9      	lsls	r1, r3, #31
 800af00:	d405      	bmi.n	800af0e <_vfiprintf_r+0x2a>
 800af02:	89ab      	ldrh	r3, [r5, #12]
 800af04:	059a      	lsls	r2, r3, #22
 800af06:	d402      	bmi.n	800af0e <_vfiprintf_r+0x2a>
 800af08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af0a:	f7fd fbce 	bl	80086aa <__retarget_lock_acquire_recursive>
 800af0e:	89ab      	ldrh	r3, [r5, #12]
 800af10:	071b      	lsls	r3, r3, #28
 800af12:	d501      	bpl.n	800af18 <_vfiprintf_r+0x34>
 800af14:	692b      	ldr	r3, [r5, #16]
 800af16:	b99b      	cbnz	r3, 800af40 <_vfiprintf_r+0x5c>
 800af18:	4629      	mov	r1, r5
 800af1a:	4630      	mov	r0, r6
 800af1c:	f7fd faf2 	bl	8008504 <__swsetup_r>
 800af20:	b170      	cbz	r0, 800af40 <_vfiprintf_r+0x5c>
 800af22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af24:	07dc      	lsls	r4, r3, #31
 800af26:	d504      	bpl.n	800af32 <_vfiprintf_r+0x4e>
 800af28:	f04f 30ff 	mov.w	r0, #4294967295
 800af2c:	b01d      	add	sp, #116	@ 0x74
 800af2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af32:	89ab      	ldrh	r3, [r5, #12]
 800af34:	0598      	lsls	r0, r3, #22
 800af36:	d4f7      	bmi.n	800af28 <_vfiprintf_r+0x44>
 800af38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af3a:	f7fd fbb7 	bl	80086ac <__retarget_lock_release_recursive>
 800af3e:	e7f3      	b.n	800af28 <_vfiprintf_r+0x44>
 800af40:	2300      	movs	r3, #0
 800af42:	9309      	str	r3, [sp, #36]	@ 0x24
 800af44:	2320      	movs	r3, #32
 800af46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af4a:	2330      	movs	r3, #48	@ 0x30
 800af4c:	f04f 0901 	mov.w	r9, #1
 800af50:	f8cd 800c 	str.w	r8, [sp, #12]
 800af54:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b100 <_vfiprintf_r+0x21c>
 800af58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af5c:	4623      	mov	r3, r4
 800af5e:	469a      	mov	sl, r3
 800af60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af64:	b10a      	cbz	r2, 800af6a <_vfiprintf_r+0x86>
 800af66:	2a25      	cmp	r2, #37	@ 0x25
 800af68:	d1f9      	bne.n	800af5e <_vfiprintf_r+0x7a>
 800af6a:	ebba 0b04 	subs.w	fp, sl, r4
 800af6e:	d00b      	beq.n	800af88 <_vfiprintf_r+0xa4>
 800af70:	465b      	mov	r3, fp
 800af72:	4622      	mov	r2, r4
 800af74:	4629      	mov	r1, r5
 800af76:	4630      	mov	r0, r6
 800af78:	f7ff ffa1 	bl	800aebe <__sfputs_r>
 800af7c:	3001      	adds	r0, #1
 800af7e:	f000 80a7 	beq.w	800b0d0 <_vfiprintf_r+0x1ec>
 800af82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af84:	445a      	add	r2, fp
 800af86:	9209      	str	r2, [sp, #36]	@ 0x24
 800af88:	f89a 3000 	ldrb.w	r3, [sl]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f000 809f 	beq.w	800b0d0 <_vfiprintf_r+0x1ec>
 800af92:	2300      	movs	r3, #0
 800af94:	f04f 32ff 	mov.w	r2, #4294967295
 800af98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af9c:	f10a 0a01 	add.w	sl, sl, #1
 800afa0:	9304      	str	r3, [sp, #16]
 800afa2:	9307      	str	r3, [sp, #28]
 800afa4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800afa8:	931a      	str	r3, [sp, #104]	@ 0x68
 800afaa:	4654      	mov	r4, sl
 800afac:	2205      	movs	r2, #5
 800afae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afb2:	4853      	ldr	r0, [pc, #332]	@ (800b100 <_vfiprintf_r+0x21c>)
 800afb4:	f7fd fb83 	bl	80086be <memchr>
 800afb8:	9a04      	ldr	r2, [sp, #16]
 800afba:	b9d8      	cbnz	r0, 800aff4 <_vfiprintf_r+0x110>
 800afbc:	06d1      	lsls	r1, r2, #27
 800afbe:	bf44      	itt	mi
 800afc0:	2320      	movmi	r3, #32
 800afc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afc6:	0713      	lsls	r3, r2, #28
 800afc8:	bf44      	itt	mi
 800afca:	232b      	movmi	r3, #43	@ 0x2b
 800afcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afd0:	f89a 3000 	ldrb.w	r3, [sl]
 800afd4:	2b2a      	cmp	r3, #42	@ 0x2a
 800afd6:	d015      	beq.n	800b004 <_vfiprintf_r+0x120>
 800afd8:	4654      	mov	r4, sl
 800afda:	2000      	movs	r0, #0
 800afdc:	f04f 0c0a 	mov.w	ip, #10
 800afe0:	9a07      	ldr	r2, [sp, #28]
 800afe2:	4621      	mov	r1, r4
 800afe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afe8:	3b30      	subs	r3, #48	@ 0x30
 800afea:	2b09      	cmp	r3, #9
 800afec:	d94b      	bls.n	800b086 <_vfiprintf_r+0x1a2>
 800afee:	b1b0      	cbz	r0, 800b01e <_vfiprintf_r+0x13a>
 800aff0:	9207      	str	r2, [sp, #28]
 800aff2:	e014      	b.n	800b01e <_vfiprintf_r+0x13a>
 800aff4:	eba0 0308 	sub.w	r3, r0, r8
 800aff8:	fa09 f303 	lsl.w	r3, r9, r3
 800affc:	4313      	orrs	r3, r2
 800affe:	46a2      	mov	sl, r4
 800b000:	9304      	str	r3, [sp, #16]
 800b002:	e7d2      	b.n	800afaa <_vfiprintf_r+0xc6>
 800b004:	9b03      	ldr	r3, [sp, #12]
 800b006:	1d19      	adds	r1, r3, #4
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	9103      	str	r1, [sp, #12]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	bfbb      	ittet	lt
 800b010:	425b      	neglt	r3, r3
 800b012:	f042 0202 	orrlt.w	r2, r2, #2
 800b016:	9307      	strge	r3, [sp, #28]
 800b018:	9307      	strlt	r3, [sp, #28]
 800b01a:	bfb8      	it	lt
 800b01c:	9204      	strlt	r2, [sp, #16]
 800b01e:	7823      	ldrb	r3, [r4, #0]
 800b020:	2b2e      	cmp	r3, #46	@ 0x2e
 800b022:	d10a      	bne.n	800b03a <_vfiprintf_r+0x156>
 800b024:	7863      	ldrb	r3, [r4, #1]
 800b026:	2b2a      	cmp	r3, #42	@ 0x2a
 800b028:	d132      	bne.n	800b090 <_vfiprintf_r+0x1ac>
 800b02a:	9b03      	ldr	r3, [sp, #12]
 800b02c:	3402      	adds	r4, #2
 800b02e:	1d1a      	adds	r2, r3, #4
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	9203      	str	r2, [sp, #12]
 800b034:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b038:	9305      	str	r3, [sp, #20]
 800b03a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b104 <_vfiprintf_r+0x220>
 800b03e:	2203      	movs	r2, #3
 800b040:	4650      	mov	r0, sl
 800b042:	7821      	ldrb	r1, [r4, #0]
 800b044:	f7fd fb3b 	bl	80086be <memchr>
 800b048:	b138      	cbz	r0, 800b05a <_vfiprintf_r+0x176>
 800b04a:	2240      	movs	r2, #64	@ 0x40
 800b04c:	9b04      	ldr	r3, [sp, #16]
 800b04e:	eba0 000a 	sub.w	r0, r0, sl
 800b052:	4082      	lsls	r2, r0
 800b054:	4313      	orrs	r3, r2
 800b056:	3401      	adds	r4, #1
 800b058:	9304      	str	r3, [sp, #16]
 800b05a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b05e:	2206      	movs	r2, #6
 800b060:	4829      	ldr	r0, [pc, #164]	@ (800b108 <_vfiprintf_r+0x224>)
 800b062:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b066:	f7fd fb2a 	bl	80086be <memchr>
 800b06a:	2800      	cmp	r0, #0
 800b06c:	d03f      	beq.n	800b0ee <_vfiprintf_r+0x20a>
 800b06e:	4b27      	ldr	r3, [pc, #156]	@ (800b10c <_vfiprintf_r+0x228>)
 800b070:	bb1b      	cbnz	r3, 800b0ba <_vfiprintf_r+0x1d6>
 800b072:	9b03      	ldr	r3, [sp, #12]
 800b074:	3307      	adds	r3, #7
 800b076:	f023 0307 	bic.w	r3, r3, #7
 800b07a:	3308      	adds	r3, #8
 800b07c:	9303      	str	r3, [sp, #12]
 800b07e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b080:	443b      	add	r3, r7
 800b082:	9309      	str	r3, [sp, #36]	@ 0x24
 800b084:	e76a      	b.n	800af5c <_vfiprintf_r+0x78>
 800b086:	460c      	mov	r4, r1
 800b088:	2001      	movs	r0, #1
 800b08a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b08e:	e7a8      	b.n	800afe2 <_vfiprintf_r+0xfe>
 800b090:	2300      	movs	r3, #0
 800b092:	f04f 0c0a 	mov.w	ip, #10
 800b096:	4619      	mov	r1, r3
 800b098:	3401      	adds	r4, #1
 800b09a:	9305      	str	r3, [sp, #20]
 800b09c:	4620      	mov	r0, r4
 800b09e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0a2:	3a30      	subs	r2, #48	@ 0x30
 800b0a4:	2a09      	cmp	r2, #9
 800b0a6:	d903      	bls.n	800b0b0 <_vfiprintf_r+0x1cc>
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d0c6      	beq.n	800b03a <_vfiprintf_r+0x156>
 800b0ac:	9105      	str	r1, [sp, #20]
 800b0ae:	e7c4      	b.n	800b03a <_vfiprintf_r+0x156>
 800b0b0:	4604      	mov	r4, r0
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0b8:	e7f0      	b.n	800b09c <_vfiprintf_r+0x1b8>
 800b0ba:	ab03      	add	r3, sp, #12
 800b0bc:	9300      	str	r3, [sp, #0]
 800b0be:	462a      	mov	r2, r5
 800b0c0:	4630      	mov	r0, r6
 800b0c2:	4b13      	ldr	r3, [pc, #76]	@ (800b110 <_vfiprintf_r+0x22c>)
 800b0c4:	a904      	add	r1, sp, #16
 800b0c6:	f7fc fa73 	bl	80075b0 <_printf_float>
 800b0ca:	4607      	mov	r7, r0
 800b0cc:	1c78      	adds	r0, r7, #1
 800b0ce:	d1d6      	bne.n	800b07e <_vfiprintf_r+0x19a>
 800b0d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0d2:	07d9      	lsls	r1, r3, #31
 800b0d4:	d405      	bmi.n	800b0e2 <_vfiprintf_r+0x1fe>
 800b0d6:	89ab      	ldrh	r3, [r5, #12]
 800b0d8:	059a      	lsls	r2, r3, #22
 800b0da:	d402      	bmi.n	800b0e2 <_vfiprintf_r+0x1fe>
 800b0dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0de:	f7fd fae5 	bl	80086ac <__retarget_lock_release_recursive>
 800b0e2:	89ab      	ldrh	r3, [r5, #12]
 800b0e4:	065b      	lsls	r3, r3, #25
 800b0e6:	f53f af1f 	bmi.w	800af28 <_vfiprintf_r+0x44>
 800b0ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0ec:	e71e      	b.n	800af2c <_vfiprintf_r+0x48>
 800b0ee:	ab03      	add	r3, sp, #12
 800b0f0:	9300      	str	r3, [sp, #0]
 800b0f2:	462a      	mov	r2, r5
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	4b06      	ldr	r3, [pc, #24]	@ (800b110 <_vfiprintf_r+0x22c>)
 800b0f8:	a904      	add	r1, sp, #16
 800b0fa:	f7fc fcf7 	bl	8007aec <_printf_i>
 800b0fe:	e7e4      	b.n	800b0ca <_vfiprintf_r+0x1e6>
 800b100:	0800c141 	.word	0x0800c141
 800b104:	0800c147 	.word	0x0800c147
 800b108:	0800c14b 	.word	0x0800c14b
 800b10c:	080075b1 	.word	0x080075b1
 800b110:	0800aebf 	.word	0x0800aebf

0800b114 <__sflush_r>:
 800b114:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b11a:	0716      	lsls	r6, r2, #28
 800b11c:	4605      	mov	r5, r0
 800b11e:	460c      	mov	r4, r1
 800b120:	d454      	bmi.n	800b1cc <__sflush_r+0xb8>
 800b122:	684b      	ldr	r3, [r1, #4]
 800b124:	2b00      	cmp	r3, #0
 800b126:	dc02      	bgt.n	800b12e <__sflush_r+0x1a>
 800b128:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	dd48      	ble.n	800b1c0 <__sflush_r+0xac>
 800b12e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b130:	2e00      	cmp	r6, #0
 800b132:	d045      	beq.n	800b1c0 <__sflush_r+0xac>
 800b134:	2300      	movs	r3, #0
 800b136:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b13a:	682f      	ldr	r7, [r5, #0]
 800b13c:	6a21      	ldr	r1, [r4, #32]
 800b13e:	602b      	str	r3, [r5, #0]
 800b140:	d030      	beq.n	800b1a4 <__sflush_r+0x90>
 800b142:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b144:	89a3      	ldrh	r3, [r4, #12]
 800b146:	0759      	lsls	r1, r3, #29
 800b148:	d505      	bpl.n	800b156 <__sflush_r+0x42>
 800b14a:	6863      	ldr	r3, [r4, #4]
 800b14c:	1ad2      	subs	r2, r2, r3
 800b14e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b150:	b10b      	cbz	r3, 800b156 <__sflush_r+0x42>
 800b152:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b154:	1ad2      	subs	r2, r2, r3
 800b156:	2300      	movs	r3, #0
 800b158:	4628      	mov	r0, r5
 800b15a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b15c:	6a21      	ldr	r1, [r4, #32]
 800b15e:	47b0      	blx	r6
 800b160:	1c43      	adds	r3, r0, #1
 800b162:	89a3      	ldrh	r3, [r4, #12]
 800b164:	d106      	bne.n	800b174 <__sflush_r+0x60>
 800b166:	6829      	ldr	r1, [r5, #0]
 800b168:	291d      	cmp	r1, #29
 800b16a:	d82b      	bhi.n	800b1c4 <__sflush_r+0xb0>
 800b16c:	4a28      	ldr	r2, [pc, #160]	@ (800b210 <__sflush_r+0xfc>)
 800b16e:	410a      	asrs	r2, r1
 800b170:	07d6      	lsls	r6, r2, #31
 800b172:	d427      	bmi.n	800b1c4 <__sflush_r+0xb0>
 800b174:	2200      	movs	r2, #0
 800b176:	6062      	str	r2, [r4, #4]
 800b178:	6922      	ldr	r2, [r4, #16]
 800b17a:	04d9      	lsls	r1, r3, #19
 800b17c:	6022      	str	r2, [r4, #0]
 800b17e:	d504      	bpl.n	800b18a <__sflush_r+0x76>
 800b180:	1c42      	adds	r2, r0, #1
 800b182:	d101      	bne.n	800b188 <__sflush_r+0x74>
 800b184:	682b      	ldr	r3, [r5, #0]
 800b186:	b903      	cbnz	r3, 800b18a <__sflush_r+0x76>
 800b188:	6560      	str	r0, [r4, #84]	@ 0x54
 800b18a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b18c:	602f      	str	r7, [r5, #0]
 800b18e:	b1b9      	cbz	r1, 800b1c0 <__sflush_r+0xac>
 800b190:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b194:	4299      	cmp	r1, r3
 800b196:	d002      	beq.n	800b19e <__sflush_r+0x8a>
 800b198:	4628      	mov	r0, r5
 800b19a:	f7fe f901 	bl	80093a0 <_free_r>
 800b19e:	2300      	movs	r3, #0
 800b1a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b1a2:	e00d      	b.n	800b1c0 <__sflush_r+0xac>
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	4628      	mov	r0, r5
 800b1a8:	47b0      	blx	r6
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	1c50      	adds	r0, r2, #1
 800b1ae:	d1c9      	bne.n	800b144 <__sflush_r+0x30>
 800b1b0:	682b      	ldr	r3, [r5, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d0c6      	beq.n	800b144 <__sflush_r+0x30>
 800b1b6:	2b1d      	cmp	r3, #29
 800b1b8:	d001      	beq.n	800b1be <__sflush_r+0xaa>
 800b1ba:	2b16      	cmp	r3, #22
 800b1bc:	d11d      	bne.n	800b1fa <__sflush_r+0xe6>
 800b1be:	602f      	str	r7, [r5, #0]
 800b1c0:	2000      	movs	r0, #0
 800b1c2:	e021      	b.n	800b208 <__sflush_r+0xf4>
 800b1c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1c8:	b21b      	sxth	r3, r3
 800b1ca:	e01a      	b.n	800b202 <__sflush_r+0xee>
 800b1cc:	690f      	ldr	r7, [r1, #16]
 800b1ce:	2f00      	cmp	r7, #0
 800b1d0:	d0f6      	beq.n	800b1c0 <__sflush_r+0xac>
 800b1d2:	0793      	lsls	r3, r2, #30
 800b1d4:	bf18      	it	ne
 800b1d6:	2300      	movne	r3, #0
 800b1d8:	680e      	ldr	r6, [r1, #0]
 800b1da:	bf08      	it	eq
 800b1dc:	694b      	ldreq	r3, [r1, #20]
 800b1de:	1bf6      	subs	r6, r6, r7
 800b1e0:	600f      	str	r7, [r1, #0]
 800b1e2:	608b      	str	r3, [r1, #8]
 800b1e4:	2e00      	cmp	r6, #0
 800b1e6:	ddeb      	ble.n	800b1c0 <__sflush_r+0xac>
 800b1e8:	4633      	mov	r3, r6
 800b1ea:	463a      	mov	r2, r7
 800b1ec:	4628      	mov	r0, r5
 800b1ee:	6a21      	ldr	r1, [r4, #32]
 800b1f0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b1f4:	47e0      	blx	ip
 800b1f6:	2800      	cmp	r0, #0
 800b1f8:	dc07      	bgt.n	800b20a <__sflush_r+0xf6>
 800b1fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b202:	f04f 30ff 	mov.w	r0, #4294967295
 800b206:	81a3      	strh	r3, [r4, #12]
 800b208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b20a:	4407      	add	r7, r0
 800b20c:	1a36      	subs	r6, r6, r0
 800b20e:	e7e9      	b.n	800b1e4 <__sflush_r+0xd0>
 800b210:	dfbffffe 	.word	0xdfbffffe

0800b214 <_fflush_r>:
 800b214:	b538      	push	{r3, r4, r5, lr}
 800b216:	690b      	ldr	r3, [r1, #16]
 800b218:	4605      	mov	r5, r0
 800b21a:	460c      	mov	r4, r1
 800b21c:	b913      	cbnz	r3, 800b224 <_fflush_r+0x10>
 800b21e:	2500      	movs	r5, #0
 800b220:	4628      	mov	r0, r5
 800b222:	bd38      	pop	{r3, r4, r5, pc}
 800b224:	b118      	cbz	r0, 800b22e <_fflush_r+0x1a>
 800b226:	6a03      	ldr	r3, [r0, #32]
 800b228:	b90b      	cbnz	r3, 800b22e <_fflush_r+0x1a>
 800b22a:	f7fd f81b 	bl	8008264 <__sinit>
 800b22e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d0f3      	beq.n	800b21e <_fflush_r+0xa>
 800b236:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b238:	07d0      	lsls	r0, r2, #31
 800b23a:	d404      	bmi.n	800b246 <_fflush_r+0x32>
 800b23c:	0599      	lsls	r1, r3, #22
 800b23e:	d402      	bmi.n	800b246 <_fflush_r+0x32>
 800b240:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b242:	f7fd fa32 	bl	80086aa <__retarget_lock_acquire_recursive>
 800b246:	4628      	mov	r0, r5
 800b248:	4621      	mov	r1, r4
 800b24a:	f7ff ff63 	bl	800b114 <__sflush_r>
 800b24e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b250:	4605      	mov	r5, r0
 800b252:	07da      	lsls	r2, r3, #31
 800b254:	d4e4      	bmi.n	800b220 <_fflush_r+0xc>
 800b256:	89a3      	ldrh	r3, [r4, #12]
 800b258:	059b      	lsls	r3, r3, #22
 800b25a:	d4e1      	bmi.n	800b220 <_fflush_r+0xc>
 800b25c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b25e:	f7fd fa25 	bl	80086ac <__retarget_lock_release_recursive>
 800b262:	e7dd      	b.n	800b220 <_fflush_r+0xc>

0800b264 <__swhatbuf_r>:
 800b264:	b570      	push	{r4, r5, r6, lr}
 800b266:	460c      	mov	r4, r1
 800b268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b26c:	4615      	mov	r5, r2
 800b26e:	2900      	cmp	r1, #0
 800b270:	461e      	mov	r6, r3
 800b272:	b096      	sub	sp, #88	@ 0x58
 800b274:	da0c      	bge.n	800b290 <__swhatbuf_r+0x2c>
 800b276:	89a3      	ldrh	r3, [r4, #12]
 800b278:	2100      	movs	r1, #0
 800b27a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b27e:	bf14      	ite	ne
 800b280:	2340      	movne	r3, #64	@ 0x40
 800b282:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b286:	2000      	movs	r0, #0
 800b288:	6031      	str	r1, [r6, #0]
 800b28a:	602b      	str	r3, [r5, #0]
 800b28c:	b016      	add	sp, #88	@ 0x58
 800b28e:	bd70      	pop	{r4, r5, r6, pc}
 800b290:	466a      	mov	r2, sp
 800b292:	f000 f8a9 	bl	800b3e8 <_fstat_r>
 800b296:	2800      	cmp	r0, #0
 800b298:	dbed      	blt.n	800b276 <__swhatbuf_r+0x12>
 800b29a:	9901      	ldr	r1, [sp, #4]
 800b29c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b2a0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b2a4:	4259      	negs	r1, r3
 800b2a6:	4159      	adcs	r1, r3
 800b2a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b2ac:	e7eb      	b.n	800b286 <__swhatbuf_r+0x22>

0800b2ae <__smakebuf_r>:
 800b2ae:	898b      	ldrh	r3, [r1, #12]
 800b2b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2b2:	079d      	lsls	r5, r3, #30
 800b2b4:	4606      	mov	r6, r0
 800b2b6:	460c      	mov	r4, r1
 800b2b8:	d507      	bpl.n	800b2ca <__smakebuf_r+0x1c>
 800b2ba:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b2be:	6023      	str	r3, [r4, #0]
 800b2c0:	6123      	str	r3, [r4, #16]
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	6163      	str	r3, [r4, #20]
 800b2c6:	b003      	add	sp, #12
 800b2c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2ca:	466a      	mov	r2, sp
 800b2cc:	ab01      	add	r3, sp, #4
 800b2ce:	f7ff ffc9 	bl	800b264 <__swhatbuf_r>
 800b2d2:	9f00      	ldr	r7, [sp, #0]
 800b2d4:	4605      	mov	r5, r0
 800b2d6:	4639      	mov	r1, r7
 800b2d8:	4630      	mov	r0, r6
 800b2da:	f7fe f8d3 	bl	8009484 <_malloc_r>
 800b2de:	b948      	cbnz	r0, 800b2f4 <__smakebuf_r+0x46>
 800b2e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2e4:	059a      	lsls	r2, r3, #22
 800b2e6:	d4ee      	bmi.n	800b2c6 <__smakebuf_r+0x18>
 800b2e8:	f023 0303 	bic.w	r3, r3, #3
 800b2ec:	f043 0302 	orr.w	r3, r3, #2
 800b2f0:	81a3      	strh	r3, [r4, #12]
 800b2f2:	e7e2      	b.n	800b2ba <__smakebuf_r+0xc>
 800b2f4:	89a3      	ldrh	r3, [r4, #12]
 800b2f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b2fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2fe:	81a3      	strh	r3, [r4, #12]
 800b300:	9b01      	ldr	r3, [sp, #4]
 800b302:	6020      	str	r0, [r4, #0]
 800b304:	b15b      	cbz	r3, 800b31e <__smakebuf_r+0x70>
 800b306:	4630      	mov	r0, r6
 800b308:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b30c:	f000 f87e 	bl	800b40c <_isatty_r>
 800b310:	b128      	cbz	r0, 800b31e <__smakebuf_r+0x70>
 800b312:	89a3      	ldrh	r3, [r4, #12]
 800b314:	f023 0303 	bic.w	r3, r3, #3
 800b318:	f043 0301 	orr.w	r3, r3, #1
 800b31c:	81a3      	strh	r3, [r4, #12]
 800b31e:	89a3      	ldrh	r3, [r4, #12]
 800b320:	431d      	orrs	r5, r3
 800b322:	81a5      	strh	r5, [r4, #12]
 800b324:	e7cf      	b.n	800b2c6 <__smakebuf_r+0x18>

0800b326 <_putc_r>:
 800b326:	b570      	push	{r4, r5, r6, lr}
 800b328:	460d      	mov	r5, r1
 800b32a:	4614      	mov	r4, r2
 800b32c:	4606      	mov	r6, r0
 800b32e:	b118      	cbz	r0, 800b338 <_putc_r+0x12>
 800b330:	6a03      	ldr	r3, [r0, #32]
 800b332:	b90b      	cbnz	r3, 800b338 <_putc_r+0x12>
 800b334:	f7fc ff96 	bl	8008264 <__sinit>
 800b338:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b33a:	07d8      	lsls	r0, r3, #31
 800b33c:	d405      	bmi.n	800b34a <_putc_r+0x24>
 800b33e:	89a3      	ldrh	r3, [r4, #12]
 800b340:	0599      	lsls	r1, r3, #22
 800b342:	d402      	bmi.n	800b34a <_putc_r+0x24>
 800b344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b346:	f7fd f9b0 	bl	80086aa <__retarget_lock_acquire_recursive>
 800b34a:	68a3      	ldr	r3, [r4, #8]
 800b34c:	3b01      	subs	r3, #1
 800b34e:	2b00      	cmp	r3, #0
 800b350:	60a3      	str	r3, [r4, #8]
 800b352:	da05      	bge.n	800b360 <_putc_r+0x3a>
 800b354:	69a2      	ldr	r2, [r4, #24]
 800b356:	4293      	cmp	r3, r2
 800b358:	db12      	blt.n	800b380 <_putc_r+0x5a>
 800b35a:	b2eb      	uxtb	r3, r5
 800b35c:	2b0a      	cmp	r3, #10
 800b35e:	d00f      	beq.n	800b380 <_putc_r+0x5a>
 800b360:	6823      	ldr	r3, [r4, #0]
 800b362:	1c5a      	adds	r2, r3, #1
 800b364:	6022      	str	r2, [r4, #0]
 800b366:	701d      	strb	r5, [r3, #0]
 800b368:	b2ed      	uxtb	r5, r5
 800b36a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b36c:	07da      	lsls	r2, r3, #31
 800b36e:	d405      	bmi.n	800b37c <_putc_r+0x56>
 800b370:	89a3      	ldrh	r3, [r4, #12]
 800b372:	059b      	lsls	r3, r3, #22
 800b374:	d402      	bmi.n	800b37c <_putc_r+0x56>
 800b376:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b378:	f7fd f998 	bl	80086ac <__retarget_lock_release_recursive>
 800b37c:	4628      	mov	r0, r5
 800b37e:	bd70      	pop	{r4, r5, r6, pc}
 800b380:	4629      	mov	r1, r5
 800b382:	4622      	mov	r2, r4
 800b384:	4630      	mov	r0, r6
 800b386:	f7fd f87e 	bl	8008486 <__swbuf_r>
 800b38a:	4605      	mov	r5, r0
 800b38c:	e7ed      	b.n	800b36a <_putc_r+0x44>

0800b38e <memmove>:
 800b38e:	4288      	cmp	r0, r1
 800b390:	b510      	push	{r4, lr}
 800b392:	eb01 0402 	add.w	r4, r1, r2
 800b396:	d902      	bls.n	800b39e <memmove+0x10>
 800b398:	4284      	cmp	r4, r0
 800b39a:	4623      	mov	r3, r4
 800b39c:	d807      	bhi.n	800b3ae <memmove+0x20>
 800b39e:	1e43      	subs	r3, r0, #1
 800b3a0:	42a1      	cmp	r1, r4
 800b3a2:	d008      	beq.n	800b3b6 <memmove+0x28>
 800b3a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3ac:	e7f8      	b.n	800b3a0 <memmove+0x12>
 800b3ae:	4601      	mov	r1, r0
 800b3b0:	4402      	add	r2, r0
 800b3b2:	428a      	cmp	r2, r1
 800b3b4:	d100      	bne.n	800b3b8 <memmove+0x2a>
 800b3b6:	bd10      	pop	{r4, pc}
 800b3b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b3bc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b3c0:	e7f7      	b.n	800b3b2 <memmove+0x24>

0800b3c2 <strncmp>:
 800b3c2:	b510      	push	{r4, lr}
 800b3c4:	b16a      	cbz	r2, 800b3e2 <strncmp+0x20>
 800b3c6:	3901      	subs	r1, #1
 800b3c8:	1884      	adds	r4, r0, r2
 800b3ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d103      	bne.n	800b3de <strncmp+0x1c>
 800b3d6:	42a0      	cmp	r0, r4
 800b3d8:	d001      	beq.n	800b3de <strncmp+0x1c>
 800b3da:	2a00      	cmp	r2, #0
 800b3dc:	d1f5      	bne.n	800b3ca <strncmp+0x8>
 800b3de:	1ad0      	subs	r0, r2, r3
 800b3e0:	bd10      	pop	{r4, pc}
 800b3e2:	4610      	mov	r0, r2
 800b3e4:	e7fc      	b.n	800b3e0 <strncmp+0x1e>
	...

0800b3e8 <_fstat_r>:
 800b3e8:	b538      	push	{r3, r4, r5, lr}
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	4d06      	ldr	r5, [pc, #24]	@ (800b408 <_fstat_r+0x20>)
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	4608      	mov	r0, r1
 800b3f2:	4611      	mov	r1, r2
 800b3f4:	602b      	str	r3, [r5, #0]
 800b3f6:	f7f6 fe69 	bl	80020cc <_fstat>
 800b3fa:	1c43      	adds	r3, r0, #1
 800b3fc:	d102      	bne.n	800b404 <_fstat_r+0x1c>
 800b3fe:	682b      	ldr	r3, [r5, #0]
 800b400:	b103      	cbz	r3, 800b404 <_fstat_r+0x1c>
 800b402:	6023      	str	r3, [r4, #0]
 800b404:	bd38      	pop	{r3, r4, r5, pc}
 800b406:	bf00      	nop
 800b408:	2000266c 	.word	0x2000266c

0800b40c <_isatty_r>:
 800b40c:	b538      	push	{r3, r4, r5, lr}
 800b40e:	2300      	movs	r3, #0
 800b410:	4d05      	ldr	r5, [pc, #20]	@ (800b428 <_isatty_r+0x1c>)
 800b412:	4604      	mov	r4, r0
 800b414:	4608      	mov	r0, r1
 800b416:	602b      	str	r3, [r5, #0]
 800b418:	f7f6 fe67 	bl	80020ea <_isatty>
 800b41c:	1c43      	adds	r3, r0, #1
 800b41e:	d102      	bne.n	800b426 <_isatty_r+0x1a>
 800b420:	682b      	ldr	r3, [r5, #0]
 800b422:	b103      	cbz	r3, 800b426 <_isatty_r+0x1a>
 800b424:	6023      	str	r3, [r4, #0]
 800b426:	bd38      	pop	{r3, r4, r5, pc}
 800b428:	2000266c 	.word	0x2000266c

0800b42c <_sbrk_r>:
 800b42c:	b538      	push	{r3, r4, r5, lr}
 800b42e:	2300      	movs	r3, #0
 800b430:	4d05      	ldr	r5, [pc, #20]	@ (800b448 <_sbrk_r+0x1c>)
 800b432:	4604      	mov	r4, r0
 800b434:	4608      	mov	r0, r1
 800b436:	602b      	str	r3, [r5, #0]
 800b438:	f7f6 fe6e 	bl	8002118 <_sbrk>
 800b43c:	1c43      	adds	r3, r0, #1
 800b43e:	d102      	bne.n	800b446 <_sbrk_r+0x1a>
 800b440:	682b      	ldr	r3, [r5, #0]
 800b442:	b103      	cbz	r3, 800b446 <_sbrk_r+0x1a>
 800b444:	6023      	str	r3, [r4, #0]
 800b446:	bd38      	pop	{r3, r4, r5, pc}
 800b448:	2000266c 	.word	0x2000266c

0800b44c <nan>:
 800b44c:	2000      	movs	r0, #0
 800b44e:	4901      	ldr	r1, [pc, #4]	@ (800b454 <nan+0x8>)
 800b450:	4770      	bx	lr
 800b452:	bf00      	nop
 800b454:	7ff80000 	.word	0x7ff80000

0800b458 <__assert_func>:
 800b458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b45a:	4614      	mov	r4, r2
 800b45c:	461a      	mov	r2, r3
 800b45e:	4b09      	ldr	r3, [pc, #36]	@ (800b484 <__assert_func+0x2c>)
 800b460:	4605      	mov	r5, r0
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	68d8      	ldr	r0, [r3, #12]
 800b466:	b954      	cbnz	r4, 800b47e <__assert_func+0x26>
 800b468:	4b07      	ldr	r3, [pc, #28]	@ (800b488 <__assert_func+0x30>)
 800b46a:	461c      	mov	r4, r3
 800b46c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b470:	9100      	str	r1, [sp, #0]
 800b472:	462b      	mov	r3, r5
 800b474:	4905      	ldr	r1, [pc, #20]	@ (800b48c <__assert_func+0x34>)
 800b476:	f000 fba7 	bl	800bbc8 <fiprintf>
 800b47a:	f000 fbb7 	bl	800bbec <abort>
 800b47e:	4b04      	ldr	r3, [pc, #16]	@ (800b490 <__assert_func+0x38>)
 800b480:	e7f4      	b.n	800b46c <__assert_func+0x14>
 800b482:	bf00      	nop
 800b484:	2000001c 	.word	0x2000001c
 800b488:	0800c195 	.word	0x0800c195
 800b48c:	0800c167 	.word	0x0800c167
 800b490:	0800c15a 	.word	0x0800c15a

0800b494 <_calloc_r>:
 800b494:	b570      	push	{r4, r5, r6, lr}
 800b496:	fba1 5402 	umull	r5, r4, r1, r2
 800b49a:	b93c      	cbnz	r4, 800b4ac <_calloc_r+0x18>
 800b49c:	4629      	mov	r1, r5
 800b49e:	f7fd fff1 	bl	8009484 <_malloc_r>
 800b4a2:	4606      	mov	r6, r0
 800b4a4:	b928      	cbnz	r0, 800b4b2 <_calloc_r+0x1e>
 800b4a6:	2600      	movs	r6, #0
 800b4a8:	4630      	mov	r0, r6
 800b4aa:	bd70      	pop	{r4, r5, r6, pc}
 800b4ac:	220c      	movs	r2, #12
 800b4ae:	6002      	str	r2, [r0, #0]
 800b4b0:	e7f9      	b.n	800b4a6 <_calloc_r+0x12>
 800b4b2:	462a      	mov	r2, r5
 800b4b4:	4621      	mov	r1, r4
 800b4b6:	f7fd f87b 	bl	80085b0 <memset>
 800b4ba:	e7f5      	b.n	800b4a8 <_calloc_r+0x14>

0800b4bc <rshift>:
 800b4bc:	6903      	ldr	r3, [r0, #16]
 800b4be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b4c2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b4c6:	f100 0414 	add.w	r4, r0, #20
 800b4ca:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b4ce:	dd46      	ble.n	800b55e <rshift+0xa2>
 800b4d0:	f011 011f 	ands.w	r1, r1, #31
 800b4d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b4d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b4dc:	d10c      	bne.n	800b4f8 <rshift+0x3c>
 800b4de:	4629      	mov	r1, r5
 800b4e0:	f100 0710 	add.w	r7, r0, #16
 800b4e4:	42b1      	cmp	r1, r6
 800b4e6:	d335      	bcc.n	800b554 <rshift+0x98>
 800b4e8:	1a9b      	subs	r3, r3, r2
 800b4ea:	009b      	lsls	r3, r3, #2
 800b4ec:	1eea      	subs	r2, r5, #3
 800b4ee:	4296      	cmp	r6, r2
 800b4f0:	bf38      	it	cc
 800b4f2:	2300      	movcc	r3, #0
 800b4f4:	4423      	add	r3, r4
 800b4f6:	e015      	b.n	800b524 <rshift+0x68>
 800b4f8:	46a1      	mov	r9, r4
 800b4fa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b4fe:	f1c1 0820 	rsb	r8, r1, #32
 800b502:	40cf      	lsrs	r7, r1
 800b504:	f105 0e04 	add.w	lr, r5, #4
 800b508:	4576      	cmp	r6, lr
 800b50a:	46f4      	mov	ip, lr
 800b50c:	d816      	bhi.n	800b53c <rshift+0x80>
 800b50e:	1a9a      	subs	r2, r3, r2
 800b510:	0092      	lsls	r2, r2, #2
 800b512:	3a04      	subs	r2, #4
 800b514:	3501      	adds	r5, #1
 800b516:	42ae      	cmp	r6, r5
 800b518:	bf38      	it	cc
 800b51a:	2200      	movcc	r2, #0
 800b51c:	18a3      	adds	r3, r4, r2
 800b51e:	50a7      	str	r7, [r4, r2]
 800b520:	b107      	cbz	r7, 800b524 <rshift+0x68>
 800b522:	3304      	adds	r3, #4
 800b524:	42a3      	cmp	r3, r4
 800b526:	eba3 0204 	sub.w	r2, r3, r4
 800b52a:	bf08      	it	eq
 800b52c:	2300      	moveq	r3, #0
 800b52e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b532:	6102      	str	r2, [r0, #16]
 800b534:	bf08      	it	eq
 800b536:	6143      	streq	r3, [r0, #20]
 800b538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b53c:	f8dc c000 	ldr.w	ip, [ip]
 800b540:	fa0c fc08 	lsl.w	ip, ip, r8
 800b544:	ea4c 0707 	orr.w	r7, ip, r7
 800b548:	f849 7b04 	str.w	r7, [r9], #4
 800b54c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b550:	40cf      	lsrs	r7, r1
 800b552:	e7d9      	b.n	800b508 <rshift+0x4c>
 800b554:	f851 cb04 	ldr.w	ip, [r1], #4
 800b558:	f847 cf04 	str.w	ip, [r7, #4]!
 800b55c:	e7c2      	b.n	800b4e4 <rshift+0x28>
 800b55e:	4623      	mov	r3, r4
 800b560:	e7e0      	b.n	800b524 <rshift+0x68>

0800b562 <__hexdig_fun>:
 800b562:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b566:	2b09      	cmp	r3, #9
 800b568:	d802      	bhi.n	800b570 <__hexdig_fun+0xe>
 800b56a:	3820      	subs	r0, #32
 800b56c:	b2c0      	uxtb	r0, r0
 800b56e:	4770      	bx	lr
 800b570:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b574:	2b05      	cmp	r3, #5
 800b576:	d801      	bhi.n	800b57c <__hexdig_fun+0x1a>
 800b578:	3847      	subs	r0, #71	@ 0x47
 800b57a:	e7f7      	b.n	800b56c <__hexdig_fun+0xa>
 800b57c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b580:	2b05      	cmp	r3, #5
 800b582:	d801      	bhi.n	800b588 <__hexdig_fun+0x26>
 800b584:	3827      	subs	r0, #39	@ 0x27
 800b586:	e7f1      	b.n	800b56c <__hexdig_fun+0xa>
 800b588:	2000      	movs	r0, #0
 800b58a:	4770      	bx	lr

0800b58c <__gethex>:
 800b58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b590:	468a      	mov	sl, r1
 800b592:	4690      	mov	r8, r2
 800b594:	b085      	sub	sp, #20
 800b596:	9302      	str	r3, [sp, #8]
 800b598:	680b      	ldr	r3, [r1, #0]
 800b59a:	9001      	str	r0, [sp, #4]
 800b59c:	1c9c      	adds	r4, r3, #2
 800b59e:	46a1      	mov	r9, r4
 800b5a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b5a4:	2830      	cmp	r0, #48	@ 0x30
 800b5a6:	d0fa      	beq.n	800b59e <__gethex+0x12>
 800b5a8:	eba9 0303 	sub.w	r3, r9, r3
 800b5ac:	f1a3 0b02 	sub.w	fp, r3, #2
 800b5b0:	f7ff ffd7 	bl	800b562 <__hexdig_fun>
 800b5b4:	4605      	mov	r5, r0
 800b5b6:	2800      	cmp	r0, #0
 800b5b8:	d168      	bne.n	800b68c <__gethex+0x100>
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	4648      	mov	r0, r9
 800b5be:	499f      	ldr	r1, [pc, #636]	@ (800b83c <__gethex+0x2b0>)
 800b5c0:	f7ff feff 	bl	800b3c2 <strncmp>
 800b5c4:	4607      	mov	r7, r0
 800b5c6:	2800      	cmp	r0, #0
 800b5c8:	d167      	bne.n	800b69a <__gethex+0x10e>
 800b5ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b5ce:	4626      	mov	r6, r4
 800b5d0:	f7ff ffc7 	bl	800b562 <__hexdig_fun>
 800b5d4:	2800      	cmp	r0, #0
 800b5d6:	d062      	beq.n	800b69e <__gethex+0x112>
 800b5d8:	4623      	mov	r3, r4
 800b5da:	7818      	ldrb	r0, [r3, #0]
 800b5dc:	4699      	mov	r9, r3
 800b5de:	2830      	cmp	r0, #48	@ 0x30
 800b5e0:	f103 0301 	add.w	r3, r3, #1
 800b5e4:	d0f9      	beq.n	800b5da <__gethex+0x4e>
 800b5e6:	f7ff ffbc 	bl	800b562 <__hexdig_fun>
 800b5ea:	fab0 f580 	clz	r5, r0
 800b5ee:	f04f 0b01 	mov.w	fp, #1
 800b5f2:	096d      	lsrs	r5, r5, #5
 800b5f4:	464a      	mov	r2, r9
 800b5f6:	4616      	mov	r6, r2
 800b5f8:	7830      	ldrb	r0, [r6, #0]
 800b5fa:	3201      	adds	r2, #1
 800b5fc:	f7ff ffb1 	bl	800b562 <__hexdig_fun>
 800b600:	2800      	cmp	r0, #0
 800b602:	d1f8      	bne.n	800b5f6 <__gethex+0x6a>
 800b604:	2201      	movs	r2, #1
 800b606:	4630      	mov	r0, r6
 800b608:	498c      	ldr	r1, [pc, #560]	@ (800b83c <__gethex+0x2b0>)
 800b60a:	f7ff feda 	bl	800b3c2 <strncmp>
 800b60e:	2800      	cmp	r0, #0
 800b610:	d13f      	bne.n	800b692 <__gethex+0x106>
 800b612:	b944      	cbnz	r4, 800b626 <__gethex+0x9a>
 800b614:	1c74      	adds	r4, r6, #1
 800b616:	4622      	mov	r2, r4
 800b618:	4616      	mov	r6, r2
 800b61a:	7830      	ldrb	r0, [r6, #0]
 800b61c:	3201      	adds	r2, #1
 800b61e:	f7ff ffa0 	bl	800b562 <__hexdig_fun>
 800b622:	2800      	cmp	r0, #0
 800b624:	d1f8      	bne.n	800b618 <__gethex+0x8c>
 800b626:	1ba4      	subs	r4, r4, r6
 800b628:	00a7      	lsls	r7, r4, #2
 800b62a:	7833      	ldrb	r3, [r6, #0]
 800b62c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b630:	2b50      	cmp	r3, #80	@ 0x50
 800b632:	d13e      	bne.n	800b6b2 <__gethex+0x126>
 800b634:	7873      	ldrb	r3, [r6, #1]
 800b636:	2b2b      	cmp	r3, #43	@ 0x2b
 800b638:	d033      	beq.n	800b6a2 <__gethex+0x116>
 800b63a:	2b2d      	cmp	r3, #45	@ 0x2d
 800b63c:	d034      	beq.n	800b6a8 <__gethex+0x11c>
 800b63e:	2400      	movs	r4, #0
 800b640:	1c71      	adds	r1, r6, #1
 800b642:	7808      	ldrb	r0, [r1, #0]
 800b644:	f7ff ff8d 	bl	800b562 <__hexdig_fun>
 800b648:	1e43      	subs	r3, r0, #1
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	2b18      	cmp	r3, #24
 800b64e:	d830      	bhi.n	800b6b2 <__gethex+0x126>
 800b650:	f1a0 0210 	sub.w	r2, r0, #16
 800b654:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b658:	f7ff ff83 	bl	800b562 <__hexdig_fun>
 800b65c:	f100 3cff 	add.w	ip, r0, #4294967295
 800b660:	fa5f fc8c 	uxtb.w	ip, ip
 800b664:	f1bc 0f18 	cmp.w	ip, #24
 800b668:	f04f 030a 	mov.w	r3, #10
 800b66c:	d91e      	bls.n	800b6ac <__gethex+0x120>
 800b66e:	b104      	cbz	r4, 800b672 <__gethex+0xe6>
 800b670:	4252      	negs	r2, r2
 800b672:	4417      	add	r7, r2
 800b674:	f8ca 1000 	str.w	r1, [sl]
 800b678:	b1ed      	cbz	r5, 800b6b6 <__gethex+0x12a>
 800b67a:	f1bb 0f00 	cmp.w	fp, #0
 800b67e:	bf0c      	ite	eq
 800b680:	2506      	moveq	r5, #6
 800b682:	2500      	movne	r5, #0
 800b684:	4628      	mov	r0, r5
 800b686:	b005      	add	sp, #20
 800b688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b68c:	2500      	movs	r5, #0
 800b68e:	462c      	mov	r4, r5
 800b690:	e7b0      	b.n	800b5f4 <__gethex+0x68>
 800b692:	2c00      	cmp	r4, #0
 800b694:	d1c7      	bne.n	800b626 <__gethex+0x9a>
 800b696:	4627      	mov	r7, r4
 800b698:	e7c7      	b.n	800b62a <__gethex+0x9e>
 800b69a:	464e      	mov	r6, r9
 800b69c:	462f      	mov	r7, r5
 800b69e:	2501      	movs	r5, #1
 800b6a0:	e7c3      	b.n	800b62a <__gethex+0x9e>
 800b6a2:	2400      	movs	r4, #0
 800b6a4:	1cb1      	adds	r1, r6, #2
 800b6a6:	e7cc      	b.n	800b642 <__gethex+0xb6>
 800b6a8:	2401      	movs	r4, #1
 800b6aa:	e7fb      	b.n	800b6a4 <__gethex+0x118>
 800b6ac:	fb03 0002 	mla	r0, r3, r2, r0
 800b6b0:	e7ce      	b.n	800b650 <__gethex+0xc4>
 800b6b2:	4631      	mov	r1, r6
 800b6b4:	e7de      	b.n	800b674 <__gethex+0xe8>
 800b6b6:	4629      	mov	r1, r5
 800b6b8:	eba6 0309 	sub.w	r3, r6, r9
 800b6bc:	3b01      	subs	r3, #1
 800b6be:	2b07      	cmp	r3, #7
 800b6c0:	dc0a      	bgt.n	800b6d8 <__gethex+0x14c>
 800b6c2:	9801      	ldr	r0, [sp, #4]
 800b6c4:	f7fd ff6a 	bl	800959c <_Balloc>
 800b6c8:	4604      	mov	r4, r0
 800b6ca:	b940      	cbnz	r0, 800b6de <__gethex+0x152>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	21e4      	movs	r1, #228	@ 0xe4
 800b6d0:	4b5b      	ldr	r3, [pc, #364]	@ (800b840 <__gethex+0x2b4>)
 800b6d2:	485c      	ldr	r0, [pc, #368]	@ (800b844 <__gethex+0x2b8>)
 800b6d4:	f7ff fec0 	bl	800b458 <__assert_func>
 800b6d8:	3101      	adds	r1, #1
 800b6da:	105b      	asrs	r3, r3, #1
 800b6dc:	e7ef      	b.n	800b6be <__gethex+0x132>
 800b6de:	2300      	movs	r3, #0
 800b6e0:	f100 0a14 	add.w	sl, r0, #20
 800b6e4:	4655      	mov	r5, sl
 800b6e6:	469b      	mov	fp, r3
 800b6e8:	45b1      	cmp	r9, r6
 800b6ea:	d337      	bcc.n	800b75c <__gethex+0x1d0>
 800b6ec:	f845 bb04 	str.w	fp, [r5], #4
 800b6f0:	eba5 050a 	sub.w	r5, r5, sl
 800b6f4:	10ad      	asrs	r5, r5, #2
 800b6f6:	6125      	str	r5, [r4, #16]
 800b6f8:	4658      	mov	r0, fp
 800b6fa:	f7fe f841 	bl	8009780 <__hi0bits>
 800b6fe:	016d      	lsls	r5, r5, #5
 800b700:	f8d8 6000 	ldr.w	r6, [r8]
 800b704:	1a2d      	subs	r5, r5, r0
 800b706:	42b5      	cmp	r5, r6
 800b708:	dd54      	ble.n	800b7b4 <__gethex+0x228>
 800b70a:	1bad      	subs	r5, r5, r6
 800b70c:	4629      	mov	r1, r5
 800b70e:	4620      	mov	r0, r4
 800b710:	f7fe fbc9 	bl	8009ea6 <__any_on>
 800b714:	4681      	mov	r9, r0
 800b716:	b178      	cbz	r0, 800b738 <__gethex+0x1ac>
 800b718:	f04f 0901 	mov.w	r9, #1
 800b71c:	1e6b      	subs	r3, r5, #1
 800b71e:	1159      	asrs	r1, r3, #5
 800b720:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b724:	f003 021f 	and.w	r2, r3, #31
 800b728:	fa09 f202 	lsl.w	r2, r9, r2
 800b72c:	420a      	tst	r2, r1
 800b72e:	d003      	beq.n	800b738 <__gethex+0x1ac>
 800b730:	454b      	cmp	r3, r9
 800b732:	dc36      	bgt.n	800b7a2 <__gethex+0x216>
 800b734:	f04f 0902 	mov.w	r9, #2
 800b738:	4629      	mov	r1, r5
 800b73a:	4620      	mov	r0, r4
 800b73c:	f7ff febe 	bl	800b4bc <rshift>
 800b740:	442f      	add	r7, r5
 800b742:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b746:	42bb      	cmp	r3, r7
 800b748:	da42      	bge.n	800b7d0 <__gethex+0x244>
 800b74a:	4621      	mov	r1, r4
 800b74c:	9801      	ldr	r0, [sp, #4]
 800b74e:	f7fd ff65 	bl	800961c <_Bfree>
 800b752:	2300      	movs	r3, #0
 800b754:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b756:	25a3      	movs	r5, #163	@ 0xa3
 800b758:	6013      	str	r3, [r2, #0]
 800b75a:	e793      	b.n	800b684 <__gethex+0xf8>
 800b75c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b760:	2a2e      	cmp	r2, #46	@ 0x2e
 800b762:	d012      	beq.n	800b78a <__gethex+0x1fe>
 800b764:	2b20      	cmp	r3, #32
 800b766:	d104      	bne.n	800b772 <__gethex+0x1e6>
 800b768:	f845 bb04 	str.w	fp, [r5], #4
 800b76c:	f04f 0b00 	mov.w	fp, #0
 800b770:	465b      	mov	r3, fp
 800b772:	7830      	ldrb	r0, [r6, #0]
 800b774:	9303      	str	r3, [sp, #12]
 800b776:	f7ff fef4 	bl	800b562 <__hexdig_fun>
 800b77a:	9b03      	ldr	r3, [sp, #12]
 800b77c:	f000 000f 	and.w	r0, r0, #15
 800b780:	4098      	lsls	r0, r3
 800b782:	ea4b 0b00 	orr.w	fp, fp, r0
 800b786:	3304      	adds	r3, #4
 800b788:	e7ae      	b.n	800b6e8 <__gethex+0x15c>
 800b78a:	45b1      	cmp	r9, r6
 800b78c:	d8ea      	bhi.n	800b764 <__gethex+0x1d8>
 800b78e:	2201      	movs	r2, #1
 800b790:	4630      	mov	r0, r6
 800b792:	492a      	ldr	r1, [pc, #168]	@ (800b83c <__gethex+0x2b0>)
 800b794:	9303      	str	r3, [sp, #12]
 800b796:	f7ff fe14 	bl	800b3c2 <strncmp>
 800b79a:	9b03      	ldr	r3, [sp, #12]
 800b79c:	2800      	cmp	r0, #0
 800b79e:	d1e1      	bne.n	800b764 <__gethex+0x1d8>
 800b7a0:	e7a2      	b.n	800b6e8 <__gethex+0x15c>
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	1ea9      	subs	r1, r5, #2
 800b7a6:	f7fe fb7e 	bl	8009ea6 <__any_on>
 800b7aa:	2800      	cmp	r0, #0
 800b7ac:	d0c2      	beq.n	800b734 <__gethex+0x1a8>
 800b7ae:	f04f 0903 	mov.w	r9, #3
 800b7b2:	e7c1      	b.n	800b738 <__gethex+0x1ac>
 800b7b4:	da09      	bge.n	800b7ca <__gethex+0x23e>
 800b7b6:	1b75      	subs	r5, r6, r5
 800b7b8:	4621      	mov	r1, r4
 800b7ba:	462a      	mov	r2, r5
 800b7bc:	9801      	ldr	r0, [sp, #4]
 800b7be:	f7fe f943 	bl	8009a48 <__lshift>
 800b7c2:	4604      	mov	r4, r0
 800b7c4:	1b7f      	subs	r7, r7, r5
 800b7c6:	f100 0a14 	add.w	sl, r0, #20
 800b7ca:	f04f 0900 	mov.w	r9, #0
 800b7ce:	e7b8      	b.n	800b742 <__gethex+0x1b6>
 800b7d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b7d4:	42bd      	cmp	r5, r7
 800b7d6:	dd6f      	ble.n	800b8b8 <__gethex+0x32c>
 800b7d8:	1bed      	subs	r5, r5, r7
 800b7da:	42ae      	cmp	r6, r5
 800b7dc:	dc34      	bgt.n	800b848 <__gethex+0x2bc>
 800b7de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b7e2:	2b02      	cmp	r3, #2
 800b7e4:	d022      	beq.n	800b82c <__gethex+0x2a0>
 800b7e6:	2b03      	cmp	r3, #3
 800b7e8:	d024      	beq.n	800b834 <__gethex+0x2a8>
 800b7ea:	2b01      	cmp	r3, #1
 800b7ec:	d115      	bne.n	800b81a <__gethex+0x28e>
 800b7ee:	42ae      	cmp	r6, r5
 800b7f0:	d113      	bne.n	800b81a <__gethex+0x28e>
 800b7f2:	2e01      	cmp	r6, #1
 800b7f4:	d10b      	bne.n	800b80e <__gethex+0x282>
 800b7f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b7fa:	9a02      	ldr	r2, [sp, #8]
 800b7fc:	2562      	movs	r5, #98	@ 0x62
 800b7fe:	6013      	str	r3, [r2, #0]
 800b800:	2301      	movs	r3, #1
 800b802:	6123      	str	r3, [r4, #16]
 800b804:	f8ca 3000 	str.w	r3, [sl]
 800b808:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b80a:	601c      	str	r4, [r3, #0]
 800b80c:	e73a      	b.n	800b684 <__gethex+0xf8>
 800b80e:	4620      	mov	r0, r4
 800b810:	1e71      	subs	r1, r6, #1
 800b812:	f7fe fb48 	bl	8009ea6 <__any_on>
 800b816:	2800      	cmp	r0, #0
 800b818:	d1ed      	bne.n	800b7f6 <__gethex+0x26a>
 800b81a:	4621      	mov	r1, r4
 800b81c:	9801      	ldr	r0, [sp, #4]
 800b81e:	f7fd fefd 	bl	800961c <_Bfree>
 800b822:	2300      	movs	r3, #0
 800b824:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b826:	2550      	movs	r5, #80	@ 0x50
 800b828:	6013      	str	r3, [r2, #0]
 800b82a:	e72b      	b.n	800b684 <__gethex+0xf8>
 800b82c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d1f3      	bne.n	800b81a <__gethex+0x28e>
 800b832:	e7e0      	b.n	800b7f6 <__gethex+0x26a>
 800b834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b836:	2b00      	cmp	r3, #0
 800b838:	d1dd      	bne.n	800b7f6 <__gethex+0x26a>
 800b83a:	e7ee      	b.n	800b81a <__gethex+0x28e>
 800b83c:	0800bfe8 	.word	0x0800bfe8
 800b840:	0800be7b 	.word	0x0800be7b
 800b844:	0800c196 	.word	0x0800c196
 800b848:	1e6f      	subs	r7, r5, #1
 800b84a:	f1b9 0f00 	cmp.w	r9, #0
 800b84e:	d130      	bne.n	800b8b2 <__gethex+0x326>
 800b850:	b127      	cbz	r7, 800b85c <__gethex+0x2d0>
 800b852:	4639      	mov	r1, r7
 800b854:	4620      	mov	r0, r4
 800b856:	f7fe fb26 	bl	8009ea6 <__any_on>
 800b85a:	4681      	mov	r9, r0
 800b85c:	2301      	movs	r3, #1
 800b85e:	4629      	mov	r1, r5
 800b860:	1b76      	subs	r6, r6, r5
 800b862:	2502      	movs	r5, #2
 800b864:	117a      	asrs	r2, r7, #5
 800b866:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b86a:	f007 071f 	and.w	r7, r7, #31
 800b86e:	40bb      	lsls	r3, r7
 800b870:	4213      	tst	r3, r2
 800b872:	4620      	mov	r0, r4
 800b874:	bf18      	it	ne
 800b876:	f049 0902 	orrne.w	r9, r9, #2
 800b87a:	f7ff fe1f 	bl	800b4bc <rshift>
 800b87e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b882:	f1b9 0f00 	cmp.w	r9, #0
 800b886:	d047      	beq.n	800b918 <__gethex+0x38c>
 800b888:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b88c:	2b02      	cmp	r3, #2
 800b88e:	d015      	beq.n	800b8bc <__gethex+0x330>
 800b890:	2b03      	cmp	r3, #3
 800b892:	d017      	beq.n	800b8c4 <__gethex+0x338>
 800b894:	2b01      	cmp	r3, #1
 800b896:	d109      	bne.n	800b8ac <__gethex+0x320>
 800b898:	f019 0f02 	tst.w	r9, #2
 800b89c:	d006      	beq.n	800b8ac <__gethex+0x320>
 800b89e:	f8da 3000 	ldr.w	r3, [sl]
 800b8a2:	ea49 0903 	orr.w	r9, r9, r3
 800b8a6:	f019 0f01 	tst.w	r9, #1
 800b8aa:	d10e      	bne.n	800b8ca <__gethex+0x33e>
 800b8ac:	f045 0510 	orr.w	r5, r5, #16
 800b8b0:	e032      	b.n	800b918 <__gethex+0x38c>
 800b8b2:	f04f 0901 	mov.w	r9, #1
 800b8b6:	e7d1      	b.n	800b85c <__gethex+0x2d0>
 800b8b8:	2501      	movs	r5, #1
 800b8ba:	e7e2      	b.n	800b882 <__gethex+0x2f6>
 800b8bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8be:	f1c3 0301 	rsb	r3, r3, #1
 800b8c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b8c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d0f0      	beq.n	800b8ac <__gethex+0x320>
 800b8ca:	f04f 0c00 	mov.w	ip, #0
 800b8ce:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b8d2:	f104 0314 	add.w	r3, r4, #20
 800b8d6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b8da:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b8e8:	d01b      	beq.n	800b922 <__gethex+0x396>
 800b8ea:	3201      	adds	r2, #1
 800b8ec:	6002      	str	r2, [r0, #0]
 800b8ee:	2d02      	cmp	r5, #2
 800b8f0:	f104 0314 	add.w	r3, r4, #20
 800b8f4:	d13c      	bne.n	800b970 <__gethex+0x3e4>
 800b8f6:	f8d8 2000 	ldr.w	r2, [r8]
 800b8fa:	3a01      	subs	r2, #1
 800b8fc:	42b2      	cmp	r2, r6
 800b8fe:	d109      	bne.n	800b914 <__gethex+0x388>
 800b900:	2201      	movs	r2, #1
 800b902:	1171      	asrs	r1, r6, #5
 800b904:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b908:	f006 061f 	and.w	r6, r6, #31
 800b90c:	fa02 f606 	lsl.w	r6, r2, r6
 800b910:	421e      	tst	r6, r3
 800b912:	d13a      	bne.n	800b98a <__gethex+0x3fe>
 800b914:	f045 0520 	orr.w	r5, r5, #32
 800b918:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b91a:	601c      	str	r4, [r3, #0]
 800b91c:	9b02      	ldr	r3, [sp, #8]
 800b91e:	601f      	str	r7, [r3, #0]
 800b920:	e6b0      	b.n	800b684 <__gethex+0xf8>
 800b922:	4299      	cmp	r1, r3
 800b924:	f843 cc04 	str.w	ip, [r3, #-4]
 800b928:	d8d9      	bhi.n	800b8de <__gethex+0x352>
 800b92a:	68a3      	ldr	r3, [r4, #8]
 800b92c:	459b      	cmp	fp, r3
 800b92e:	db17      	blt.n	800b960 <__gethex+0x3d4>
 800b930:	6861      	ldr	r1, [r4, #4]
 800b932:	9801      	ldr	r0, [sp, #4]
 800b934:	3101      	adds	r1, #1
 800b936:	f7fd fe31 	bl	800959c <_Balloc>
 800b93a:	4681      	mov	r9, r0
 800b93c:	b918      	cbnz	r0, 800b946 <__gethex+0x3ba>
 800b93e:	4602      	mov	r2, r0
 800b940:	2184      	movs	r1, #132	@ 0x84
 800b942:	4b19      	ldr	r3, [pc, #100]	@ (800b9a8 <__gethex+0x41c>)
 800b944:	e6c5      	b.n	800b6d2 <__gethex+0x146>
 800b946:	6922      	ldr	r2, [r4, #16]
 800b948:	f104 010c 	add.w	r1, r4, #12
 800b94c:	3202      	adds	r2, #2
 800b94e:	0092      	lsls	r2, r2, #2
 800b950:	300c      	adds	r0, #12
 800b952:	f7fc fec2 	bl	80086da <memcpy>
 800b956:	4621      	mov	r1, r4
 800b958:	9801      	ldr	r0, [sp, #4]
 800b95a:	f7fd fe5f 	bl	800961c <_Bfree>
 800b95e:	464c      	mov	r4, r9
 800b960:	6923      	ldr	r3, [r4, #16]
 800b962:	1c5a      	adds	r2, r3, #1
 800b964:	6122      	str	r2, [r4, #16]
 800b966:	2201      	movs	r2, #1
 800b968:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b96c:	615a      	str	r2, [r3, #20]
 800b96e:	e7be      	b.n	800b8ee <__gethex+0x362>
 800b970:	6922      	ldr	r2, [r4, #16]
 800b972:	455a      	cmp	r2, fp
 800b974:	dd0b      	ble.n	800b98e <__gethex+0x402>
 800b976:	2101      	movs	r1, #1
 800b978:	4620      	mov	r0, r4
 800b97a:	f7ff fd9f 	bl	800b4bc <rshift>
 800b97e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b982:	3701      	adds	r7, #1
 800b984:	42bb      	cmp	r3, r7
 800b986:	f6ff aee0 	blt.w	800b74a <__gethex+0x1be>
 800b98a:	2501      	movs	r5, #1
 800b98c:	e7c2      	b.n	800b914 <__gethex+0x388>
 800b98e:	f016 061f 	ands.w	r6, r6, #31
 800b992:	d0fa      	beq.n	800b98a <__gethex+0x3fe>
 800b994:	4453      	add	r3, sl
 800b996:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b99a:	f7fd fef1 	bl	8009780 <__hi0bits>
 800b99e:	f1c6 0620 	rsb	r6, r6, #32
 800b9a2:	42b0      	cmp	r0, r6
 800b9a4:	dbe7      	blt.n	800b976 <__gethex+0x3ea>
 800b9a6:	e7f0      	b.n	800b98a <__gethex+0x3fe>
 800b9a8:	0800be7b 	.word	0x0800be7b

0800b9ac <L_shift>:
 800b9ac:	f1c2 0208 	rsb	r2, r2, #8
 800b9b0:	0092      	lsls	r2, r2, #2
 800b9b2:	b570      	push	{r4, r5, r6, lr}
 800b9b4:	f1c2 0620 	rsb	r6, r2, #32
 800b9b8:	6843      	ldr	r3, [r0, #4]
 800b9ba:	6804      	ldr	r4, [r0, #0]
 800b9bc:	fa03 f506 	lsl.w	r5, r3, r6
 800b9c0:	432c      	orrs	r4, r5
 800b9c2:	40d3      	lsrs	r3, r2
 800b9c4:	6004      	str	r4, [r0, #0]
 800b9c6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b9ca:	4288      	cmp	r0, r1
 800b9cc:	d3f4      	bcc.n	800b9b8 <L_shift+0xc>
 800b9ce:	bd70      	pop	{r4, r5, r6, pc}

0800b9d0 <__match>:
 800b9d0:	b530      	push	{r4, r5, lr}
 800b9d2:	6803      	ldr	r3, [r0, #0]
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9da:	b914      	cbnz	r4, 800b9e2 <__match+0x12>
 800b9dc:	6003      	str	r3, [r0, #0]
 800b9de:	2001      	movs	r0, #1
 800b9e0:	bd30      	pop	{r4, r5, pc}
 800b9e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9e6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b9ea:	2d19      	cmp	r5, #25
 800b9ec:	bf98      	it	ls
 800b9ee:	3220      	addls	r2, #32
 800b9f0:	42a2      	cmp	r2, r4
 800b9f2:	d0f0      	beq.n	800b9d6 <__match+0x6>
 800b9f4:	2000      	movs	r0, #0
 800b9f6:	e7f3      	b.n	800b9e0 <__match+0x10>

0800b9f8 <__hexnan>:
 800b9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9fc:	2500      	movs	r5, #0
 800b9fe:	680b      	ldr	r3, [r1, #0]
 800ba00:	4682      	mov	sl, r0
 800ba02:	115e      	asrs	r6, r3, #5
 800ba04:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ba08:	f013 031f 	ands.w	r3, r3, #31
 800ba0c:	bf18      	it	ne
 800ba0e:	3604      	addne	r6, #4
 800ba10:	1f37      	subs	r7, r6, #4
 800ba12:	4690      	mov	r8, r2
 800ba14:	46b9      	mov	r9, r7
 800ba16:	463c      	mov	r4, r7
 800ba18:	46ab      	mov	fp, r5
 800ba1a:	b087      	sub	sp, #28
 800ba1c:	6801      	ldr	r1, [r0, #0]
 800ba1e:	9301      	str	r3, [sp, #4]
 800ba20:	f846 5c04 	str.w	r5, [r6, #-4]
 800ba24:	9502      	str	r5, [sp, #8]
 800ba26:	784a      	ldrb	r2, [r1, #1]
 800ba28:	1c4b      	adds	r3, r1, #1
 800ba2a:	9303      	str	r3, [sp, #12]
 800ba2c:	b342      	cbz	r2, 800ba80 <__hexnan+0x88>
 800ba2e:	4610      	mov	r0, r2
 800ba30:	9105      	str	r1, [sp, #20]
 800ba32:	9204      	str	r2, [sp, #16]
 800ba34:	f7ff fd95 	bl	800b562 <__hexdig_fun>
 800ba38:	2800      	cmp	r0, #0
 800ba3a:	d151      	bne.n	800bae0 <__hexnan+0xe8>
 800ba3c:	9a04      	ldr	r2, [sp, #16]
 800ba3e:	9905      	ldr	r1, [sp, #20]
 800ba40:	2a20      	cmp	r2, #32
 800ba42:	d818      	bhi.n	800ba76 <__hexnan+0x7e>
 800ba44:	9b02      	ldr	r3, [sp, #8]
 800ba46:	459b      	cmp	fp, r3
 800ba48:	dd13      	ble.n	800ba72 <__hexnan+0x7a>
 800ba4a:	454c      	cmp	r4, r9
 800ba4c:	d206      	bcs.n	800ba5c <__hexnan+0x64>
 800ba4e:	2d07      	cmp	r5, #7
 800ba50:	dc04      	bgt.n	800ba5c <__hexnan+0x64>
 800ba52:	462a      	mov	r2, r5
 800ba54:	4649      	mov	r1, r9
 800ba56:	4620      	mov	r0, r4
 800ba58:	f7ff ffa8 	bl	800b9ac <L_shift>
 800ba5c:	4544      	cmp	r4, r8
 800ba5e:	d952      	bls.n	800bb06 <__hexnan+0x10e>
 800ba60:	2300      	movs	r3, #0
 800ba62:	f1a4 0904 	sub.w	r9, r4, #4
 800ba66:	f844 3c04 	str.w	r3, [r4, #-4]
 800ba6a:	461d      	mov	r5, r3
 800ba6c:	464c      	mov	r4, r9
 800ba6e:	f8cd b008 	str.w	fp, [sp, #8]
 800ba72:	9903      	ldr	r1, [sp, #12]
 800ba74:	e7d7      	b.n	800ba26 <__hexnan+0x2e>
 800ba76:	2a29      	cmp	r2, #41	@ 0x29
 800ba78:	d157      	bne.n	800bb2a <__hexnan+0x132>
 800ba7a:	3102      	adds	r1, #2
 800ba7c:	f8ca 1000 	str.w	r1, [sl]
 800ba80:	f1bb 0f00 	cmp.w	fp, #0
 800ba84:	d051      	beq.n	800bb2a <__hexnan+0x132>
 800ba86:	454c      	cmp	r4, r9
 800ba88:	d206      	bcs.n	800ba98 <__hexnan+0xa0>
 800ba8a:	2d07      	cmp	r5, #7
 800ba8c:	dc04      	bgt.n	800ba98 <__hexnan+0xa0>
 800ba8e:	462a      	mov	r2, r5
 800ba90:	4649      	mov	r1, r9
 800ba92:	4620      	mov	r0, r4
 800ba94:	f7ff ff8a 	bl	800b9ac <L_shift>
 800ba98:	4544      	cmp	r4, r8
 800ba9a:	d936      	bls.n	800bb0a <__hexnan+0x112>
 800ba9c:	4623      	mov	r3, r4
 800ba9e:	f1a8 0204 	sub.w	r2, r8, #4
 800baa2:	f853 1b04 	ldr.w	r1, [r3], #4
 800baa6:	429f      	cmp	r7, r3
 800baa8:	f842 1f04 	str.w	r1, [r2, #4]!
 800baac:	d2f9      	bcs.n	800baa2 <__hexnan+0xaa>
 800baae:	1b3b      	subs	r3, r7, r4
 800bab0:	f023 0303 	bic.w	r3, r3, #3
 800bab4:	3304      	adds	r3, #4
 800bab6:	3401      	adds	r4, #1
 800bab8:	3e03      	subs	r6, #3
 800baba:	42b4      	cmp	r4, r6
 800babc:	bf88      	it	hi
 800babe:	2304      	movhi	r3, #4
 800bac0:	2200      	movs	r2, #0
 800bac2:	4443      	add	r3, r8
 800bac4:	f843 2b04 	str.w	r2, [r3], #4
 800bac8:	429f      	cmp	r7, r3
 800baca:	d2fb      	bcs.n	800bac4 <__hexnan+0xcc>
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	b91b      	cbnz	r3, 800bad8 <__hexnan+0xe0>
 800bad0:	4547      	cmp	r7, r8
 800bad2:	d128      	bne.n	800bb26 <__hexnan+0x12e>
 800bad4:	2301      	movs	r3, #1
 800bad6:	603b      	str	r3, [r7, #0]
 800bad8:	2005      	movs	r0, #5
 800bada:	b007      	add	sp, #28
 800badc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae0:	3501      	adds	r5, #1
 800bae2:	2d08      	cmp	r5, #8
 800bae4:	f10b 0b01 	add.w	fp, fp, #1
 800bae8:	dd06      	ble.n	800baf8 <__hexnan+0x100>
 800baea:	4544      	cmp	r4, r8
 800baec:	d9c1      	bls.n	800ba72 <__hexnan+0x7a>
 800baee:	2300      	movs	r3, #0
 800baf0:	2501      	movs	r5, #1
 800baf2:	f844 3c04 	str.w	r3, [r4, #-4]
 800baf6:	3c04      	subs	r4, #4
 800baf8:	6822      	ldr	r2, [r4, #0]
 800bafa:	f000 000f 	and.w	r0, r0, #15
 800bafe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bb02:	6020      	str	r0, [r4, #0]
 800bb04:	e7b5      	b.n	800ba72 <__hexnan+0x7a>
 800bb06:	2508      	movs	r5, #8
 800bb08:	e7b3      	b.n	800ba72 <__hexnan+0x7a>
 800bb0a:	9b01      	ldr	r3, [sp, #4]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d0dd      	beq.n	800bacc <__hexnan+0xd4>
 800bb10:	f04f 32ff 	mov.w	r2, #4294967295
 800bb14:	f1c3 0320 	rsb	r3, r3, #32
 800bb18:	40da      	lsrs	r2, r3
 800bb1a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bb1e:	4013      	ands	r3, r2
 800bb20:	f846 3c04 	str.w	r3, [r6, #-4]
 800bb24:	e7d2      	b.n	800bacc <__hexnan+0xd4>
 800bb26:	3f04      	subs	r7, #4
 800bb28:	e7d0      	b.n	800bacc <__hexnan+0xd4>
 800bb2a:	2004      	movs	r0, #4
 800bb2c:	e7d5      	b.n	800bada <__hexnan+0xe2>

0800bb2e <__ascii_mbtowc>:
 800bb2e:	b082      	sub	sp, #8
 800bb30:	b901      	cbnz	r1, 800bb34 <__ascii_mbtowc+0x6>
 800bb32:	a901      	add	r1, sp, #4
 800bb34:	b142      	cbz	r2, 800bb48 <__ascii_mbtowc+0x1a>
 800bb36:	b14b      	cbz	r3, 800bb4c <__ascii_mbtowc+0x1e>
 800bb38:	7813      	ldrb	r3, [r2, #0]
 800bb3a:	600b      	str	r3, [r1, #0]
 800bb3c:	7812      	ldrb	r2, [r2, #0]
 800bb3e:	1e10      	subs	r0, r2, #0
 800bb40:	bf18      	it	ne
 800bb42:	2001      	movne	r0, #1
 800bb44:	b002      	add	sp, #8
 800bb46:	4770      	bx	lr
 800bb48:	4610      	mov	r0, r2
 800bb4a:	e7fb      	b.n	800bb44 <__ascii_mbtowc+0x16>
 800bb4c:	f06f 0001 	mvn.w	r0, #1
 800bb50:	e7f8      	b.n	800bb44 <__ascii_mbtowc+0x16>

0800bb52 <_realloc_r>:
 800bb52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb56:	4680      	mov	r8, r0
 800bb58:	4615      	mov	r5, r2
 800bb5a:	460c      	mov	r4, r1
 800bb5c:	b921      	cbnz	r1, 800bb68 <_realloc_r+0x16>
 800bb5e:	4611      	mov	r1, r2
 800bb60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb64:	f7fd bc8e 	b.w	8009484 <_malloc_r>
 800bb68:	b92a      	cbnz	r2, 800bb76 <_realloc_r+0x24>
 800bb6a:	f7fd fc19 	bl	80093a0 <_free_r>
 800bb6e:	2400      	movs	r4, #0
 800bb70:	4620      	mov	r0, r4
 800bb72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb76:	f000 f840 	bl	800bbfa <_malloc_usable_size_r>
 800bb7a:	4285      	cmp	r5, r0
 800bb7c:	4606      	mov	r6, r0
 800bb7e:	d802      	bhi.n	800bb86 <_realloc_r+0x34>
 800bb80:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bb84:	d8f4      	bhi.n	800bb70 <_realloc_r+0x1e>
 800bb86:	4629      	mov	r1, r5
 800bb88:	4640      	mov	r0, r8
 800bb8a:	f7fd fc7b 	bl	8009484 <_malloc_r>
 800bb8e:	4607      	mov	r7, r0
 800bb90:	2800      	cmp	r0, #0
 800bb92:	d0ec      	beq.n	800bb6e <_realloc_r+0x1c>
 800bb94:	42b5      	cmp	r5, r6
 800bb96:	462a      	mov	r2, r5
 800bb98:	4621      	mov	r1, r4
 800bb9a:	bf28      	it	cs
 800bb9c:	4632      	movcs	r2, r6
 800bb9e:	f7fc fd9c 	bl	80086da <memcpy>
 800bba2:	4621      	mov	r1, r4
 800bba4:	4640      	mov	r0, r8
 800bba6:	f7fd fbfb 	bl	80093a0 <_free_r>
 800bbaa:	463c      	mov	r4, r7
 800bbac:	e7e0      	b.n	800bb70 <_realloc_r+0x1e>

0800bbae <__ascii_wctomb>:
 800bbae:	4603      	mov	r3, r0
 800bbb0:	4608      	mov	r0, r1
 800bbb2:	b141      	cbz	r1, 800bbc6 <__ascii_wctomb+0x18>
 800bbb4:	2aff      	cmp	r2, #255	@ 0xff
 800bbb6:	d904      	bls.n	800bbc2 <__ascii_wctomb+0x14>
 800bbb8:	228a      	movs	r2, #138	@ 0x8a
 800bbba:	f04f 30ff 	mov.w	r0, #4294967295
 800bbbe:	601a      	str	r2, [r3, #0]
 800bbc0:	4770      	bx	lr
 800bbc2:	2001      	movs	r0, #1
 800bbc4:	700a      	strb	r2, [r1, #0]
 800bbc6:	4770      	bx	lr

0800bbc8 <fiprintf>:
 800bbc8:	b40e      	push	{r1, r2, r3}
 800bbca:	b503      	push	{r0, r1, lr}
 800bbcc:	4601      	mov	r1, r0
 800bbce:	ab03      	add	r3, sp, #12
 800bbd0:	4805      	ldr	r0, [pc, #20]	@ (800bbe8 <fiprintf+0x20>)
 800bbd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbd6:	6800      	ldr	r0, [r0, #0]
 800bbd8:	9301      	str	r3, [sp, #4]
 800bbda:	f7ff f983 	bl	800aee4 <_vfiprintf_r>
 800bbde:	b002      	add	sp, #8
 800bbe0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbe4:	b003      	add	sp, #12
 800bbe6:	4770      	bx	lr
 800bbe8:	2000001c 	.word	0x2000001c

0800bbec <abort>:
 800bbec:	2006      	movs	r0, #6
 800bbee:	b508      	push	{r3, lr}
 800bbf0:	f000 f834 	bl	800bc5c <raise>
 800bbf4:	2001      	movs	r0, #1
 800bbf6:	f7f6 fa1a 	bl	800202e <_exit>

0800bbfa <_malloc_usable_size_r>:
 800bbfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbfe:	1f18      	subs	r0, r3, #4
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	bfbc      	itt	lt
 800bc04:	580b      	ldrlt	r3, [r1, r0]
 800bc06:	18c0      	addlt	r0, r0, r3
 800bc08:	4770      	bx	lr

0800bc0a <_raise_r>:
 800bc0a:	291f      	cmp	r1, #31
 800bc0c:	b538      	push	{r3, r4, r5, lr}
 800bc0e:	4605      	mov	r5, r0
 800bc10:	460c      	mov	r4, r1
 800bc12:	d904      	bls.n	800bc1e <_raise_r+0x14>
 800bc14:	2316      	movs	r3, #22
 800bc16:	6003      	str	r3, [r0, #0]
 800bc18:	f04f 30ff 	mov.w	r0, #4294967295
 800bc1c:	bd38      	pop	{r3, r4, r5, pc}
 800bc1e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bc20:	b112      	cbz	r2, 800bc28 <_raise_r+0x1e>
 800bc22:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc26:	b94b      	cbnz	r3, 800bc3c <_raise_r+0x32>
 800bc28:	4628      	mov	r0, r5
 800bc2a:	f000 f831 	bl	800bc90 <_getpid_r>
 800bc2e:	4622      	mov	r2, r4
 800bc30:	4601      	mov	r1, r0
 800bc32:	4628      	mov	r0, r5
 800bc34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc38:	f000 b818 	b.w	800bc6c <_kill_r>
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d00a      	beq.n	800bc56 <_raise_r+0x4c>
 800bc40:	1c59      	adds	r1, r3, #1
 800bc42:	d103      	bne.n	800bc4c <_raise_r+0x42>
 800bc44:	2316      	movs	r3, #22
 800bc46:	6003      	str	r3, [r0, #0]
 800bc48:	2001      	movs	r0, #1
 800bc4a:	e7e7      	b.n	800bc1c <_raise_r+0x12>
 800bc4c:	2100      	movs	r1, #0
 800bc4e:	4620      	mov	r0, r4
 800bc50:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bc54:	4798      	blx	r3
 800bc56:	2000      	movs	r0, #0
 800bc58:	e7e0      	b.n	800bc1c <_raise_r+0x12>
	...

0800bc5c <raise>:
 800bc5c:	4b02      	ldr	r3, [pc, #8]	@ (800bc68 <raise+0xc>)
 800bc5e:	4601      	mov	r1, r0
 800bc60:	6818      	ldr	r0, [r3, #0]
 800bc62:	f7ff bfd2 	b.w	800bc0a <_raise_r>
 800bc66:	bf00      	nop
 800bc68:	2000001c 	.word	0x2000001c

0800bc6c <_kill_r>:
 800bc6c:	b538      	push	{r3, r4, r5, lr}
 800bc6e:	2300      	movs	r3, #0
 800bc70:	4d06      	ldr	r5, [pc, #24]	@ (800bc8c <_kill_r+0x20>)
 800bc72:	4604      	mov	r4, r0
 800bc74:	4608      	mov	r0, r1
 800bc76:	4611      	mov	r1, r2
 800bc78:	602b      	str	r3, [r5, #0]
 800bc7a:	f7f6 f9c8 	bl	800200e <_kill>
 800bc7e:	1c43      	adds	r3, r0, #1
 800bc80:	d102      	bne.n	800bc88 <_kill_r+0x1c>
 800bc82:	682b      	ldr	r3, [r5, #0]
 800bc84:	b103      	cbz	r3, 800bc88 <_kill_r+0x1c>
 800bc86:	6023      	str	r3, [r4, #0]
 800bc88:	bd38      	pop	{r3, r4, r5, pc}
 800bc8a:	bf00      	nop
 800bc8c:	2000266c 	.word	0x2000266c

0800bc90 <_getpid_r>:
 800bc90:	f7f6 b9b6 	b.w	8002000 <_getpid>

0800bc94 <_init>:
 800bc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc96:	bf00      	nop
 800bc98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc9a:	bc08      	pop	{r3}
 800bc9c:	469e      	mov	lr, r3
 800bc9e:	4770      	bx	lr

0800bca0 <_fini>:
 800bca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bca2:	bf00      	nop
 800bca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bca6:	bc08      	pop	{r3}
 800bca8:	469e      	mov	lr, r3
 800bcaa:	4770      	bx	lr
